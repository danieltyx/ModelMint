{"ast":null,"code":"var _jsxFileName = \"/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/src/components/NFTpage.js\",\n    _s = $RefreshSig$();\n\nimport Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NFTPage(props) {\n  _s();\n\n  const [data, updateData] = useState({});\n  const [dataFetched, updateDataFetched] = useState(false);\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress(); //Pull the deployed contract instance\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr);\n    updateCurrAddress(addr);\n  }\n\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner(); //Pull the deployed contract instance\n\n      let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n      const salePrice = ethers.utils.parseUnits(data.price, 'ether');\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\"); //run the executeSale function\n\n      let transaction = await contract.executeSale(tokenId, {\n        value: salePrice\n      });\n      await transaction.wait();\n      alert('You successfully bought the NFT!');\n      updateMessage(\"\");\n    } catch (e) {\n      alert(\"Upload Error\" + e);\n    }\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  if (typeof data.image == \"string\") data.image = GetIpfsUrlFromPinata(data.image);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      \"min-height\": \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex ml-20 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: data.image,\n        alt: \"\",\n        className: \"w-2/5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Name: \", data.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Description: \", data.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Price: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"\",\n            children: data.price + \" ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Owner: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.owner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Seller: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.seller\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currAddress != data.owner && currAddress != data.seller ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",\n            onClick: () => buyNFT(tokenId),\n            children: \"Buy this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-emerald-700\",\n            children: \"You are the owner of this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-green text-center mt-3\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NFTPage, \"tHfbAfnHJAVQy91bdK1UPtClOpY=\", false, function () {\n  return [useParams];\n});\n\n_c = NFTPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NFTPage\");","map":{"version":3,"names":["Navbar","axie","useLocation","useParams","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","NFTPage","props","data","updateData","dataFetched","updateDataFetched","message","updateMessage","currAddress","updateCurrAddress","getNFTData","tokenId","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","addr","getAddress","contract","Contract","address","abi","tokenURI","listedToken","getListedTokenForId","meta","get","console","log","item","price","seller","owner","image","name","description","buyNFT","salePrice","utils","parseUnits","transaction","executeSale","value","wait","alert","e","params"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/src/components/NFTpage.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\n\nexport default function NFTPage (props) {\n\nconst [data, updateData] = useState({});\nconst [dataFetched, updateDataFetched] = useState(false);\nconst [message, updateMessage] = useState(\"\");\nconst [currAddress, updateCurrAddress] = useState(\"0x\");\n\nasync function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n\n    let item = {\n        price: meta.price,\n        tokenId: tokenId,\n        seller: listedToken.seller,\n        owner: listedToken.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description,\n    }\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr)\n    updateCurrAddress(addr);\n}\n\nasync function buyNFT(tokenId) {\n    try {\n        const ethers = require(\"ethers\");\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        //Pull the deployed contract instance\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n        const salePrice = ethers.utils.parseUnits(data.price, 'ether')\n        updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\")\n        //run the executeSale function\n        let transaction = await contract.executeSale(tokenId, {value:salePrice});\n        await transaction.wait();\n\n        alert('You successfully bought the NFT!');\n        updateMessage(\"\");\n    }\n    catch(e) {\n        alert(\"Upload Error\"+e)\n    }\n}\n\n    const params = useParams();\n    const tokenId = params.tokenId;\n    if(!dataFetched)\n        getNFTData(tokenId);\n    if(typeof data.image == \"string\")\n        data.image = GetIpfsUrlFromPinata(data.image);\n\n    return(\n        <div style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"flex ml-20 mt-20\">\n                <img src={data.image} alt=\"\" className=\"w-2/5\" />\n                <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n                    <div>\n                        Name: {data.name}\n                    </div>\n                    <div>\n                        Description: {data.description}\n                    </div>\n                    <div>\n                        Price: <span className=\"\">{data.price + \" ETH\"}</span>\n                    </div>\n                    <div>\n                        Owner: <span className=\"text-sm\">{data.owner}</span>\n                    </div>\n                    <div>\n                        Seller: <span className=\"text-sm\">{data.seller}</span>\n                    </div>\n                    <div>\n                    { currAddress != data.owner && currAddress != data.seller ?\n                        <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" onClick={() => buyNFT(tokenId)}>Buy this NFT</button>\n                        : <div className=\"text-emerald-700\">You are the owner of this NFT</div>\n                    }\n                    \n                    <div className=\"text-green text-center mt-3\">{message}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,oBAAT,QAAqC,UAArC;;AAEA,eAAe,SAASC,OAAT,CAAkBC,KAAlB,EAAyB;EAAA;;EAExC,MAAM,CAACC,IAAD,EAAOC,UAAP,IAAqBL,QAAQ,CAAC,EAAD,CAAnC;EACA,MAAM,CAACM,WAAD,EAAcC,iBAAd,IAAmCP,QAAQ,CAAC,KAAD,CAAjD;EACA,MAAM,CAACQ,OAAD,EAAUC,aAAV,IAA2BT,QAAQ,CAAC,EAAD,CAAzC;EACA,MAAM,CAACU,WAAD,EAAcC,iBAAd,IAAmCX,QAAQ,CAAC,IAAD,CAAjD;;EAEA,eAAeY,UAAf,CAA0BC,OAA1B,EAAmC;IAC/B,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,CAD+B,CAE/B;;;IACA,MAAMC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;IACA,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;IACA,MAAMC,IAAI,GAAG,MAAMF,MAAM,CAACG,UAAP,EAAnB,CAL+B,CAM/B;;IACA,IAAIC,QAAQ,GAAG,IAAIX,MAAM,CAACY,QAAX,CAAoB5B,eAAe,CAAC6B,OAApC,EAA6C7B,eAAe,CAAC8B,GAA7D,EAAkEP,MAAlE,CAAf,CAP+B,CAQ/B;;IACA,IAAIQ,QAAQ,GAAG,MAAMJ,QAAQ,CAACI,QAAT,CAAkBhB,OAAlB,CAArB;IACA,MAAMiB,WAAW,GAAG,MAAML,QAAQ,CAACM,mBAAT,CAA6BlB,OAA7B,CAA1B;IACAgB,QAAQ,GAAG5B,oBAAoB,CAAC4B,QAAD,CAA/B;IACA,IAAIG,IAAI,GAAG,MAAMjC,KAAK,CAACkC,GAAN,CAAUJ,QAAV,CAAjB;IACAG,IAAI,GAAGA,IAAI,CAAC5B,IAAZ;IACA8B,OAAO,CAACC,GAAR,CAAYL,WAAZ;IAEA,IAAIM,IAAI,GAAG;MACPC,KAAK,EAAEL,IAAI,CAACK,KADL;MAEPxB,OAAO,EAAEA,OAFF;MAGPyB,MAAM,EAAER,WAAW,CAACQ,MAHb;MAIPC,KAAK,EAAET,WAAW,CAACS,KAJZ;MAKPC,KAAK,EAAER,IAAI,CAACQ,KALL;MAMPC,IAAI,EAAET,IAAI,CAACS,IANJ;MAOPC,WAAW,EAAEV,IAAI,CAACU;IAPX,CAAX;IASAR,OAAO,CAACC,GAAR,CAAYC,IAAZ;IACA/B,UAAU,CAAC+B,IAAD,CAAV;IACA7B,iBAAiB,CAAC,IAAD,CAAjB;IACA2B,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBZ,IAAvB;IACAZ,iBAAiB,CAACY,IAAD,CAAjB;EACH;;EAED,eAAeoB,MAAf,CAAsB9B,OAAtB,EAA+B;IAC3B,IAAI;MACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,CADA,CAEA;;;MACA,MAAMC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;MACA,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf,CAJA,CAMA;;MACA,IAAIG,QAAQ,GAAG,IAAIX,MAAM,CAACY,QAAX,CAAoB5B,eAAe,CAAC6B,OAApC,EAA6C7B,eAAe,CAAC8B,GAA7D,EAAkEP,MAAlE,CAAf;MACA,MAAMuB,SAAS,GAAG9B,MAAM,CAAC+B,KAAP,CAAaC,UAAb,CAAwB1C,IAAI,CAACiC,KAA7B,EAAoC,OAApC,CAAlB;MACA5B,aAAa,CAAC,6CAAD,CAAb,CATA,CAUA;;MACA,IAAIsC,WAAW,GAAG,MAAMtB,QAAQ,CAACuB,WAAT,CAAqBnC,OAArB,EAA8B;QAACoC,KAAK,EAACL;MAAP,CAA9B,CAAxB;MACA,MAAMG,WAAW,CAACG,IAAZ,EAAN;MAEAC,KAAK,CAAC,kCAAD,CAAL;MACA1C,aAAa,CAAC,EAAD,CAAb;IACH,CAhBD,CAiBA,OAAM2C,CAAN,EAAS;MACLD,KAAK,CAAC,iBAAeC,CAAhB,CAAL;IACH;EACJ;;EAEG,MAAMC,MAAM,GAAGxD,SAAS,EAAxB;EACA,MAAMgB,OAAO,GAAGwC,MAAM,CAACxC,OAAvB;EACA,IAAG,CAACP,WAAJ,EACIM,UAAU,CAACC,OAAD,CAAV;EACJ,IAAG,OAAOT,IAAI,CAACoC,KAAZ,IAAqB,QAAxB,EACIpC,IAAI,CAACoC,KAAL,GAAavC,oBAAoB,CAACG,IAAI,CAACoC,KAAN,CAAjC;EAEJ,oBACI;IAAK,KAAK,EAAE;MAAC,cAAa;IAAd,CAAZ;IAAA,wBACI,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAK,SAAS,EAAC,kBAAf;MAAA,wBACI;QAAK,GAAG,EAAEpC,IAAI,CAACoC,KAAf;QAAsB,GAAG,EAAC,EAA1B;QAA6B,SAAS,EAAC;MAAvC;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAK,SAAS,EAAC,uEAAf;QAAA,wBACI;UAAA,qBACWpC,IAAI,CAACqC,IADhB;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAII;UAAA,4BACkBrC,IAAI,CAACsC,WADvB;QAAA;UAAA;UAAA;UAAA;QAAA,QAJJ,eAOI;UAAA,mCACW;YAAM,SAAS,EAAC,EAAhB;YAAA,UAAoBtC,IAAI,CAACiC,KAAL,GAAa;UAAjC;YAAA;YAAA;YAAA;UAAA,QADX;QAAA;UAAA;UAAA;UAAA;QAAA,QAPJ,eAUI;UAAA,mCACW;YAAM,SAAS,EAAC,SAAhB;YAAA,UAA2BjC,IAAI,CAACmC;UAAhC;YAAA;YAAA;YAAA;UAAA,QADX;QAAA;UAAA;UAAA;UAAA;QAAA,QAVJ,eAaI;UAAA,oCACY;YAAM,SAAS,EAAC,SAAhB;YAAA,UAA2BnC,IAAI,CAACkC;UAAhC;YAAA;YAAA;YAAA;UAAA,QADZ;QAAA;UAAA;UAAA;UAAA;QAAA,QAbJ,eAgBI;UAAA,WACE5B,WAAW,IAAIN,IAAI,CAACmC,KAApB,IAA6B7B,WAAW,IAAIN,IAAI,CAACkC,MAAjD,gBACE;YAAQ,SAAS,EAAC,mGAAlB;YAAsH,OAAO,EAAE,MAAMK,MAAM,CAAC9B,OAAD,CAA3I;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QADF,gBAEI;YAAK,SAAS,EAAC,kBAAf;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAHN,eAMA;YAAK,SAAS,EAAC,6BAAf;YAAA,UAA8CL;UAA9C;YAAA;YAAA;YAAA;UAAA,QANA;QAAA;UAAA;UAAA;UAAA;QAAA,QAhBJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiCH;;GAtGuBN,O;UA8DLL,S;;;KA9DKK,O"},"metadata":{},"sourceType":"module"}