{"ast":null,"code":"\"use strict\"; // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n  constructor(coerceFunc) {\n    defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n  }\n\n  _getCoder(param) {\n    switch (param.baseType) {\n      case \"address\":\n        return new AddressCoder(param.name);\n\n      case \"bool\":\n        return new BooleanCoder(param.name);\n\n      case \"string\":\n        return new StringCoder(param.name);\n\n      case \"bytes\":\n        return new BytesCoder(param.name);\n\n      case \"array\":\n        return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n\n      case \"tuple\":\n        return new TupleCoder((param.components || []).map(component => {\n          return this._getCoder(component);\n        }), param.name);\n\n      case \"\":\n        return new NullCoder(param.name);\n    } // u?int[0-9]*\n\n\n    let match = param.type.match(paramTypeNumber);\n\n    if (match) {\n      let size = parseInt(match[2] || \"256\");\n\n      if (size === 0 || size > 256 || size % 8 !== 0) {\n        logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n      }\n\n      return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n    } // bytes[0-9]+\n\n\n    match = param.type.match(paramTypeBytes);\n\n    if (match) {\n      let size = parseInt(match[1]);\n\n      if (size === 0 || size > 32) {\n        logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n      }\n\n      return new FixedBytesCoder(size, param.name);\n    }\n\n    return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n  }\n\n  _getWordSize() {\n    return 32;\n  }\n\n  _getReader(data, allowLoose) {\n    return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n  }\n\n  _getWriter() {\n    return new Writer(this._getWordSize());\n  }\n\n  getDefaultValue(types) {\n    const coders = types.map(type => this._getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    return coder.defaultValue();\n  }\n\n  encode(types, values) {\n    if (types.length !== values.length) {\n      logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n        count: {\n          types: types.length,\n          values: values.length\n        },\n        value: {\n          types: types,\n          values: values\n        }\n      });\n    }\n\n    const coders = types.map(type => this._getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n\n    const writer = this._getWriter();\n\n    coder.encode(writer, values);\n    return writer.data;\n  }\n\n  decode(types, data, loose) {\n    const coders = types.map(type => this._getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    return coder.decode(this._getReader(arrayify(data), loose));\n  }\n\n}\nexport const defaultAbiCoder = new AbiCoder();","map":{"version":3,"mappings":"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","names":["arrayify","defineReadOnly","Logger","version","logger","Reader","Writer","AddressCoder","ArrayCoder","BooleanCoder","BytesCoder","FixedBytesCoder","NullCoder","NumberCoder","StringCoder","TupleCoder","ParamType","paramTypeBytes","RegExp","paramTypeNumber","AbiCoder","constructor","coerceFunc","_getCoder","param","baseType","name","arrayChildren","arrayLength","components","map","component","match","type","size","parseInt","throwArgumentError","_getWordSize","_getReader","data","allowLoose","_getWriter","getDefaultValue","types","coders","from","coder","defaultValue","encode","values","length","throwError","errors","INVALID_ARGUMENT","count","value","writer","decode","loose","defaultAbiCoder"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/abi/src.ts/abi-coder.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\n\nimport { ParamType } from \"./fragments\";\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport class AbiCoder {\n    readonly coerceFunc: CoerceFunc;\n\n    constructor(coerceFunc?: CoerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n\n    _getCoder(param: ParamType): Coder {\n\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n\n    _getWordSize(): number { return 32; }\n\n    _getReader(data: Uint8Array, allowLoose?: boolean): Reader {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n\n    _getWriter(): Writer {\n        return new Writer(this._getWordSize());\n    }\n\n    getDefaultValue(types: ReadonlyArray<string | ParamType>): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n\n    encode(types: ReadonlyArray<string | ParamType>, values: ReadonlyArray<any>): string {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n\n    decode(types: ReadonlyArray<string | ParamType>, data: BytesLike, loose?: boolean): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\n\nexport const defaultAbiCoder: AbiCoder = new AbiCoder();\n\n"]},"metadata":{},"sourceType":"module"}