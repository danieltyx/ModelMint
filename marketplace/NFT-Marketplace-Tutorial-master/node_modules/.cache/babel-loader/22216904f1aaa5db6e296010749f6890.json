{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n  // Find the first error (if any)\n  const errors = [];\n\n  const checkErrors = function (path, object) {\n    if (!Array.isArray(object)) {\n      return;\n    }\n\n    for (let key in object) {\n      const childPath = path.slice();\n      childPath.push(key);\n\n      try {\n        checkErrors(childPath, object[key]);\n      } catch (error) {\n        errors.push({\n          path: childPath,\n          error: error\n        });\n      }\n    }\n  };\n\n  checkErrors([], result);\n  return errors;\n}\nexport class Coder {\n  constructor(name, type, localName, dynamic) {\n    // @TODO: defineReadOnly these\n    this.name = name;\n    this.type = type;\n    this.localName = localName;\n    this.dynamic = dynamic;\n  }\n\n  _throwError(message, value) {\n    logger.throwArgumentError(message, this.localName, value);\n  }\n\n}\nexport class Writer {\n  constructor(wordSize) {\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    this._data = [];\n    this._dataLength = 0;\n    this._padding = new Uint8Array(wordSize);\n  }\n\n  get data() {\n    return hexConcat(this._data);\n  }\n\n  get length() {\n    return this._dataLength;\n  }\n\n  _writeData(data) {\n    this._data.push(data);\n\n    this._dataLength += data.length;\n    return data.length;\n  }\n\n  appendWriter(writer) {\n    return this._writeData(concat(writer._data));\n  } // Arrayish items; padded on the right to wordSize\n\n\n  writeBytes(value) {\n    let bytes = arrayify(value);\n    const paddingOffset = bytes.length % this.wordSize;\n\n    if (paddingOffset) {\n      bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n    }\n\n    return this._writeData(bytes);\n  }\n\n  _getValue(value) {\n    let bytes = arrayify(BigNumber.from(value));\n\n    if (bytes.length > this.wordSize) {\n      logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n        length: this.wordSize,\n        offset: bytes.length\n      });\n    }\n\n    if (bytes.length % this.wordSize) {\n      bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n    }\n\n    return bytes;\n  } // BigNumberish items; padded on the left to wordSize\n\n\n  writeValue(value) {\n    return this._writeData(this._getValue(value));\n  }\n\n  writeUpdatableValue() {\n    const offset = this._data.length;\n\n    this._data.push(this._padding);\n\n    this._dataLength += this.wordSize;\n    return value => {\n      this._data[offset] = this._getValue(value);\n    };\n  }\n\n}\nexport class Reader {\n  constructor(data, wordSize, coerceFunc, allowLoose) {\n    defineReadOnly(this, \"_data\", arrayify(data));\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n    defineReadOnly(this, \"allowLoose\", allowLoose);\n    this._offset = 0;\n  }\n\n  get data() {\n    return hexlify(this._data);\n  }\n\n  get consumed() {\n    return this._offset;\n  } // The default Coerce function\n\n\n  static coerce(name, value) {\n    let match = name.match(\"^u?int([0-9]+)$\");\n\n    if (match && parseInt(match[1]) <= 48) {\n      value = value.toNumber();\n    }\n\n    return value;\n  }\n\n  coerce(name, value) {\n    if (this._coerceFunc) {\n      return this._coerceFunc(name, value);\n    }\n\n    return Reader.coerce(name, value);\n  }\n\n  _peekBytes(offset, length, loose) {\n    let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n\n    if (this._offset + alignedLength > this._data.length) {\n      if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n        alignedLength = length;\n      } else {\n        logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n          length: this._data.length,\n          offset: this._offset + alignedLength\n        });\n      }\n    }\n\n    return this._data.slice(this._offset, this._offset + alignedLength);\n  }\n\n  subReader(offset) {\n    return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n  }\n\n  readBytes(length, loose) {\n    let bytes = this._peekBytes(0, length, !!loose);\n\n    this._offset += bytes.length; // @TODO: Make sure the length..end bytes are all 0?\n\n    return bytes.slice(0, length);\n  }\n\n  readValue() {\n    return BigNumber.from(this.readBytes(this.wordSize));\n  }\n\n}","map":{"version":3,"mappings":"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","names":["arrayify","concat","hexConcat","hexlify","BigNumber","defineReadOnly","Logger","version","logger","checkResultErrors","result","errors","checkErrors","path","object","Array","isArray","key","childPath","slice","push","error","Coder","constructor","name","type","localName","dynamic","_throwError","message","value","throwArgumentError","Writer","wordSize","_data","_dataLength","_padding","Uint8Array","data","length","_writeData","appendWriter","writer","writeBytes","bytes","paddingOffset","_getValue","from","throwError","BUFFER_OVERRUN","offset","writeValue","writeUpdatableValue","Reader","coerceFunc","allowLoose","_offset","consumed","coerce","match","parseInt","toNumber","_coerceFunc","_peekBytes","loose","alignedLength","Math","ceil","subReader","readBytes","readValue"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/abi/src.ts/coders/abstract-coder.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify, BytesLike, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nexport interface Result extends ReadonlyArray<any> {\n    readonly [key: string]: any;\n}\n\nexport function checkResultErrors(result: Result): Array<{ path: Array<string | number>, error: Error }> {\n    // Find the first error (if any)\n    const errors: Array<{ path: Array<string | number>, error: Error }> = [ ];\n\n    const checkErrors = function(path: Array<string | number>, object: any): void {\n        if (!Array.isArray(object)) { return; }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n\n            try {\n                 checkErrors(childPath, object[key]);\n            } catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    }\n    checkErrors([ ], result);\n\n    return errors;\n\n}\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport abstract class Coder {\n\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    readonly name: string;\n\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    readonly type: string;\n\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    readonly localName: string;\n\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    readonly dynamic: boolean;\n\n    constructor(name: string, type: string, localName: string, dynamic: boolean) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n\n    _throwError(message: string, value: any): void {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n\n    abstract encode(writer: Writer, value: any): number;\n    abstract decode(reader: Reader): any;\n\n    abstract defaultValue(): any;\n}\n\nexport class Writer {\n    readonly wordSize: number;\n\n    _data: Array<Uint8Array>;\n    _dataLength: number;\n    _padding: Uint8Array;\n\n    constructor(wordSize?: number) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [ ];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n\n    get data(): string {\n        return hexConcat(this._data);\n    }\n    get length(): number { return this._dataLength; }\n\n    _writeData(data: Uint8Array): number {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n\n    appendWriter(writer: Writer): number {\n        return this._writeData(concat(writer._data));\n    }\n\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value: BytesLike): number {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([ bytes, this._padding.slice(paddingOffset) ])\n        }\n        return this._writeData(bytes);\n    }\n\n    _getValue(value: BigNumberish): Uint8Array {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([ this._padding.slice(bytes.length % this.wordSize), bytes ]);\n        }\n        return bytes;\n    }\n\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value: BigNumberish): number {\n        return this._writeData(this._getValue(value));\n    }\n\n    writeUpdatableValue(): (value: BigNumberish) => void {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value: BigNumberish) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\n\nexport class Reader {\n    readonly wordSize: number;\n    readonly allowLoose: boolean;\n\n    readonly _data: Uint8Array;\n    readonly _coerceFunc: CoerceFunc;\n\n    _offset: number;\n\n    constructor(data: BytesLike, wordSize?: number, coerceFunc?: CoerceFunc, allowLoose?: boolean) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n\n        this._offset = 0;\n    }\n\n    get data(): string { return hexlify(this._data); }\n    get consumed(): number { return this._offset; }\n\n    // The default Coerce function\n    static coerce(name: string, value: any): any {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) { value =  value.toNumber(); }\n        return value;\n    }\n\n    coerce(name: string, value: any): any {\n        if (this._coerceFunc) { return this._coerceFunc(name, value); }\n        return Reader.coerce(name, value);\n    }\n\n    _peekBytes(offset: number, length: number, loose?: boolean): Uint8Array {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            } else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength)\n    }\n\n    subReader(offset: number): Reader {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n\n    readBytes(length: number, loose?: boolean): Uint8Array {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n\n    readValue(): BigNumber {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}