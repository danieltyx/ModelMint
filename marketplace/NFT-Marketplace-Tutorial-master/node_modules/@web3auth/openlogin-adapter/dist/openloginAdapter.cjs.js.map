{"version":3,"file":"openloginAdapter.cjs.js","mappings":"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","sources":["webpack://@web3auth/openlogin-adapter/external commonjs2 \"@toruslabs/openlogin-ed25519\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/ethereum-provider\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/solana-provider\"","webpack://@web3auth/openlogin-adapter/webpack/bootstrap","webpack://@web3auth/openlogin-adapter/webpack/runtime/compat get default export","webpack://@web3auth/openlogin-adapter/webpack/runtime/create fake namespace object","webpack://@web3auth/openlogin-adapter/webpack/runtime/define property getters","webpack://@web3auth/openlogin-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/openlogin-adapter/webpack/runtime/make namespace object","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@toruslabs/openlogin\"","webpack://@web3auth/openlogin-adapter/./src/config.ts","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"lodash.merge\"","webpack://@web3auth/openlogin-adapter/./src/openloginAdapter.ts","webpack://@web3auth/openlogin-adapter/./src/index.ts"],"sourcesContent":["module.exports = require(\"@toruslabs/openlogin-ed25519\");","module.exports = require(\"@web3auth/ethereum-provider\");","module.exports = require(\"@web3auth/solana-provider\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin\");","import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    loginSettings: {},\n  };\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenloginAdapterOptions[\"adapterSettings\"];\n\n  private loginSettings: LoginSettings = { loginProvider: \"\" };\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions = {}) {\n    super(params);\n    this.setAdapterSettings({\n      ...params.adapterSettings,\n      chainConfig: params.chainConfig,\n      clientId: params.clientId || \"\",\n      sessionTime: params.sessionTime,\n      web3AuthNetwork: params.web3AuthNetwork,\n      useCoreKitKey: params.useCoreKitKey,\n    });\n    this.loginSettings = params.loginSettings || { loginProvider: \"\" };\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.openloginOptions) throw WalletInitializationError.invalidParams(\"openloginOptions is required before openlogin's initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT || this.openloginOptions.uxMode === UX_MODE.SESSIONLESS_REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin({\n      ...this.openloginOptions,\n      clientId: this.clientId,\n      network: this.openloginOptions.network || this.web3AuthNetwork || OPENLOGIN_NETWORK.MAINNET,\n    });\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n\n      const finalPrivKey = this._getFinalPrivKey();\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (finalPrivKey && (options.autoConnect || isRedirectResult)) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      } else if (error instanceof Web3AuthError) {\n        throw error;\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: Partial<OpenLoginOptions & BaseAdapterSettings>): void {\n    super.setAdapterSettings(adapterSettings);\n    const defaultOptions = getOpenloginDefaultOptions();\n    log.info(\"setting adapter settings\", adapterSettings);\n    this.openloginOptions = {\n      ...defaultOptions.adapterSettings,\n      ...this.openloginOptions,\n      ...adapterSettings,\n    };\n    if (adapterSettings.web3AuthNetwork) {\n      this.openloginOptions.network = adapterSettings.web3AuthNetwork;\n    }\n    if (adapterSettings.useCoreKitKey !== undefined) {\n      this.openloginOptions.useCoreKitKey = adapterSettings.useCoreKitKey;\n    }\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(init);\n    this.privKeyProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.privKeyProvider?.switchChain(params);\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n\n  private _getFinalPrivKey() {\n    if (!this.openloginInstance) return \"\";\n    let finalPrivKey = this.openloginInstance.privKey;\n    // coreKitKey is available only for custom verifiers by default\n    if (this.openloginOptions?.useCoreKitKey) {\n      if (!this.openloginInstance.coreKitKey) {\n        throw WalletLoginError.coreKitKeyNotFound();\n      }\n      finalPrivKey = this.openloginInstance.coreKitKey;\n    }\n    return finalPrivKey;\n  }\n\n  private async connectWithProvider(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    const keyAvailable = this._getFinalPrivKey();\n    // if not logged in then login\n    if (!keyAvailable || params.extraLoginOptions?.id_token) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      if (!params.loginProvider && !this.loginSettings.loginProvider)\n        throw WalletInitializationError.invalidParams(\"loginProvider is required for login\");\n      await this.openloginInstance.login(\n        merge(this.loginSettings, params, {\n          extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint },\n        })\n      );\n    }\n    let finalPrivKey = this._getFinalPrivKey();\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n        this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n      } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n        const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n        this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n      } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n        this.privKeyProvider = new CommonPrivateKeyProvider();\n      } else {\n        throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n","export * from \"./config\";\nexport * from \"./interface\";\nexport * from \"./openloginAdapter\";\n"],"names":["OPENLOGIN_NETWORK","UX_MODE","getOpenloginDefaultOptions","adapterSettings","network","MAINNET","clientId","uxMode","POPUP","loginSettings","OpenLogin","getHashQueryParams","SUPPORTED_KEY_CURVES","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","BaseAdapter","CHAIN_NAMESPACES","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","Web3AuthError","CommonPrivateKeyProvider","merge","OpenloginAdapter","constructor","params","arguments","length","undefined","_defineProperty","OPENLOGIN","MULTICHAIN","IN_APP","NOT_READY","EIP155","loginProvider","setAdapterSettings","_objectSpread","chainConfig","sessionTime","web3AuthNetwork","useCoreKitKey","chainConfigProxy","provider","_this$privKeyProvider","privKeyProvider","_","Error","init","options","checkInitializationRequirements","invalidParams","openloginOptions","isRedirectResult","REDIRECT","SESSIONLESS_REDIRECT","redirectResult","Object","keys","_pid","replaceUrlOnRedirect","openloginInstance","debug","status","READY","emit","finalPrivKey","_getFinalPrivKey","autoConnect","rehydrated","connect","error","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","popupClosed","connectionError","disconnect","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","authenticateUser","userInfo","getUserInfo","idToken","defaultOptions","info","addChain","_this$privKeyProvider2","checkAddChainRequirements","addChainConfig","switchChain","_this$privKeyProvider3","checkSwitchChainRequirements","getChainConfig","chainId","_this$openloginOption","privKey","coreKitKey","coreKitKeyNotFound","_params$extraLoginOpt","keyAvailable","extraLoginOptions","id_token","_params$extraLoginOpt2","curve","currentChainNamespace","SOLANA","ED25519","SECP256K1","login","login_hint","getED25519Key","sk","toString","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","OTHER","setupProvider","reconnected"],"sourceRoot":""}