{"version":3,"file":"ethereumProvider.cjs.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNA,MAAM,8BAA4B;;;ACAlC,MAAM,gCAA4B;;ACAlC,MAAM,8BAA4B;;ACAlC,MAAM,oBAA4B;;ACAlC,MAAM,6BAA4B;;ACAlC,MAAM,uCAA4B;;;;;ACCqG;AAC5F;AAI3C,SAASG,gBAAgBA,CAACC,GAAW,EAAW;EAC9C;EACA,OAAOA,GAAG,CAACC,MAAM,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC;AAClC;AAEO,SAASC,sBAAsBA,CAAAC,IAAA,EAYuB;EAAA,IAZtB;IACrCC,WAAW;IACXC,aAAa;IACbC,qBAAqB;IACrBC,0BAA0B;IAC1BC,qBAAqB;IACrBC,sBAAsB;IACtBC,kBAAkB;IAClBC,sBAAsB;IACtBC,mBAAmB;IACnBC,qBAAqB;IACrBC;EACuB,CAAC,GAAAX,IAAA;EACxB,IAAI,CAACC,WAAW,EAAE;IAChB,MAAM,IAAIW,KAAK,CAAC,8BAA8B,CAAC;EACjD;;EAEA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,eAAeC,6BAA6BA,CAACC,OAAe,EAAEC,GAAyB,EAAmB;IACxG,IAAI,OAAOD,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAAChB,MAAM,GAAG,CAAC,EAAE;MACrD;MACA,MAAMkB,QAAkB,GAAG,MAAMf,WAAW,CAACc,GAAG,CAAC;MACjD,MAAME,kBAA4B,GAAGD,QAAQ,CAACE,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,WAAW,EAAE,CAAC;MACvF,MAAMC,iBAAyB,GAAGP,OAAO,CAACM,WAAW,EAAE;MAEvD,IAAIH,kBAAkB,CAACK,QAAQ,CAACD,iBAAiB,CAAC,EAAE;QAClD,OAAOA,iBAAiB;MAC1B;IACF;IACA,MAAM1B,mEAA2B,CAAC;MAChC8B,OAAO,EAAG;IACZ,CAAC,CAAC;EACJ;;EAEA;EACA;EACA;;EAEA,eAAeC,cAAcA,CAACX,GAAyB,EAAEY,GAA0B,EAAiB;IAClGA,GAAG,CAACC,MAAM,GAAG,MAAM3B,WAAW,CAACc,GAAG,CAAC;EACrC;EAEA,eAAec,oBAAoBA,CAACd,GAAyB,EAAEY,GAA0B,EAAiB;IACxG,MAAMX,QAAQ,GAAG,MAAMf,WAAW,CAACc,GAAG,CAAC;IACvCY,GAAG,CAACC,MAAM,GAAGZ,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI;EAClC;;EAEA;EACA;EACA;;EAEA,eAAec,eAAeA,CAACf,GAAyB,EAAEY,GAA0B,EAAiB;IACnG,IAAI,CAACpB,kBAAkB,EAAE;MACvB,MAAMZ,wEAAgC,EAAE;IAC1C;IAEA,MAAMqC,QAA2B,GAAIjB,GAAG,CAACkB,MAAM,CAAyB,CAAC,CAAC,IAAI;MAC5EC,IAAI,EAAE;IACR,CAAC;IACDF,QAAQ,CAACE,IAAI,GAAG,MAAMrB,6BAA6B,CAACmB,QAAQ,CAACE,IAAI,EAAYnB,GAAG,CAAC;IACjFY,GAAG,CAACC,MAAM,GAAG,MAAMrB,kBAAkB,CAACyB,QAAQ,EAAEjB,GAAG,CAAC;EACtD;EAEA,eAAeoB,eAAeA,CAACpB,GAAyB,EAAEY,GAA0B,EAAiB;IACnG,IAAI,CAACnB,sBAAsB,EAAE;MAC3B,MAAMb,wEAAgC,EAAE;IAC1C;IAEA,MAAMqC,QAA2B,GAAIjB,GAAG,CAACkB,MAAM,CAAyB,CAAC,CAAC,IAAI;MAC5EC,IAAI,EAAE;IACR,CAAC;IACDF,QAAQ,CAACE,IAAI,GAAG,MAAMrB,6BAA6B,CAACmB,QAAQ,CAACE,IAAI,EAAYnB,GAAG,CAAC;IACjFY,GAAG,CAACC,MAAM,GAAG,MAAMpB,sBAAsB,CAACwB,QAAQ,EAAEjB,GAAG,CAAC;EAC1D;;EAEA;EACA;EACA;;EAEA,eAAeqB,OAAOA,CAACrB,GAAyB,EAAEY,GAA0B,EAAiB;IAC3F,IAAI,CAACtB,qBAAqB,EAAE;MAC1B,MAAMV,wEAAgC,EAAE;IAC1C;IAEA,MAAMmB,OAAe,GAAG,MAAMD,6BAA6B,CAAEE,GAAG,CAACkB,MAAM,CAAc,CAAC,CAAC,EAAElB,GAAG,CAAC;IAC7F,MAAMU,OAAe,GAAIV,GAAG,CAACkB,MAAM,CAAc,CAAC,CAAC;IACnD,MAAMI,WAAoC,GAAItB,GAAG,CAACkB,MAAM,CAA+B,CAAC,CAAC,IAAI,CAAC,CAAC;IAC/F,MAAMK,SAAgC,GAAAC,aAAA,CAAAA,aAAA,KACjCF,WAAW;MACdH,IAAI,EAAEpB,OAAO;MACb0B,IAAI,EAAEf;IAAO,EACd;IAEDE,GAAG,CAACC,MAAM,GAAG,MAAMvB,qBAAqB,CAACiC,SAAS,EAAEvB,GAAG,CAAC;EAC1D;EAEA,eAAe0B,aAAaA,CAAC1B,GAAyB,EAAEY,GAA0B,EAAiB;IACjG,IAAI,CAAClB,mBAAmB,EAAE;MACxB,MAAMd,wEAAgC,EAAE;IAC1C;IAEA,MAAM8B,OAAoB,GAAIV,GAAG,CAACkB,MAAM,CAAmB,CAAC,CAAC;IAC7D,MAAMnB,OAAe,GAAG,MAAMD,6BAA6B,CAAEE,GAAG,CAACkB,MAAM,CAAc,CAAC,CAAC,EAAElB,GAAG,CAAC;IAC7F,MAAM2B,OAAO,GAAG,IAAI;IACpB,MAAML,WAAoC,GAAItB,GAAG,CAACkB,MAAM,CAA+B,CAAC,CAAC,IAAI,CAAC,CAAC;IAC/F,MAAMK,SAAqC,GAAAC,aAAA,CAAAA,aAAA,KACtCF,WAAW;MACdH,IAAI,EAAEpB,OAAO;MACb0B,IAAI,EAAEf;IAAO,EACd;IAEDE,GAAG,CAACC,MAAM,GAAG,MAAMnB,mBAAmB,CAAC6B,SAAS,EAAEvB,GAAG,EAAE2B,OAAO,CAAC;EACjE;EAEA,eAAeC,eAAeA,CAAC5B,GAAyB,EAAEY,GAA0B,EAAiB;IACnG,IAAI,CAACjB,qBAAqB,EAAE;MAC1B,MAAMf,wEAAgC,EAAE;IAC1C;IAEA,MAAMmB,OAAe,GAAG,MAAMD,6BAA6B,CAAEE,GAAG,CAACkB,MAAM,CAAc,CAAC,CAAC,EAAElB,GAAG,CAAC;IAC7F,MAAMU,OAAmC,GAAIV,GAAG,CAACkB,MAAM,CAAkC,CAAC,CAAC;IAC3F,MAAMS,OAAO,GAAG,IAAI;IACpB,MAAMJ,SAAyD,GAAG;MAChEE,IAAI,EAAEf,OAAO;MACbS,IAAI,EAAEpB,OAAO;MACb4B;IACF,CAAC;IAEDf,GAAG,CAACC,MAAM,GAAG,MAAMlB,qBAAqB,CAAC4B,SAAS,EAAEvB,GAAG,EAAE2B,OAAO,CAAC;EACnE;EAEA,eAAeE,eAAeA,CAAC7B,GAAyB,EAAEY,GAA0B,EAAiB;IACnG,IAAI,CAAChB,qBAAqB,EAAE;MAC1B,MAAMhB,wEAAgC,EAAE;IAC1C;IAEA,MAAMmB,OAAe,GAAG,MAAMD,6BAA6B,CAAEE,GAAG,CAACkB,MAAM,CAAc,CAAC,CAAC,EAAElB,GAAG,CAAC;IAC7F,MAAMU,OAAmC,GAAIV,GAAG,CAACkB,MAAM,CAAkC,CAAC,CAAC;IAC3F,MAAMS,OAAO,GAAG,IAAI;IACpB,MAAMJ,SAAyD,GAAG;MAChEE,IAAI,EAAEf,OAAO;MACbS,IAAI,EAAEpB,OAAO;MACb4B;IACF,CAAC;IAEDf,GAAG,CAACC,MAAM,GAAG,MAAMjB,qBAAqB,CAAC2B,SAAS,EAAEvB,GAAG,EAAE2B,OAAO,CAAC;EACnE;EAEA,eAAeG,YAAYA,CAAC9B,GAAyB,EAAEY,GAA0B,EAAiB;IAChG,IAAI,CAACrB,sBAAsB,EAAE;MAC3B,MAAMX,wEAAgC,EAAE;IAC1C;;IAEA;IACA,MAAMmD,UAAkB,GAAI/B,GAAG,CAACkB,MAAM,CAAc,CAAC,CAAC;IACtD,MAAMc,WAAmB,GAAIhC,GAAG,CAACkB,MAAM,CAAc,CAAC,CAAC;IACvD;IACA,MAAMI,WAAoC,GAAItB,GAAG,CAACkB,MAAM,CAA+B,CAAC,CAAC,IAAI,CAAC,CAAC;;IAE/F;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAInB,OAAe,EAAEW,OAAe;IACpC,IAAI7B,gBAAgB,CAACkD,UAAU,CAAC,IAAI,CAAClD,gBAAgB,CAACmD,WAAW,CAAC,EAAE;MAClE,IAAIC,OAAO,GAAI,sDAAqD;MACpEA,OAAO,IAAK,+DAA8D;MAC1EA,OAAO,IAAK,wCAAuC;MACnDA,OAAO,IAAK,mEAAkE;MAC7ErB,GAAG,CAASqB,OAAO,GAAGA,OAAO;MAE9BlC,OAAO,GAAGgC,UAAU;MACpBrB,OAAO,GAAGsB,WAAW;IACvB,CAAC,MAAM;MACLtB,OAAO,GAAGqB,UAAU;MACpBhC,OAAO,GAAGiC,WAAW;IACvB;IACAjC,OAAO,GAAG,MAAMD,6BAA6B,CAACC,OAAO,EAAEC,GAAG,CAAC;IAE3D,MAAMuB,SAAgC,GAAAC,aAAA,CAAAA,aAAA,KACjCF,WAAW;MACdH,IAAI,EAAEpB,OAAO;MACb0B,IAAI,EAAEf;IAAO,EACd;;IAED;IACAE,GAAG,CAACC,MAAM,GAAG,MAAMtB,sBAAsB,CAACgC,SAAS,EAAEvB,GAAG,CAAC;EAC3D;EAEA,eAAekC,mBAAmBA,CAAClC,GAAyB,EAAEY,GAA0B,EAAiB;IACvG,IAAI,CAACvB,0BAA0B,EAAE;MAC/B,MAAMT,wEAAgC,EAAE;IAC1C;IAEA,MAAMmB,OAAe,GAAG,MAAMD,6BAA6B,CAAEE,GAAG,CAACkB,MAAM,CAAY,CAAC,CAAC,EAAElB,GAAG,CAAC;IAE3FY,GAAG,CAACC,MAAM,GAAG,MAAMxB,0BAA0B,CAACU,OAAO,EAAEC,GAAG,CAAC;EAC7D;EAEA,eAAemC,cAAcA,CAACnC,GAAyB,EAAEY,GAA0B,EAAiB;IAClG,IAAI,CAACxB,qBAAqB,EAAE;MAC1B,MAAMR,wEAAgC,EAAE;IAC1C;IAEA,MAAMwD,UAAkB,GAAIpC,GAAG,CAACkB,MAAM,CAAY,CAAC,CAAC;IACpD,MAAMnB,OAAe,GAAG,MAAMD,6BAA6B,CAAEE,GAAG,CAACkB,MAAM,CAAY,CAAC,CAAC,EAAElB,GAAG,CAAC;IAC3F,MAAMsB,WAAoC,GAAItB,GAAG,CAACkB,MAAM,CAA+B,CAAC,CAAC,IAAI,CAAC,CAAC;IAC/F,MAAMK,SAAgC,GAAAC,aAAA,CAAAA,aAAA,KACjCF,WAAW;MACdH,IAAI,EAAEpB,OAAO;MACb0B,IAAI,EAAEW;IAAU,EACjB;IAEDxB,GAAG,CAACC,MAAM,GAAGzB,qBAAqB,CAACmC,SAAS,EAAEvB,GAAG,CAAC;EACpD;EAEA,eAAeqC,eAAeA,CAACrC,GAAyB,EAAEY,GAA0B,EAAiB;IACnG,IAAI,CAACzB,aAAa,EAAE;MAClB,MAAMP,wEAAgC,EAAE;IAC1C;IACAgC,GAAG,CAACC,MAAM,GAAG1B,aAAa,CAACa,GAAG,CAAC;EACjC;EAEA,OAAOrB,2DAAwB,CAAC;IAC9B;IACA2D,YAAY,EAAE5D,wDAAqB,CAACiC,cAAc,CAAC;IACnD4B,eAAe,EAAE7D,wDAAqB,CAAC2D,eAAe,CAAC;IACvDG,WAAW,EAAE9D,wDAAqB,CAAC2D,eAAe,CAAC;IACnDI,YAAY,EAAE/D,wDAAqB,CAACoC,oBAAoB,CAAC;IACzD;IACA4B,mBAAmB,EAAEhE,wDAAqB,CAACqC,eAAe,CAAC;IAC3D4B,mBAAmB,EAAEjE,wDAAqB,CAAC0C,eAAe,CAAC;IAC3D;IACAwB,QAAQ,EAAElE,wDAAqB,CAAC2C,OAAO,CAAC;IACxCwB,iBAAiB,EAAEnE,wDAAqB,CAACgD,aAAa,CAAC;IACvDoB,oBAAoB,EAAEpE,wDAAqB,CAACkD,eAAe,CAAC;IAC5DmB,oBAAoB,EAAErE,wDAAqB,CAACmD,eAAe,CAAC;IAC5DmB,aAAa,EAAEtE,wDAAqB,CAACoD,YAAY,CAAC;IAClDmB,0BAA0B,EAAEvE,wDAAqB,CAACwD,mBAAmB,CAAC;IACtEgB,WAAW,EAAExE,wDAAqB,CAACyD,cAAc;EACnD,CAAC,CAAC;AACJ;;ACjQmC;AACQ;AAGkB;AAEtD,SAASiB,mBAAmBA,CAACC,gBAAmC,EAAoC;EACzG,MAAM;IACJnE,WAAW;IACXC,aAAa;IACbK,kBAAkB;IAClBC,sBAAsB;IACtBH,qBAAqB;IACrBI,mBAAmB;IACnBC,qBAAqB;IACrBC,qBAAqB;IACrBL,sBAAsB;IACtBF,0BAA0B;IAC1BD;EACF,CAAC,GAAGiE,gBAAgB;EACpB,MAAMC,aAAa,GAAGH,kDAAe,CAAC,CACpCxE,2DAAwB,CAAC;IACvB4E,WAAW,EAAE;EACf,CAAC,CAAC,EACFvE,sBAAsB,CAAC;IACrBE,WAAW;IACXC,aAAa;IACbK,kBAAkB;IAClBF,qBAAqB;IACrBG,sBAAsB;IACtBC,mBAAmB;IACnBC,qBAAqB;IACrBC,qBAAqB;IACrBL,sBAAsB;IACtBF,0BAA0B;IAC1BD;EACF,CAAC,CAAC,CACH,CAAC;EACF,OAAOkE,aAAa;AACtB;AAEO,SAASE,2BAA2BA,CAAAvE,IAAA,EAAoF;EAAA,IAAnF;IAAEwE,QAAQ;IAAEC;EAAkC,CAAC,GAAAzE,IAAA;EACzF,eAAe0E,WAAWA,CAAC3D,GAA6C,EAAEY,GAA0B,EAAiB;IAAA,IAAAgD,WAAA;IACnH,MAAMC,WAAW,GAAG,CAAAD,WAAA,GAAA5D,GAAG,CAACkB,MAAM,cAAA0C,WAAA,eAAVA,WAAA,CAAY7E,MAAM,GAAGiB,GAAG,CAACkB,MAAM,CAAC,CAAC,CAAC,GAAG4C,SAAS;IAClE,IAAI,CAACD,WAAW,EAAE,MAAMjF,mEAA2B,CAAC,sBAAsB,CAAC;IAC3E,IAAI,CAACiF,WAAW,CAACE,OAAO,EAAE,MAAMnF,mEAA2B,CAAC,gCAAgC,CAAC;IAC7F,IAAI,CAACiF,WAAW,CAACG,OAAO,IAAIH,WAAW,CAACG,OAAO,CAACjF,MAAM,KAAK,CAAC,EAAE,MAAMH,mEAA2B,CAAC,gCAAgC,CAAC;IACjI,IAAI,CAACiF,WAAW,CAACI,cAAc,EAAE,MAAMrF,mEAA2B,CAAC,uCAAuC,CAAC;IAE3GgC,GAAG,CAACC,MAAM,GAAG,MAAM4C,QAAQ,CAACI,WAAW,CAAC;EAC1C;EACA,eAAeK,WAAWA,CAAClE,GAAuC,EAAEY,GAA0B,EAAiB;IAAA,IAAAuD,YAAA;IAC7G,MAAMN,WAAW,GAAG,CAAAM,YAAA,GAAAnE,GAAG,CAACkB,MAAM,cAAAiD,YAAA,eAAVA,YAAA,CAAYpF,MAAM,GAAGiB,GAAG,CAACkB,MAAM,CAAC,CAAC,CAAC,GAAG4C,SAAS;IAClE,IAAI,CAACD,WAAW,EAAE,MAAMjF,mEAA2B,CAAC,iBAAiB,CAAC;IACtEgC,GAAG,CAACC,MAAM,GAAG,MAAM6C,WAAW,CAACG,WAAW,CAAC;EAC7C;EAEA,OAAOlF,2DAAwB,CAAC;IAC9ByF,uBAAuB,EAAE1F,wDAAqB,CAACiF,WAAW,CAAC;IAC3DU,0BAA0B,EAAE3F,wDAAqB,CAACwF,WAAW;EAC/D,CAAC,CAAC;AACJ;;AAEA;AACO,SAASI,uBAAuBA,CAAAC,KAAA,EAA2E;EAAA,IAA1E;IAAEC;EAAmC,CAAC,GAAAD,KAAA;EAC5E,eAAeE,aAAaA,CAACzE,GAA0C,EAAEY,GAA0B,EAAiB;IAAA,IAAA8D,YAAA;IAClH,MAAMC,aAAa,GAAG,CAAAD,YAAA,GAAA1E,GAAG,CAACkB,MAAM,cAAAwD,YAAA,eAAVA,YAAA,CAAY3F,MAAM,GAAGiB,GAAG,CAACkB,MAAM,CAAC,CAAC,CAAC,GAAG4C,SAAS;IACpE,IAAI,EAACa,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEC,UAAU,GAAE,MAAMhG,mEAA2B,CAAC,oBAAoB,CAAC;IACvFgC,GAAG,CAACC,MAAM,GAAG,MAAM2D,gBAAgB,CAACG,aAAa,CAAC;EACpD;EAEA,OAAOhG,2DAAwB,CAAC;IAC9BkG,oBAAoB,EAAEnG,wDAAqB,CAAC+F,aAAa;EAC3D,CAAC,CAAC;AACJ;;AAEA;;ACnFoE;AACkF;AAG/I,SAASM,uBAAuBA,CAAChB,OAAe,EAAoC;EACzF,OAAO,CAAC/D,GAAyB,EAAEY,GAAyB,EAAEoE,IAA4B,EAAEC,GAA0B,KAAK;IACzH,IAAIjF,GAAG,CAACkF,MAAM,KAAK,aAAa,EAAE;MAChCtE,GAAG,CAACC,MAAM,GAAGkD,OAAO;MACpB,OAAOkB,GAAG,EAAE;IACd;IACA,OAAOD,IAAI,EAAE;EACf,CAAC;AACH;AAEO,SAASG,8BAA8BA,CAACC,cAAiC,EAAoC;EAClH,OAAO,CAACpF,GAAyB,EAAEY,GAAoC,EAAEoE,IAA4B,EAAEC,GAA0B,KAAK;IACpI,IAAIjF,GAAG,CAACkF,MAAM,KAAK,qBAAqB,EAAE;MACxCtE,GAAG,CAACC,MAAM,GAAGuE,cAAc;MAC3B,OAAOH,GAAG,EAAE;IACd;IACA,OAAOD,IAAI,EAAE;EACf,CAAC;AACH;AAEO,SAASK,mBAAmBA,CAACD,cAAiC,EAGnE;EACA,MAAM;IAAErB,OAAO;IAAEuB;EAAU,CAAC,GAAGF,cAAc;EAC7C,MAAMG,eAAe,GAAGT,0DAAqB,CAAC;IAAEQ;EAAU,CAAC,CAAC;EAC5D,MAAME,iBAAiB,GAAGrC,kDAAe,CAAC,CAAC4B,uBAAuB,CAAChB,OAAO,CAAC,EAAEoB,8BAA8B,CAACC,cAAc,CAAC,EAAEG,eAAe,CAAC,CAAC;EAC9I,OAAO;IAAEC,iBAAiB;IAAED;EAAgB,CAAC;AAC/C;;AC7B2C;AAIpC,SAASE,mBAAmBA,CAAAxG,IAAA,EAA8D;EAAA,IAA7D;IAAEyG;EAAqC,CAAC,GAAAzG,IAAA;EAC1E,OAAO;IACLE,aAAa,EAAE,MAAAA,CAAA,KAAY;MACzB,MAAMP,wEAAgC,EAAE;IAC1C,CAAC;IACDM,WAAW,EAAE,MAAOyG,CAAuB,IAAK;MAC9C,MAAM;QAAE1F;MAAS,CAAC,GAAGyF,SAAS;MAC9B,IAAIzF,QAAQ,IAAIA,QAAQ,CAAClB,MAAM,EAAE;QAC/B,OAAOkB,QAAQ;MACjB;MACA,MAAM,IAAIJ,KAAK,CAAC,wBAAwB,CAAC;IAC3C,CAAC;IACDL,kBAAkB,EAAE,MAAAA,CAAOyB,QAA2B,EAAE0E,CAAuB,KAAsB;MACnG,MAAM9E,MAAM,GAAG,MAAM6E,SAAS,CAAC3E,eAAe,CAACE,QAAQ,CAAY;MACnE,OAAOJ,MAAM;IACf,CAAC;IACDpB,sBAAsB,EAAE,MAAAA,CAAOwB,QAA2B,EAAE0E,CAAuB,KAAsB;MACvG,MAAM9E,MAAM,GAAG,MAAM6E,SAAS,CAACtE,eAAe,CAACH,QAAQ,CAAY;MACnE,OAAOJ,MAAM;IACf,CAAC;IACDvB,qBAAqB,EAAE,MAAAA,CAAOiC,SAAgC,EAAEoE,CAAuB,KAAsB;MAC3G,MAAM9E,MAAM,GAAG,MAAM6E,SAAS,CAACE,WAAW,CAAC,CAACrE,SAAS,CAACJ,IAAI,EAAEI,SAAS,CAACE,IAAI,CAAC,CAAC;MAC5E,OAAOZ,MAAM;IACf,CAAC;IACDtB,sBAAsB,EAAE,MAAAA,CAAOgC,SAAgC,EAAEoE,CAAuB,KAAsB;MAC5G,MAAM9E,MAAM,GAAG,MAAM6E,SAAS,CAACG,mBAAmB,CAAC,CAACtE,SAAS,CAACE,IAAI,EAAEF,SAAS,CAACJ,IAAI,CAAC,CAAC;MACpF,OAAON,MAAM;IACf,CAAC;IACDnB,mBAAmB,EAAE,MAAAA,CAAO6B,SAAqC,EAAEoE,CAAuB,KAAsB;MAC9G,MAAM9E,MAAM,GAAG,MAAM6E,SAAS,CAAChE,aAAa,CAAC,CAACH,SAAS,CAACJ,IAAI,EAAEI,SAAS,CAACE,IAAI,CAAC,CAAC;MAC9E,OAAOZ,MAAM;IACf,CAAC;IACDlB,qBAAqB,EAAE,MAAO4B,SAAyD,IAAsB;MAC3G,MAAMV,MAAM,GAAG,MAAM6E,SAAS,CAAChE,aAAa,CAAC,CAACH,SAAS,CAACJ,IAAI,EAAEI,SAAS,CAACE,IAAI,CAAC,CAAC;MAC9E,OAAOZ,MAAM;IACf,CAAC;IACDjB,qBAAqB,EAAE,MAAO2B,SAAyD,IAAsB;MAC3G,MAAMV,MAAM,GAAG,MAAM6E,SAAS,CAAChE,aAAa,CAAC,CAACH,SAAS,CAACJ,IAAI,EAAEI,SAAS,CAACE,IAAI,CAAC,CAAC;MAC9E,OAAOZ,MAAM;IACf,CAAC;IACDxB,0BAA0B,EAAE,MAAOsG,CAAS,IAAsB;MAChE,MAAM/G,wEAAgC,EAAE;IAC1C,CAAC;IACDQ,qBAAqB,EAAGuG,CAAwB,IAAa;MAC3D,MAAM/G,wEAAgC,EAAE;IAC1C;EACF,CAAC;AACH;;;;;ACtDiE;AACV;AAE6F;AACtD;AACnD;AAEuB;AACP;AACA;AAUpD,MAAM2H,qBAAqB,SAASD,0CAAY,CAA6D;EAGlHE,WAAWA,CAAAvH,IAAA,EAA2H;IAAA,IAA1H;MAAEwH,MAAM;MAAEC,KAAK;MAAEhB;IAAsG,CAAC,GAAAzG,IAAA;IAClI,KAAK,CAAC;MACJwH,MAAM,EAAE;QAAEE,WAAW,EAAAnF,kCAAA,CAAAA,kCAAA,KAAOiF,MAAM,CAACE,WAAW;UAAEC,cAAc,EAAEZ,4CAAuBa;QAAA,EAAE;QAAEC,iBAAiB,EAAE,CAAC,CAACL,MAAM,CAACK;MAAkB,CAAC;MAC1IJ,KAAK,EAAAlF,kCAAA,CAAAA,kCAAA,KAAQkF,KAAK,IAAI,CAAC,CAAC;QAAG3C,OAAO,EAAE,SAAS;QAAE9D,QAAQ,EAAE;MAAE;IAC7D,CAAC,CAAC;IAAC8G,wBAAA,oBANkC,IAAI;IAOzC,IAAI,CAACrB,SAAS,GAAGA,SAAS,IAAI,IAAI;EACpC;EAYA,MAAasB,MAAMA,CAAA,EAAsB;IACvC,IAAI,CAAC,IAAI,CAACtB,SAAS,EACjB,MAAM9G,iEAAyB,CAAC;MAAE8B,OAAO,EAAE,4EAA4E;MAAEyG,IAAI,EAAE;IAAK,CAAC,CAAC;IACxI,MAAM,IAAI,CAACC,aAAa,CAAC,IAAI,CAAC1B,SAAS,CAAC;IACxC,OAAO,IAAI,CAAC2B,oBAAoB,CAACC,OAAO,CAAC;MAAEpC,MAAM,EAAE;IAAe,CAAC,CAAC;EACtE;EAEA,MAAakC,aAAaA,CAAC1B,SAAqB,EAAiB;IAC/D,IAAI,CAAC6B,sBAAsB,CAAC7B,SAAS,CAAC;IACtC,MAAM,IAAI,CAAC8B,WAAW,CAAC9B,SAAS,CAAC;EACnC;EAEA,MAAahC,WAAWA,CAAAa,KAAA,EAAwH;IAAA,IAAvH;MAAER,OAAO;MAAEN,QAAQ,GAAG,IAAI;MAAEgE,MAAM,GAAG;IAAgE,CAAC,GAAAlD,KAAA;IAC7H,IAAI,CAAC,IAAI,CAACmB,SAAS,EACjB,MAAM9G,iEAAyB,CAAC;MAAE8B,OAAO,EAAE,4EAA4E;MAAEyG,IAAI,EAAE;IAAK,CAAC,CAAC;IACxI,MAAMO,kBAAkB,GAAG,IAAI,CAACzB,cAAc,CAAClC,OAAO,CAAC;IACvD,IAAI,CAAC4D,MAAM,CAAC;MACV5D,OAAO,EAAE;IACX,CAAC,CAAC;IACF,MAAM;MAAEuB,SAAS;MAAEsC;IAAY,CAAC,GAAGF,kBAAkB;IACrD,IAAIjE,QAAQ,EAAE;MACZ,IAAI;QACF,MAAM,IAAI,CAACiC,SAAS,CAACmC,iBAAiB,CAAC;UACrC3C,MAAM,EAAE,yBAAyB;UACjChE,MAAM,EAAE,CACN;YACE6C,OAAO;YACP+D,SAAS,EAAEF,WAAW;YACtB5D,OAAO,EAAE,CAACsB,SAAS,CAAC;YACpByC,iBAAiB,EAAE,CAACL,kBAAkB,CAACM,aAAa,CAAC;YACrD/D,cAAc,EAAE;cACdgE,IAAI,EAAEP,kBAAkB,CAACQ,UAAU;cACnCC,MAAM,EAAET,kBAAkB,CAACU,MAAM;cACjCC,QAAQ,EAAEX,kBAAkB,CAACW,QAAQ,IAAI;YAC3C;UACF,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdnC,8BAAS,CAACmC,KAAK,CAAC;MAClB;IACF;IAEA,IAAI;MACF,MAAM,IAAI,CAAC5C,SAAS,CAACmC,iBAAiB,CAAC;QACrC3C,MAAM,EAAE,4BAA4B;QACpChE,MAAM,EAAE,CAAC;UAAE6C;QAAQ,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOuE,KAAK,EAAE;MACdnC,8BAAS,CAACmC,KAAK,CAAC;MAChB;MACA;MACA,IAAIA,KAAK,CAAC5H,OAAO,KAAK,qCAAqC,EAAE;QAC3D,MAAM4H,KAAK;MACb;IACF;IAEA,IAAI,CAACC,SAAS,CAAC;MAAE5B,WAAW,EAAEe;IAAmB,CAAC,CAAC;IACnD,IAAID,MAAM,EAAE,MAAM,IAAI,CAACe,aAAa,CAAC,IAAI,CAAC9C,SAAS,CAAC;EACtD;EAEA,MAAMjC,QAAQA,CAACkD,WAA8B,EAAiB;IAC5D,IAAI,CAAC,IAAI,CAACjB,SAAS,EAAE,MAAMU,uDAAkC,CAAC,iCAAiC,CAAC;IAChG,MAAM;MAAEd,SAAS;MAAEsC;IAAY,CAAC,GAAGjB,WAAW;IAE9C,IAAI;MACF,MAAM,IAAI,CAACjB,SAAS,CAACmC,iBAAiB,CAAC;QACrC3C,MAAM,EAAE,yBAAyB;QACjChE,MAAM,EAAE,CACN;UACE6C,OAAO,EAAE4C,WAAW,CAAC5C,OAAO;UAC5B+D,SAAS,EAAEF,WAAW;UACtB5D,OAAO,EAAE,CAACsB,SAAS,CAAC;UACpByC,iBAAiB,EAAE,CAACpB,WAAW,CAACqB,aAAa,CAAC;UAC9C/D,cAAc,EAAE;YACdgE,IAAI,EAAEtB,WAAW,CAACuB,UAAU;YAC5BC,MAAM,EAAExB,WAAW,CAACyB,MAAM;YAC1BC,QAAQ,EAAE1B,WAAW,CAAC0B,QAAQ,IAAI;UACpC;QACF,CAAC;MAEL,CAAC,CAAC;MACF,KAAK,CAAC5E,QAAQ,CAACkD,WAAW,CAAC;IAC7B,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdnC,8BAAS,CAACmC,KAAK,CAAC;MAChB,MAAMA,KAAK;IACb;EACF;EAEA,MAAgBE,aAAaA,CAAC9C,SAAqB,EAAmB;IACpE,IAAI,CAACA,SAAS,CAACgD,SAAS,EAAE,MAAMrC,uDAAkC,CAAC,2CAA2C,CAAC;IAC/G,IAAI,CAAC,IAAI,CAACY,QAAQ,EAAE,MAAMrI,iEAAyB,CAAC;MAAE8B,OAAO,EAAE,6BAA6B;MAAEyG,IAAI,EAAE;IAAK,CAAC,CAAC;IAC3G,MAAM;MAAEpD;IAAQ,CAAC,GAAG,IAAI,CAAC0C,MAAM,CAACE,WAAW;IAC3C,MAAMiC,mBAAmB,GAAG1C,oCAAW,CAACR,SAAS,CAAC3B,OAAO,CAAC8E,QAAQ,EAAE,CAAC,GAAGnD,SAAS,CAAC3B,OAAO,GAAI,KAAI2B,SAAS,CAAC3B,OAAO,CAAC8E,QAAQ,CAAC,EAAE,CAAE,EAAC;IACjI,IAAI9E,OAAO,KAAK6E,mBAAmB,EACjC,MAAMxC,iEAA4C,CAAE,oCAAmCwC,mBAAoB,eAAc7E,OAAQ,EAAC,CAAC;IAErI,IAAI,CAACkD,QAAQ,CAAC8B,IAAI,CAAC,SAAS,EAAE;MAAEhF;IAAQ,CAAC,CAAC;IAC1C,IAAI,CAACkD,QAAQ,CAAC8B,IAAI,CAAC,cAAc,EAAE,IAAI,CAACrC,KAAK,CAAC3C,OAAO,CAAC;IACtD,OAAO6E,mBAAmB;EAC5B;EAEA,MAAcpB,WAAWA,CAAC9B,SAAqB,EAAiB;IAC9D,MAAMrC,gBAAgB,GAAGoC,mBAAmB,CAAC;MAAEC;IAAU,CAAC,CAAC;IAC3D,IAAI,CAACiC,MAAM,CAAC;MACV1H,QAAQ,EAAEyF,SAAS,CAACzF,QAAQ,IAAI;IAClC,CAAC,CAAC;IACF,MAAMqD,aAAa,GAAGF,mBAAmB,CAACC,gBAAgB,CAAC;IAC3D,MAAM2F,MAAM,GAAG,IAAIjD,yCAAU,EAAE;IAC/B,MAAM;MAAEP;IAAkB,CAAC,GAAGH,mBAAmB,CAAC,IAAI,CAACoB,MAAM,CAACE,WAAW,CAAsB;IAC/FqC,MAAM,CAACC,IAAI,CAAC3F,aAAa,CAAC;IAC1B0F,MAAM,CAACC,IAAI,CAACzD,iBAAiB,CAAC;IAC9B,MAAMyB,QAAQ,GAAGnB,uDAAkB,CAACkD,MAAM,CAAC;IAC3C,IAAI,CAACE,yBAAyB,CAACjC,QAAQ,CAAC;IACxC,IAAI,CAAC,IAAI,CAACR,MAAM,CAACK,iBAAiB,EAAE,MAAM,IAAI,CAAC0B,aAAa,CAAC9C,SAAS,CAAC;EACzE;EAEA,MAAc6B,sBAAsBA,CAAC7B,SAAqB,EAAE;IAC1DA,SAAS,CAACyD,EAAE,CAAC,gBAAgB,EAAE,OAAOb,KAAmB,EAAEc,OAAO,KAAK;MACrE,IAAI,CAAC,IAAI,CAACnC,QAAQ,EAAE,MAAMZ,uDAAkC,CAAC,2CAA2C,CAAC;MACzG,IAAIiC,KAAK,EAAE;QACT,IAAI,CAACrB,QAAQ,CAAC8B,IAAI,CAAC,OAAO,EAAET,KAAK,CAAC;QAClC;MACF;MACA,MAAM;QAAErI,QAAQ;QAAE8D,OAAO,EAAEsF,gBAAgB;QAAEC;MAAmE,CAAC,GAAGF,OAAO,CAAClI,MAAM,CAAC,CAAC,CAAC;MACrI;MACA,IAAIjB,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAElB,MAAM,IAAI,IAAI,CAAC2H,KAAK,CAACzG,QAAQ,CAAC,CAAC,CAAC,KAAKA,QAAQ,CAAC,CAAC,CAAC,EAAE;QAC9D,IAAI,CAAC0H,MAAM,CAAC;UACV1H;QACF,CAAC,CAAC;QACF;QACA,IAAI,CAACgH,QAAQ,CAAC8B,IAAI,CAAC,iBAAiB,EAAE9I,QAAQ,CAAC;MACjD;MACA,MAAM2I,mBAAmB,GAAI,KAAIS,gBAAgB,CAACR,QAAQ,CAAC,EAAE,CAAE,EAAC;MAChE;MACA,IAAIQ,gBAAgB,IAAI,IAAI,CAAC3C,KAAK,CAAC3C,OAAO,KAAK6E,mBAAmB,EAAE;QAClE,MAAMW,WAAW,GAAGtD,uCAAc,CAACD,4CAAuB,EAAEqD,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACnF;QACA,IAAI,CAACd,SAAS,CAAC;UACb5B,WAAW,EAAAnF,kCAAA,CAAAA,kCAAA,KAAO+H,WAAW;YAAExF,OAAO,EAAE6E,mBAAmB;YAAEtD,SAAS,EAAEgE,MAAM;YAAE1C,cAAc,EAAEZ,4CAAuBa;UAAA;QACzH,CAAC,CAAC;QACF,MAAM,IAAI,CAACW,WAAW,CAAC9B,SAAS,CAAC;MACnC;IACF,CAAC,CAAC;EACJ;AACF;AAACqB,wBAAA,CAtKYR,qBAAqB,yBAWI,MAAOrF,MAI1C,IAAqC;EACpC,MAAMsI,eAAe,GAAG,IAAIjD,qBAAqB,CAAC;IAAEE,MAAM,EAAE;MAAEE,WAAW,EAAEzF,MAAM,CAACyF,WAAW;MAAEG,iBAAiB,EAAE5F,MAAM,CAAC4F;IAAkB;EAAE,CAAC,CAAC;EAC/I,MAAM0C,eAAe,CAACpC,aAAa,CAAClG,MAAM,CAACwE,SAAS,CAAC;EACrD,OAAO8D,eAAe;AACxB,CAAC;;ACtCH,MAAM,qBAA4B;;ACG+C;AACtC;AAI3C,eAAeG,oBAAoBA,CAACC,UAAuB,EAAuC;EAChG,IAAIA,UAAU,CAACC,OAAO,CAAC9K,MAAM,EAAE;IAC7B,MAAM+K,YAAY,GAAGF,UAAU,CAACC,OAAO,CAACE,IAAI,CAAChL,MAAM,GAAG,CAAC;IACvD,OAAO6K,UAAU,CAACC,OAAO,CAACG,GAAG,CAACJ,UAAU,CAACC,OAAO,CAACE,IAAI,CAACD,YAAY,CAAC,CAAC;EACtE;EACA,OAAO,IAAI;AACb;AAEO,eAAeG,eAAeA,CAAOL,UAAuB,EAAE7F,OAAe,EAAEmB,MAAc,EAAEhE,MAAS,EAAc;EAC3H,MAAM2I,OAAO,GAAG,MAAMF,oBAAoB,CAACC,UAAU,CAAC;EACtD,IAAI,CAACC,OAAO,EAAE;IACZ,MAAMjL,uEAA+B,EAAE;EACzC;EACA,OAAOgL,UAAU,CAACtC,OAAO,CAAI;IAC3B6C,KAAK,EAAEN,OAAO,CAACM,KAAK;IACpBpG,OAAO,EAAG,UAASA,OAAQ,EAAC;IAC5BuD,OAAO,EAAE;MACPpC,MAAM;MACNhE;IACF;EACF,CAAC,CAAC;AACJ;AAEO,eAAehC,WAAWA,CAAC0K,UAAuB,EAAqB;EAC5E,MAAMC,OAAO,GAAG,MAAMF,oBAAoB,CAACC,UAAU,CAAC;EACtD,IAAI,CAACC,OAAO,EAAE;IACZ,MAAMjL,uEAA+B,EAAE;EACzC;EACA,MAAMqB,QAAQ,GAAGwJ,mDAAyB,CAACI,OAAO,CAACO,UAAU,CAAC;EAC9D,IAAInK,QAAQ,IAAIA,QAAQ,CAAClB,MAAM,EAAE;IAC/B,OAAO,CACL,GAAG,IAAIsL,GAAG,CACRpK,QAAQ,CAACE,GAAG,CAAEmK,GAAG,IAAK;MACpB,OAAOZ,wCAAc,CAACY,GAAG,CAAC,CAACvK,OAAO;IACpC,CAAC,CAAC,CACH,CACF;EACH;EACA,MAAM,IAAIF,KAAK,CAAC,wBAAwB,CAAC;AAC3C;AAEO,SAAS4F,wCAAmBA,CAAAxG,IAAA,EAAyF;EAAA,IAAxF;IAAEyG,SAAS;IAAE3B;EAAqD,CAAC,GAAA9E,IAAA;EACrG,OAAO;IACLE,aAAa,EAAE,MAAAA,CAAA,KAAY;MACzB,MAAMP,wEAAgC,EAAE;IAC1C,CAAC;IACDM,WAAW,EAAE,MAAOyG,CAAuB,IAAK;MAC9C,OAAOzG,WAAW,CAACwG,SAAS,CAAC;IAC/B,CAAC;IACDlG,kBAAkB,EAAE,MAAAA,CAAOyB,QAA2B,EAAE0E,CAAuB,KAAsB;MACnG,MAAM4E,SAAS,GAAG,MAAMN,eAAe,CAA8BvE,SAAS,EAAE3B,OAAO,EAAE,qBAAqB,EAAE,CAAC9C,QAAQ,CAAC,CAAC;MAC3H,OAAOsJ,SAAS;IAClB,CAAC;IACD9K,sBAAsB,EAAE,MAAAA,CAAOwB,QAA2B,EAAE0E,CAAuB,KAAsB;MACvG,MAAM4E,SAAS,GAAG,MAAMN,eAAe,CAA8BvE,SAAS,EAAE3B,OAAO,EAAE,qBAAqB,EAAE,CAAC9C,QAAQ,CAAC,CAAC;MAC3H,OAAOsJ,SAAS;IAClB,CAAC;IACDjL,qBAAqB,EAAE,MAAAA,CAAOiC,SAAgC,EAAEoE,CAAuB,KAAsB;MAC3G,MAAM4E,SAAS,GAAG,MAAMN,eAAe,CAAmBvE,SAAS,EAAE3B,OAAO,EAAE,UAAU,EAAE,CAACxC,SAAS,CAACJ,IAAI,EAAEI,SAAS,CAACE,IAAI,CAAC,CAAC;MAC3H,OAAO8I,SAAS;IAClB,CAAC;IACDhL,sBAAsB,EAAE,MAAAA,CAAOgC,SAAgC,EAAEoE,CAAuB,KAAsB;MAC5G,MAAM4E,SAAS,GAAG,MAAMN,eAAe,CAAmBvE,SAAS,EAAE3B,OAAO,EAAE,eAAe,EAAE,CAACxC,SAAS,CAACJ,IAAI,EAAEI,SAAS,CAACE,IAAI,CAAC,CAAC;MAChI,OAAO8I,SAAS;IAClB,CAAC;IACD7K,mBAAmB,EAAE,MAAAA,CAAO6B,SAAqC,EAAEoE,CAAuB,KAAsB;MAC9G,MAAM4E,SAAS,GAAG,MAAMN,eAAe,CAAoBvE,SAAS,EAAE3B,OAAO,EAAE,mBAAmB,EAAE,CAACxC,SAAS,CAACE,IAAI,EAAEF,SAAS,CAACJ,IAAI,CAAC,CAAC;MACrI,OAAOoJ,SAAS;IAClB,CAAC;IACD5K,qBAAqB,EAAE,MAAO4B,SAAyD,IAAsB;MAC3G,MAAMgJ,SAAS,GAAG,MAAMN,eAAe,CAAoBvE,SAAS,EAAE3B,OAAO,EAAE,sBAAsB,EAAE,CAACxC,SAAS,CAACJ,IAAI,EAAEI,SAAS,CAACE,IAAI,CAAC,CAAC;MACxI,OAAO8I,SAAS;IAClB,CAAC;IACD3K,qBAAqB,EAAE,MAAO2B,SAAyD,IAAsB;MAC3G,MAAMgJ,SAAS,GAAG,MAAMN,eAAe,CAAoBvE,SAAS,EAAE3B,OAAO,EAAE,sBAAsB,EAAE,CAACxC,SAAS,CAACJ,IAAI,EAAEI,SAAS,CAACE,IAAI,CAAC,CAAC;MACxI,OAAO8I,SAAS;IAClB,CAAC;IACDlL,0BAA0B,EAAE,MAAOsG,CAAS,IAAsB;MAChE,MAAM/G,wEAAgC,EAAE;IAC1C,CAAC;IACDQ,qBAAqB,EAAGuG,CAAwB,IAAa;MAC3D,MAAM/G,wEAAgC,EAAE;IAC1C;EACF,CAAC;AACH;;;;;AC5FiE;AACM;AAEiD;AACZ;AACd;AACnD;AAEoD;AAEpC;AACe;AAUnE,MAAM8L,uBAAuB,SAASpE,0CAAY,CAAgE;EAGvHE,WAAWA,CAAAvH,IAAA,EAA8H;IAAA,IAA7H;MAAEwH,MAAM;MAAEC,KAAK;MAAEhB;IAAyG,CAAC,GAAAzG,IAAA;IACrI,KAAK,CAAC;MACJwH,MAAM,EAAE;QAAEE,WAAW,EAAAnF,oCAAA,CAAAA,oCAAA,KAAOiF,MAAM,CAACE,WAAW;UAAEC,cAAc,EAAEZ,4CAAuBa;QAAA,EAAE;QAAEC,iBAAiB,EAAE,CAAC,CAACL,MAAM,CAACK;MAAkB,CAAC;MAC1IJ,KAAK,EAAAlF,oCAAA,CAAAA,oCAAA,KAAQkF,KAAK,IAAI,CAAC,CAAC;QAAG3C,OAAO,EAAE,SAAS;QAAE9D,QAAQ,EAAE;MAAE;IAC7D,CAAC,CAAC;IAAC8G,wBAAA,oBANmC,IAAI;IAO1C,IAAI,CAACrB,SAAS,GAAGA,SAAS,IAAI,IAAI;EACpC;EAYA,MAAasB,MAAMA,CAAA,EAAsB;IACvC,IAAI,CAAC,IAAI,CAACtB,SAAS,EACjB,MAAM9G,iEAAyB,CAAC;MAAE8B,OAAO,EAAE,4EAA4E;MAAEyG,IAAI,EAAE;IAAK,CAAC,CAAC;IACxI,MAAM,IAAI,CAACC,aAAa,CAAC,IAAI,CAAC1B,SAAS,CAAC;IACxC,OAAO,IAAI,CAAC2B,oBAAoB,CAACC,OAAO,CAAC;MAAEpC,MAAM,EAAE;IAAe,CAAC,CAAC;EACtE;EAEA,MAAakC,aAAaA,CAAC1B,SAAsB,EAAiB;IAChE,IAAI,CAAC6B,sBAAsB,CAAC7B,SAAS,CAAC;IACtC,MAAM,IAAI,CAAC8B,WAAW,CAAC9B,SAAS,CAAC;EACnC;EAEA,MAAahC,WAAWA,CAAAa,KAAA,EAAkD;IAAA,IAAjD;MAAER;IAA6B,CAAC,GAAAQ,KAAA;IACvD,IAAI,CAAC,IAAI,CAACmB,SAAS,EACjB,MAAM9G,iEAAyB,CAAC;MAAE8B,OAAO,EAAE,4EAA4E;MAAEyG,IAAI,EAAE;IAAK,CAAC,CAAC;IACxI,MAAMO,kBAAkB,GAAG,IAAI,CAACzB,cAAc,CAAClC,OAAO,CAAC;IACvD,IAAI,CAACwE,SAAS,CAAC;MAAE5B,WAAW,EAAEe;IAAmB,CAAC,CAAC;IACnD,MAAM,IAAI,CAACF,WAAW,CAAC,IAAI,CAAC9B,SAAS,CAAC;EACxC;EAEA,MAAMjC,QAAQA,CAACkD,WAA8B,EAAiB;IAC5D,KAAK,CAAClD,QAAQ,CAACkD,WAAW,CAAC;EAC7B;;EAEA;EACA,MAAgB6B,aAAaA,CAAC7C,CAAc,EAAmB;IAC7D,OAAO,IAAI,CAACc,MAAM,CAACE,WAAW,CAAC5C,OAAO;EACxC;EAEA,MAAcyD,WAAWA,CAAC9B,SAAsB,EAAiB;IAC/D,MAAM;MAAE3B;IAAQ,CAAC,GAAG,IAAI,CAAC0C,MAAM,CAACE,WAAW;IAC3C,MAAMgE,UAAU,GAAGC,QAAQ,CAAC7G,OAAO,EAAE,EAAE,CAAC;IACxC,MAAMV,gBAAgB,GAAGoC,wCAAmB,CAAC;MAAEC,SAAS;MAAE3B,OAAO,EAAE4G;IAAW,CAAC,CAAC;IAChF,MAAME,OAAO,GAAG,MAAM3L,WAAW,CAACwG,SAAS,CAAC;IAE5C,IAAI,CAACiC,MAAM,CAAC;MACV1H,QAAQ,EAAE4K,OAAO,IAAI;IACvB,CAAC,CAAC;IACF,MAAMvH,aAAa,GAAGF,mBAAmB,CAACC,gBAAgB,CAAC;IAC3D,MAAMyH,qBAAqB,GAAG,IAAI,CAACC,wBAAwB,EAAE;IAC7D,MAAM/B,MAAM,GAAG,IAAIjD,yCAAU,EAAE;IAC/B,MAAM;MAAEP;IAAkB,CAAC,GAAGH,mBAAmB,CAAC,IAAI,CAACoB,MAAM,CAACE,WAAW,CAAsB;IAC/FqC,MAAM,CAACC,IAAI,CAAC3F,aAAa,CAAC;IAC1B0F,MAAM,CAACC,IAAI,CAAC6B,qBAAqB,CAAC;IAClC9B,MAAM,CAACC,IAAI,CAACzD,iBAAiB,CAAC;IAC9B,MAAMyB,QAAQ,GAAGnB,uDAAkB,CAACkD,MAAM,CAAC;IAC3C,IAAI,CAACE,yBAAyB,CAACjC,QAAQ,CAAC;EAC1C;EAEQ8D,wBAAwBA,CAAA,EAAqC;IACnE,MAAMC,mBAAyC,GAAG;MAChDvH,QAAQ,EAAE,MAAOvC,MAAiC,IAAoB;QACpE,MAAM;UAAE6C,OAAO;UAAE+D,SAAS;UAAE9D,OAAO;UAAE+D,iBAAiB;UAAE9D;QAAe,CAAC,GAAG/C,MAAM;QACjF,IAAI,CAACuC,QAAQ,CAAC;UACZmD,cAAc,EAAEZ,4CAAuB;UACvCjC,OAAO;UACPqE,MAAM,EAAE,CAAAnE,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEkE,MAAM,KAAI,KAAK;UACvCD,UAAU,EAAE,CAAAjE,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEgE,IAAI,KAAI,OAAO;UAC3CL,WAAW,EAAEE,SAAS;UACtBxC,SAAS,EAAEtB,OAAO,CAAC,CAAC,CAAC;UACrBgE,aAAa,EAAE,CAAAD,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAG,CAAC,CAAC,KAAI,EAAE;UAC3CM,QAAQ,EAAE,CAAApE,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEoE,QAAQ,KAAI;QACxC,CAAC,CAAC;MACJ,CAAC;MACD3E,WAAW,EAAE,MAAOxC,MAA2B,IAAoB;QACjE,MAAM;UAAE6C;QAAQ,CAAC,GAAG7C,MAAM;QAC1B,MAAM,IAAI,CAACwC,WAAW,CAAC;UAAEK;QAAQ,CAAC,CAAC;MACrC;IACF,CAAC;IACD,MAAM+G,qBAAqB,GAAGtH,2BAA2B,CAACwH,mBAAmB,CAAC;IAC9E,OAAOF,qBAAqB;EAC9B;EAEQG,cAAcA,CAAA,EAAG;IAAA,IAAAC,eAAA,EAAAC,qBAAA;IACvB,IAAI,CAAC,IAAI,CAACzF,SAAS,EAAE,MAAMW,uDAAkC,CAAC,2CAA2C,CAAC;IAC1G,KAAA6E,eAAA,GAAI,IAAI,CAACxF,SAAS,cAAAwF,eAAA,gBAAAC,qBAAA,GAAdD,eAAA,CAAgBrB,OAAO,cAAAsB,qBAAA,eAAvBA,qBAAA,CAAyBpM,MAAM,EAAE;MAAA,IAAAqM,sBAAA;MACnC;MACA,MAAMtB,YAAY,GAAG,IAAI,CAACpE,SAAS,CAACmE,OAAO,CAACE,IAAI,CAAChL,MAAM,GAAG,CAAC;MAC3D,QAAAqM,sBAAA,GAAO,IAAI,CAAC1F,SAAS,CAACmE,OAAO,CAACG,GAAG,CAAC,IAAI,CAACtE,SAAS,CAACmE,OAAO,CAACE,IAAI,CAACD,YAAY,CAAC,CAAC,cAAAsB,sBAAA,uBAArEA,sBAAA,CAAuEjB,KAAK;IACrF;IACA,OAAOrG,SAAS;EAClB;EAEQuH,qBAAqBA,CAACtH,OAAO,EAAE;IACrC,IAAI,CAAC,IAAI,CAAC2B,SAAS,IAAI,CAAC,IAAI,CAACuF,cAAc,EAAE,EAAE,OAAO,KAAK;IAC3D,MAAMK,WAAW,GAAG,IAAI,CAAC5F,SAAS,CAACmE,OAAO,CAACG,GAAG,CAAC,IAAI,CAACiB,cAAc,EAAE,CAAC;IACrE,MAAMM,SAAS,GAAGf,iDAAuB,CAACc,WAAW,CAAClB,UAAU,CAAC;IAEjE,IAAIoB,YAAY,GAAG,KAAK;IACxB,KAAK,MAAMC,KAAK,IAAIF,SAAS,EAAE;MAC7B,MAAMG,QAAQ,GAAGjB,sCAAY,CAACgB,KAAK,CAAC;MACpC,IAAIE,MAAM,CAACf,QAAQ,CAACc,QAAQ,CAACE,SAAS,EAAE,EAAE,CAAC,KAAKD,MAAM,CAACf,QAAQ,CAAC7G,OAAO,EAAE,EAAE,CAAC,EAAE;QAC5EyH,YAAY,GAAG,IAAI;QACnB;MACF;IACF;IACA,OAAOA,YAAY;EACrB;EAEQK,qBAAqBA,CAAC9L,OAAO,EAAE;IACrC,IAAI,CAAC,IAAI,CAAC2F,SAAS,IAAI,CAAC,IAAI,CAACuF,cAAc,EAAE,EAAE,OAAO,KAAK;IAC3D,MAAMK,WAAW,GAAG,IAAI,CAAC5F,SAAS,CAACmE,OAAO,CAACG,GAAG,CAAC,IAAI,CAACiB,cAAc,EAAE,CAAC;IACrE,MAAMa,WAAW,GAAGrC,mDAAyB,CAAC6B,WAAW,CAAClB,UAAU,CAAC;IACrE,IAAI2B,cAAc,GAAG,KAAK;IAC1B,KAAK,MAAMC,OAAO,IAAIF,WAAW,EAAE;MAAA,IAAAG,qBAAA;MACjC,MAAMC,aAAa,GAAGxC,wCAAc,CAACsC,OAAO,CAAC;MAC7C,IAAI,EAAAC,qBAAA,GAAAC,aAAa,CAACnM,OAAO,cAAAkM,qBAAA,uBAArBA,qBAAA,CAAuB5L,WAAW,EAAE,OAAKN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,WAAW,EAAE,GAAE;QACnE0L,cAAc,GAAG,IAAI;QACrB;MACF;IACF;IACA,OAAOA,cAAc;EACvB;EAEA,MAAcxE,sBAAsBA,CAAC7B,SAAsB,EAAE;IAC3DA,SAAS,CAACyG,MAAM,CAAChD,EAAE,CAAC,eAAe,EAAE,MAAOC,OAAwD,IAAK;MACvGjD,8BAAS,CAAC,oBAAoB,EAAEiD,OAAO,CAAC;MACxC,IAAI,CAAC,IAAI,CAACnC,QAAQ,EAAE,MAAMZ,uDAAkC,CAAC,2CAA2C,CAAC;MACzG,MAAM;QAAEgG;MAAM,CAAC,GAAGjD,OAAO,CAAClI,MAAM;MAChC,MAAM;QAAE+G,IAAI;QAAExG;MAAK,CAAC,GAAG4K,KAAK,IAAI,CAAC,CAAC;MAClC;MACA,IAAIpE,IAAI,KAAK,iBAAiB,IAAIxG,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAE1C,MAAM,IAAI,IAAI,CAAC2H,KAAK,CAACzG,QAAQ,CAAC,CAAC,CAAC,KAAKwB,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAACoK,qBAAqB,CAACpK,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC3H,IAAI,CAACkG,MAAM,CAAC;UACV1H,QAAQ,EAAEwB;QACZ,CAAC,CAAC;QACF,IAAI,CAACwF,QAAQ,CAAC8B,IAAI,CAAC,iBAAiB,EAAEtH,IAAI,CAAC;MAC7C;MAEA,IAAI4K,KAAK,CAACpE,IAAI,KAAK,cAAc,EAAE;QACjC,MAAM;UAAElE,OAAO,EAAEsF,gBAAgB;UAAEC;QAAO,CAAC,GAAG7H,IAAI;QAClD,MAAMmH,mBAAmB,GAAI,KAAIS,gBAAgB,CAACR,QAAQ,CAAC,EAAE,CAAE,EAAC;QAEhE,IAAI,CAAC,IAAI,CAACwC,qBAAqB,CAACzC,mBAAmB,CAAC,EAAE;QACtD;QACA,IAAIA,mBAAmB,IAAI,IAAI,CAAClC,KAAK,CAAC3C,OAAO,KAAK6E,mBAAmB,EAAE;UACrE,MAAMW,WAAW,GAAGtD,uCAAc,CAACD,4CAAuB,EAAE4C,mBAAmB,CAAC,IAAI,CAAC,CAAC;UACtF;UACA,IAAI,CAACL,SAAS,CAAC;YACb5B,WAAW,EAAAnF,oCAAA,CAAAA,oCAAA,KAAO+H,WAAW;cAAExF,OAAO,EAAE6E,mBAAmB;cAAEtD,SAAS,EAAEgE,MAAM;cAAE1C,cAAc,EAAEZ,4CAAuBa;YAAA;UACzH,CAAC,CAAC;UACF,MAAM,IAAI,CAACW,WAAW,CAAC9B,SAAS,CAAC;QACnC;MACF;IACF,CAAC,CAAC;EACJ;AACF;AAACqB,wBAAA,CAtKY2D,uBAAuB,yBAWE,MAAOxJ,MAI1C,IAAuC;EACtC,MAAMsI,eAAe,GAAG,IAAIkB,uBAAuB,CAAC;IAAEjE,MAAM,EAAE;MAAEE,WAAW,EAAEzF,MAAM,CAACyF,WAAW;MAAEG,iBAAiB,EAAE5F,MAAM,CAAC4F;IAAkB;EAAE,CAAC,CAAC;EACjJ,MAAM0C,eAAe,CAACpC,aAAa,CAAClG,MAAM,CAACwE,SAAS,CAAC;EACrD,OAAO8D,eAAe;AACxB,CAAC;;ACxCqC;;;ACAxC,MAAM,kBAA4B;;ACAlC,MAAM,oBAA4B;;ACAlC,MAAM,4BAA4B;;ACAlC,MAAM,4BAA4B;;ACAlC,MAAM,+BAA4B;;;ACAlC,MAAM,mCAA4B;;;ACAlC,MAAM,qCAA4B;;;ACAgB;AACb;AAarC;AACA,MAAMgD,yBAAyB,GAAG,IAAID,iCAAS,CAAC,MAAM,CAAC;AACvD,MAAME,0BAA0B,GAAG,IAAIF,iCAAS,CAAC,KAAK,CAAC;AACvD,MAAMG,yBAAyB,GAAG,IAAIH,iCAAS,CAAC,GAAG,CAAC;;AAEpD;AACA,MAAMI,WAA0E,GAAG;EACjFC,GAAG,EAAGC,CAAqB,IAAM,OAAOA,CAAC,KAAK,QAAQ,GAAG,IAAIN,iCAAS,CAACD,uCAAc,CAACO,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAIN,iCAAS,CAACM,CAAC,EAAE,EAAE,CAAE;EACrHC,GAAG,EAAGD,CAAqB,IAAK,IAAIN,iCAAS,CAACM,CAAC,EAAE,EAAE;AACrD,CAAC;AACD,MAAME,wBAAqE,GAAG;EAC5EC,GAAG,EAAGC,SAAS,IAAKA,SAAS,CAACC,GAAG,CAACV,yBAAyB,CAAC;EAC5DW,IAAI,EAAGF,SAAS,IAAKA,SAAS,CAACC,GAAG,CAACT,0BAA0B,CAAC;EAC9DW,GAAG,EAAGH,SAAS,IAAKA,SAAS,CAACC,GAAG,CAACR,yBAAyB;AAC7D,CAAC;AACD,MAAMW,uBAAoE,GAAG;EAC3EL,GAAG,EAAGC,SAAS,IAAKA,SAAS,CAACK,KAAK,CAACd,yBAAyB,CAAC,CAACe,EAAE,CAAC,CAAC,EAAEhB,+CAAuB,CAAC;EAC7FY,IAAI,EAAGF,SAAS,IAAKA,SAAS,CAACK,KAAK,CAACb,0BAA0B,CAAC,CAACc,EAAE,CAAC,CAAC,EAAEhB,+CAAuB,CAAC;EAC/Fa,GAAG,EAAGH,SAAS,IAAKA,SAAS,CAACK,KAAK,CAACZ,yBAAyB,CAAC,CAACa,EAAE,CAAC,CAAC,EAAEhB,+CAAuB;AAC9F,CAAC;AACD,MAAMkB,UAAoD,GAAG;EAC3Db,GAAG,EAAGC,CAAC,IAAKA,CAAC,CAAChE,QAAQ,CAAC,EAAE,CAAC;EAC1BiE,GAAG,EAAGD,CAAC,IAAK,IAAIN,iCAAS,CAACM,CAAC,CAAC,CAAChE,QAAQ,CAAC,EAAE;AAC1C,CAAC;AAED,MAAM6E,SAAS,GAAIxM,MAAsB,IAAyB;EAChE,MAAM;IAAEyM,KAAK;IAAEC,eAAe;IAAEC,gBAAgB;IAAEC,aAAa;IAAEC,cAAc;IAAEC;EAAiB,CAAC,GAAG9M,MAAM;EAC5G,IAAI+M,cAAkC,GAAGtB,WAAW,CAACiB,eAAe,CAAC,CAACD,KAAK,CAAC;EAE5E,IAAIE,gBAAgB,EAAE;IACpBI,cAAc,GAAGlB,wBAAwB,CAACc,gBAAgB,CAAC,CAACI,cAAc,CAAc;EAC1F;EAEA,IAAIF,cAAc,EAAE;IAClBE,cAAc,GAAGZ,uBAAuB,CAACU,cAAc,CAAC,CAACE,cAAc,CAAc;EACvF;EAEA,IAAID,gBAAgB,EAAE;IACpBC,cAAc,GAAIA,cAAc,CAAeV,EAAE,CAACS,gBAAgB,EAAEzB,iDAAyB,CAAC;EAChG;EAEA,IAAIuB,aAAa,EAAE;IACjBG,cAAc,GAAGR,UAAU,CAACK,aAAa,CAAC,CAACG,cAAc,CAAC;EAC5D;EACA,OAAOA,cAAc;AACvB,CAAC;AAED,MAAME,cAAc,GAAGA,CACrBR,KAAyB,EAAA1O,IAAA,KAEF;EAAA,IADvB;IAAE2O,eAAe,GAAG,KAAK;IAAEE,aAAa;IAAED,gBAAgB;IAAEE,cAAc;IAAEC;EAA0C,CAAC,GAAA/O,IAAA;EAEvH,OAAOyO,SAAS,CAAC;IACfE,eAAe;IACfE,aAAa;IACbD,gBAAgB;IAChBE,cAAc;IACdC,gBAAgB;IAChBL,KAAK,EAAEA,KAAK,IAAI;EAClB,CAAC,CAAC;AACJ,CAAC;AAED,SAASS,eAAeA,CAACC,OAA2B,EAAU;EAC5D,OAAOF,cAAc,CAACE,OAAO,EAAE;IAC7BT,eAAe,EAAE,KAAK;IACtBE,aAAa,EAAE,KAAK;IACpBD,gBAAgB,EAAE,MAAM;IACxBE,cAAc,EAAE;EAClB,CAAC,CAAC;AACJ;AAEA,SAASO,eAAeA,CAACD,OAA2B,EAAU;EAC5D,OAAOF,cAAc,CAACE,OAAO,EAAE;IAC7BT,eAAe,EAAE,KAAK;IACtBE,aAAa,EAAE,KAAK;IACpBD,gBAAgB,EAAE,KAAK;IACvBE,cAAc,EAAE;EAClB,CAAC,CAAC;AACJ;;;;;;AC3FkD;AACwE;AAC5E;AACD;AACjB;AAEe;AACP;AAG+B;AAG5D,SAASc,2BAA2BA,CAAChC,CAAqB,EAAU;EACzE,MAAMiC,cAAc,GAAGV,eAAe,CAACvB,CAAC,CAAC;EACzC,MAAMkC,YAAY,GAAGT,eAAe,CAACQ,cAAc,CAAC;EACpD,OAAOC,YAAY;AACrB;AAEO,eAAeC,wBAAwBA,CAACC,GAAW,EAA2B;EACnF,MAAMC,SAAS,GAAG,MAAMlF,oCAAG,CAAiBiF,GAAG,CAAC;EAChD,MAAME,mBAAmB,GAAA3N,kBAAA,CAAAA,kBAAA,KACpB0N,SAAS;IACZE,gBAAgB,EAAEP,2BAA2B,CAACK,SAAS,CAACE,gBAAgB,CAAC;IACzEC,GAAG,EAAA7N,kBAAA,CAAAA,kBAAA,KACE0N,SAAS,CAACG,GAAG;MAChBC,6BAA6B,EAAET,2BAA2B,CAACK,SAAS,CAACG,GAAG,CAACC,6BAA6B,CAAC;MACvGC,qBAAqB,EAAEV,2BAA2B,CAACK,SAAS,CAACG,GAAG,CAACE,qBAAqB;IAAC,EACxF;IACDC,MAAM,EAAAhO,kBAAA,CAAAA,kBAAA,KACD0N,SAAS,CAACM,MAAM;MACnBF,6BAA6B,EAAET,2BAA2B,CAACK,SAAS,CAACM,MAAM,CAACF,6BAA6B,CAAC;MAC1GC,qBAAqB,EAAEV,2BAA2B,CAACK,SAAS,CAACM,MAAM,CAACD,qBAAqB;IAAC,EAC3F;IACDE,IAAI,EAAAjO,kBAAA,CAAAA,kBAAA,KACC0N,SAAS,CAACO,IAAI;MACjBH,6BAA6B,EAAET,2BAA2B,CAACK,SAAS,CAACO,IAAI,CAACH,6BAA6B,CAAC;MACxGC,qBAAqB,EAAEV,2BAA2B,CAACK,SAAS,CAACO,IAAI,CAACF,qBAAqB;IAAC;EACzF,EACF;EACD,OAAOJ,mBAAmB;AAC5B;;AAEA;AACA;AACA;AACA;AACO,eAAeO,4BAA4BA,CAACT,GAAW,EAA0B;EACtF,MAAMpO,MAAM,GAAG,MAAMmJ,oCAAG,CAIrBiF,GAAG,EAAE;IACNU,QAAQ,EAAEV,GAAG;IACbW,cAAc,EAAE,4BAA4B;IAC5C1K,MAAM,EAAE,KAAK;IACb2K,IAAI,EAAE;EACR,CAAC,CAAC;EACF,OAAO;IACLR,GAAG,EAAExO,MAAM,CAACiP,YAAY;IACxBN,MAAM,EAAE3O,MAAM,CAACkP,eAAe;IAC9BN,IAAI,EAAE5O,MAAM,CAACmP;EACf,CAAC;AACH;AAEO,MAAMC,0BAA0B,GAAGA,CAACC,UAAuC,EAAEC,aAAqB,KAAK;EAAA,IAAAC,YAAA;EAC5G,IAAI;IACFzB,4BAAS,CAACuB,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE,2BAA2B,CAAC;IACpFvB,4BAAS,CAAC,MAAM,IAAIuB,UAAU,EAAE,qCAAqC,CAAC;IACtEvB,4BAAS,CAAC,MAAM,IAAIuB,UAAU,EAAE,qCAAqC,CAAC;IACtEvB,4BAAS,CACP,OAAOuB,UAAU,CAAC/O,IAAI,KAAK,QAAQ,IAAIoN,uCAAc,CAAC2B,UAAU,CAAC/O,IAAI,CAAC,EACtE,+EAA+E,CAChF;IACD,IAAIM,IAAI,GAAG,IAAI;IACf,IAAIsC,OAAO,GAAG,IAAI;IAClB,QAASmM,UAAU,CAAiCvO,OAAO;MACzD,KAAK6M,oDAAuB;QAC1B,IAAI,OAAO0B,UAAU,CAACzO,IAAI,KAAK,QAAQ,EAAE;UACvCkN,sCAAmB,CAAC,MAAM;YACxBlN,IAAI,GAAG+O,IAAI,CAACC,KAAK,CAACP,UAAU,CAACzO,IAAI,CAAW;UAC9C,CAAC,EAAE,qCAAqC,CAAC;QAC3C,CAAC,MAAM;UACL;UACAA,IAAI,GAAGyO,UAAU,CAACzO,IAAI;QACxB;QACAkN,4BAAS,CAAC+B,KAAK,CAACC,OAAO,CAAClP,IAAI,CAAY,EAAE,+BAA+B,CAAC;QAC1EkN,sCAAmB,CAAC,MAAM;UACxBD,mDAAkB,CAACjN,IAAI,CAAuB;QAChD,CAAC,EAAE,gDAAgD,CAAC;QACpD;MACF,KAAK+M,oDAAuB;MAC5B,KAAKA,oDAAuB;QAC1B,IAAI,OAAO0B,UAAU,CAACzO,IAAI,KAAK,QAAQ,EAAE;UACvCkN,sCAAmB,CAAC,MAAM;YACxBlN,IAAI,GAAG+O,IAAI,CAACC,KAAK,CAACP,UAAU,CAACzO,IAAI,CAAW;UAC9C,CAAC,EAAE,qCAAqC,CAAC;QAC3C,CAAC,MAAM;UACL;UACAA,IAAI,GAAGyO,UAAU,CAACzO,IAAI;QACxB;QAEAkN,4BAAS,CAAClN,IAAI,CAACqP,WAAW,IAAIrP,IAAI,CAACsP,KAAK,EAAG,oBAAmBtP,IAAI,CAACqP,WAAY,2BAA0B,CAAC;QAC1G,MAAME,UAAU,GAAGpC,sCAAmB,CAACnN,IAAI,EAAEgN,4DAA+B,CAAC;QAC7EE,qCAAkB,CAACqC,UAAU,CAACI,MAAM,CAACrS,MAAM,EAAE,CAAC,EAAE,wEAAwE,CAAC;QACzHgF,OAAO,IAAAqM,YAAA,GAAG3O,IAAI,CAAC4P,MAAM,cAAAjB,YAAA,uBAAXA,YAAA,CAAarM,OAAO;QAC9B,IAAIA,OAAO,EAAE;UACX4K,4BAAS,CAAC,CAAChD,MAAM,CAAC2F,KAAK,CAACnB,aAAa,CAAC,EAAG,qCAAoCpM,OAAQ,4CAA2C,CAAC;UACjI,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;YAC/BA,OAAO,GAAG4H,MAAM,CAACf,QAAQ,CAAC7G,OAAO,EAAEmC,oCAAW,CAACnC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;UACpE;UACA4K,qCAAkB,CAAC5K,OAAO,EAAEoM,aAAa,EAAG,qBAAoBpM,OAAQ,oCAAmCoM,aAAc,GAAE,CAAC;QAC9H;QACA;MACF;QACExB,8BAAW,CAAE,+BAA+BuB,UAAU,CAAiCvO,OAAQ,GAAE,CAAC;IAAC;EAEzG,CAAC,CAAC,OAAO2G,KAAK,EAAE;IACd,MAAM1J,kEAA0B,CAAC;MAC/B8B,OAAO,EAAE4H,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAE5H;IAClB,CAAC,CAAC;EACJ;AACF,CAAC;;;;;AC1HmD;AACgB;AAWpC;AACoD;AAElC;AACP;AAI+B;AAE1E,eAAemR,MAAMA,CAAC5Q,QAA8C,EAAE6Q,OAAe,EAAEC,WAAiC,EAAmB;EACzI,MAAMC,aAAa,GAAG,MAAMD,WAAW,CAACE,iBAAiB,CAAChR,QAAQ,CAAC;EACnE,MAAMiR,MAAM,GAAG,MAAMH,WAAW,CAACI,sBAAsB,EAAE;EACzD,MAAMC,aAAa,GAAGX,gDAA6B,CAACO,aAAa,EAAE;IACjEE;EACF,CAAC,CAAC;EACF,MAAMI,QAAQ,GAAGF,aAAa,CAACG,IAAI,CAACC,MAAM,CAACrR,IAAI,CAAC2Q,OAAO,EAAE,KAAK,CAAC,CAAC,CAACW,SAAS,EAAE;EAC5E,OAAOH,QAAQ;AACjB;AAEO,SAAS7M,sCAAmBA,CAAAxG,IAAA,EAQb;EAAA,IARc;IAClC8S,WAAW;IACXD,OAAO;IACPY;EAKF,CAAC,GAAAzT,IAAA;EACC,OAAO;IACLC,WAAW,EAAE,MAAOyG,CAAuB,IAAK,CAAE,KAAI+L,yCAAgB,CAACc,MAAM,CAACrR,IAAI,CAAC2Q,OAAO,EAAE,KAAK,CAAC,CAAC,CAACjJ,QAAQ,CAAC,KAAK,CAAE,EAAC,CAAC;IACtH1J,aAAa,EAAE,MAAOwG,CAAuB,IAAKmM,OAAO;IACzDtS,kBAAkB,EAAE,MAAAA,CAAOyB,QAA8C,EAAE0E,CAAuB,KAAsB;MACtH,MAAMgN,mBAAmB,GAAGD,sBAAsB,EAAE;MACpD,IAAI,CAACC,mBAAmB,EACtB,MAAM/T,iEAAyB,CAAC;QAC9B8B,OAAO,EAAE,6BAA6B;QACtCyG,IAAI,EAAE;MACR,CAAC,CAAC;MACJ,MAAMmL,QAAQ,GAAG,MAAMT,MAAM,CAAC5Q,QAAQ,EAAE6Q,OAAO,EAAEC,WAAW,CAAC;MAC7D,MAAMa,MAAM,GAAG,MAAMD,mBAAmB,CAACrL,OAAO,CAAmB;QACjEpC,MAAM,EAAE,wBAAwB;QAChChE,MAAM,EAAE,CAAC,IAAI,CAAC2R,MAAM,CAACP,QAAQ,CAACzJ,QAAQ,CAAC,KAAK,CAAC,CAAC;MAChD,CAAC,CAAC;MACF,OAAO+J,MAAM;IACf,CAAC;IACDnT,sBAAsB,EAAE,MAAAA,CAAOwB,QAA8C,EAAE0E,CAAuB,KAAsB;MAC1H,MAAMgN,mBAAmB,GAAGD,sBAAsB,EAAE;MACpD,IAAI,CAACC,mBAAmB,EACtB,MAAM/T,iEAAyB,CAAC;QAC9B8B,OAAO,EAAE,6BAA6B;QACtCyG,IAAI,EAAE;MACR,CAAC,CAAC;MACJ,MAAMmL,QAAQ,GAAG,MAAMT,MAAM,CAAC5Q,QAAQ,EAAE6Q,OAAO,EAAEC,WAAW,CAAC;MAC7D,OAAQ,KAAIO,QAAQ,CAACzJ,QAAQ,CAAC,KAAK,CAAE,EAAC;IACxC,CAAC;IACDvJ,qBAAqB,EAAE,MAAAA,CAAOiC,SAAgC,EAAEoE,CAAuB,KAAsB;MAC3G,MAAMmN,aAAa,GAAGlN,gDAAW,CAACkM,OAAO,EAAEvQ,SAAS,CAACE,IAAI,CAAC;MAC1D,OAAOqR,aAAa;IACtB,CAAC;IACDvT,sBAAsB,EAAE,MAAAA,CAAOgC,SAAgC,EAAEoE,CAAuB,KAAsB;MAC5G,MAAMoN,aAAa,GAAGP,MAAM,CAACrR,IAAI,CAAC2Q,OAAO,EAAE,KAAK,CAAC;MACjD,MAAMkB,GAAG,GAAGlR,6CAAY,CAAC;QAAE8C,UAAU,EAAEmO,aAAa;QAAEtR,IAAI,EAAEF,SAAS,CAACE;MAAK,CAAC,CAAC;MAC7E,OAAOuR,GAAG;IACZ,CAAC;IACDtT,mBAAmB,EAAE,MAAAA,CAAO6B,SAAqC,EAAEoE,CAAuB,KAAsB;MAC9GQ,8BAAS,CAAC,qBAAqB,EAAE5E,SAAS,CAAC;MAC3C,MAAMwR,aAAa,GAAGP,MAAM,CAACrR,IAAI,CAAC2Q,OAAO,EAAE,KAAK,CAAC;MACjD,MAAMa,mBAAmB,GAAGD,sBAAsB,EAAE;MACpD,IAAI,CAACC,mBAAmB,EACtB,MAAM/T,iEAAyB,CAAC;QAC9B8B,OAAO,EAAE,6BAA6B;QACtCyG,IAAI,EAAE;MACR,CAAC,CAAC;MACJ,MAAMpD,OAAO,GAAG,MAAM4O,mBAAmB,CAACrL,OAAO,CAAkB;QAAEpC,MAAM,EAAE;MAAc,CAAC,CAAC;MAC7F,MAAM+N,YAAY,GAAGtH,MAAM,CAACf,QAAQ,CAAC7G,OAAO,EAAEmC,oCAAW,CAACnC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;MAC7E,MAAM7C,MAAM,GAAAM,+BAAA,CAAAA,+BAAA,KACPD,SAAS;QACZI,OAAO,EAAE6M,oDAAuB8B;MAAA,EACjC;MACDL,0BAA0B,CAAC/O,MAAM,EAAE+R,YAAY,CAAC;MAChD,MAAMxR,IAAI,GAAG,OAAOP,MAAM,CAACO,IAAI,KAAK,QAAQ,GAAG+O,IAAI,CAACC,KAAK,CAACvP,MAAM,CAACO,IAAI,CAAC,GAAGP,MAAM,CAACO,IAAI;MACpF,MAAMuR,GAAG,GAAGtR,8CAAa,CAAC;QAAEkD,UAAU,EAAEmO,aAAa;QAAEtR,IAAI;QAAEE,OAAO,EAAE6M,oDAAuB8B;MAAC,CAAC,CAAC;MAChG,OAAO0C,GAAG;IACZ,CAAC;IACDrT,qBAAqB,EAAE,MAAAA,CAAO4B,SAAyD,EAAEoE,CAAuB,KAAsB;MACpIQ,8BAAS,CAAC,uBAAuB,EAAE5E,SAAS,CAAC;MAC7C,MAAMwR,aAAa,GAAGP,MAAM,CAACrR,IAAI,CAAC2Q,OAAO,EAAE,KAAK,CAAC;MACjD,MAAMa,mBAAmB,GAAGD,sBAAsB,EAAE;MACpD,IAAI,CAACC,mBAAmB,EACtB,MAAM/T,iEAAyB,CAAC;QAC9B8B,OAAO,EAAE,6BAA6B;QACtCyG,IAAI,EAAE;MACR,CAAC,CAAC;MACJ,MAAMpD,OAAO,GAAG,MAAM4O,mBAAmB,CAACrL,OAAO,CAAkB;QAAEpC,MAAM,EAAE;MAAc,CAAC,CAAC;MAC7F,MAAM+N,YAAY,GAAGtH,MAAM,CAACf,QAAQ,CAAC7G,OAAO,EAAEmC,oCAAW,CAACnC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;MAC7EkM,0BAA0B,CAAC1O,SAAS,EAAE0R,YAAY,CAAC;MACnD,MAAMxR,IAAI,GAAG,OAAOF,SAAS,CAACE,IAAI,KAAK,QAAQ,GAAG+O,IAAI,CAACC,KAAK,CAAClP,SAAS,CAACE,IAAI,CAAC,GAAGF,SAAS,CAACE,IAAI;MAC7F,MAAMuR,GAAG,GAAGtR,8CAAa,CAAC;QAAEkD,UAAU,EAAEmO,aAAa;QAAEtR,IAAI;QAAEE,OAAO,EAAE6M,oDAAuBoC;MAAC,CAAC,CAAC;MAChG,OAAOoC,GAAG;IACZ,CAAC;IACDpT,qBAAqB,EAAE,MAAAA,CAAO2B,SAAyD,EAAEoE,CAAuB,KAAsB;MACpIQ,8BAAS,CAAC,uBAAuB,EAAE5E,SAAS,CAAC;MAC7C,MAAMwR,aAAa,GAAGP,MAAM,CAACrR,IAAI,CAAC2Q,OAAO,EAAE,KAAK,CAAC;MACjD,MAAMa,mBAAmB,GAAGD,sBAAsB,EAAE;MACpD,IAAI,CAACC,mBAAmB,EACtB,MAAM/T,iEAAyB,CAAC;QAC9B8B,OAAO,EAAE,6BAA6B;QACtCyG,IAAI,EAAE;MACR,CAAC,CAAC;MACJ,MAAMpD,OAAO,GAAG,MAAM4O,mBAAmB,CAACrL,OAAO,CAAkB;QAAEpC,MAAM,EAAE;MAAc,CAAC,CAAC;MAC7F,MAAM+N,YAAY,GAAGtH,MAAM,CAACf,QAAQ,CAAC7G,OAAO,EAAEmC,oCAAW,CAACnC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;MAC7EkM,0BAA0B,CAAC1O,SAAS,EAAE0R,YAAY,CAAC;MACnD,MAAMxR,IAAI,GAAG,OAAOF,SAAS,CAACE,IAAI,KAAK,QAAQ,GAAG+O,IAAI,CAACC,KAAK,CAAClP,SAAS,CAACE,IAAI,CAAC,GAAGF,SAAS,CAACE,IAAI;MAC7F,MAAMuR,GAAG,GAAGtR,8CAAa,CAAC;QAAEkD,UAAU,EAAEmO,aAAa;QAAEtR,IAAI;QAAEE,OAAO,EAAE6M,oDAAuBqC;MAAC,CAAC,CAAC;MAChG,OAAOmC,GAAG;IACZ,CAAC;IACD3T,0BAA0B,EAAE,MAAAA,CAAOU,OAAe,EAAE4F,CAAuB,KAAsB;MAC/FQ,6BAAQ,CAAC,4BAA4B,EAAEpG,OAAO,CAAC;MAC/C,OAAO6R,uDAAsB,CAACE,OAAO,CAAC;IACxC,CAAC;IACD1S,qBAAqB,EAAEA,CAACmC,SAAgC,EAAEoE,CAAuB,KAAa;MAC5FQ,6BAAQ,CAAC,uBAAuB,EAAE5E,SAAS,CAAC;MAC5C,MAAM4R,QAAQ,GAAG7G,uCAAc,CAAC/K,SAAS,CAACE,IAAI,CAAC;MAC/C,MAAM2R,IAAI,GAAGZ,MAAM,CAACrR,IAAI,CAACgS,QAAQ,EAAE,KAAK,CAAC;MACzC,MAAME,SAAS,GAAG1B,wCAAO,CAAC;QAAE2B,aAAa,EAAE9C,IAAI,CAACC,KAAK,CAAC2C,IAAI,CAACvK,QAAQ,CAAC,MAAM,CAAC,CAAqB;QAAEjE,UAAU,EAAEkN;MAAQ,CAAC,CAAC;MACxH,OAAOuB,SAAS;IAClB;EACF,CAAC;AACH;;AC7IA,MAAM,sBAA4B;;ACAlC,MAAM,8BAA4B;;;ACA8B;AACvB;AAClB;AAEhB,SAASI,UAAUA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC/B,IAAID,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAK5P,SAAS,IAAI6P,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAK7P,SAAS,EAAE;IAClE,OAAO,IAAI;EACb;EACA,OAAO,IAAIyI,+CAAS,CAACmH,CAAC,EAAE,EAAE,CAAC,CAACE,EAAE,CAACD,CAAC,EAAE,EAAE,CAAC;AACvC;AAEO,SAASE,OAAOA,CAACC,OAAW,EAAE;EACnC,OAAOP,qCAAY,CAACO,OAAO,CAACjL,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC3C;AAEO,SAASkL,OAAOA,CAACC,QAAgB,EAAM;EAC5C,IAAIR,6BAAO,CAACQ,QAAQ,CAAC,EAAE,OAAOA,QAAQ;EACtC,OAAO,IAAIR,0BAAE,CAAClH,uCAAc,CAAC0H,QAAQ,CAAC,EAAE,EAAE,CAAC;AAC7C;AAEO,SAASE,oBAAoBA,CAACC,QAAY,EAAEC,SAA0B,EAAEC,WAA4B,EAAM;EAC/G,MAAMC,QAAQ,GAAG,IAAId,0BAAE,CAACY,SAAS,CAAC;EAClC,MAAMG,OAAO,GAAG,IAAIf,0BAAE,CAACa,WAAW,CAAC;EACnC,OAAOF,QAAQ,CAACK,GAAG,CAACF,QAAQ,CAAC,CAACpH,GAAG,CAACqH,OAAO,CAAC;AAC5C;;ACxBO,MAAME,oBAAoB,GAAG,uEAAuE;AACpG,MAAMC,kBAAkB,GAAG,8EAA8E;AACzG,MAAMC,0BAA0B,GAAG;EACxCC,MAAM,EAAE,KAAK;EACbC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE;AACd,CAAC;AAEM,MAAMC,iBAAiB,GAAG;EAC/BC,UAAU,EAAE,WAAW;EACvBC,oBAAoB,EAAE,qBAAqB;EAC3CC,eAAe,EAAE,oBAAoB;EACrCC,oBAAoB,EAAE;AACxB,CAAC;AAEM,MAAMC,kBAAkB,GAAG;EAChCN,UAAU,EAAE,YAAY;EACxBF,MAAM,EAAE,QAAQ;EAChBS,YAAY,EAAE,cAAc;EAC5BC,IAAI,EAAE;AACR,CAAC;;;;;ACpBqD;AACU;AAEkB;AAGf;AACc;AACyD;AAEzD;AAE1E,MAAMG,oBAAoB,CAAC;EAOhCjP,WAAWA,CAAAvH,IAAA,EAAyF;IAAA,IAAxF;MAAEyT;IAAmF,CAAC,GAAAzT,IAAA;IAAA8H,wBAAA,sBANlD,IAAI;IAAAA,wBAAA;IAAAA,wBAAA,8BAItB,KAAK;IAGjC,IAAI,CAAC2L,sBAAsB,GAAGA,sBAAsB;EACtD;EAEA,IAAIgD,aAAaA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAChD,sBAAsB,EAAE;EACtC;EAEA,MAAMiD,IAAIA,CAAA,EAAkB;IAC1B,IAAI,CAAChP,WAAW,GAAI,MAAM,IAAI,CAAC+O,aAAa,CAACpO,OAAO,CAAoB;MAAEpC,MAAM,EAAE,qBAAqB;MAAEhE,MAAM,EAAE;IAAG,CAAC,CAAuB;IAC5I,IAAI,CAAC0U,mBAAmB,GAAG,MAAM,IAAI,CAACC,uBAAuB,EAAE;EACjE;EAEA,MAAM1D,sBAAsBA,CAAA,EAAoB;IAC9C,IAAI,CAAC,IAAI,CAACxL,WAAW,EAAE,MAAM,IAAI9G,KAAK,CAAC,8BAA8B,CAAC;IACtE,MAAM;MAAE+H,WAAW,EAAEK,IAAI;MAAElE;IAAQ,CAAC,GAAG,IAAI,CAAC4C,WAAW;IACvD,MAAMmP,QAAQ,GAAG,IAAI,CAACF,mBAAmB,GAAGJ,sCAAe,GAAGA,sCAAe;IAC7E,MAAMS,iBAAiB,GAAG;MACxBhO,IAAI;MACJlE,OAAO,EAAEA,OAAO,KAAK,SAAS,GAAG,CAAC,GAAG4H,MAAM,CAACf,QAAQ,CAAC7G,OAAO,EAAE,EAAE,CAAC;MACjEmS,SAAS,EAAEnS,OAAO,KAAK,SAAS,GAAG,CAAC,GAAG4H,MAAM,CAACf,QAAQ,CAAC7G,OAAO,EAAE,EAAE,CAAC;MACnEoS,eAAe,EAAEL;IACnB,CAAC;IACD,OAAOP,oCAAa,CAACU,iBAAiB,CAAC;EACzC;EAEA,MAAMhE,iBAAiBA,CAAChR,QAA8C,EAAiD;IACrH,IAAI,CAAC,IAAI,CAAC0F,WAAW,EAAE,MAAM,IAAI9G,KAAK,CAAC,8BAA8B,CAAC;IAEtE,MAAMuW,cAAc,GAAA5U,iCAAA,KACfP,QAAQ,CACZ;IAED,IAAImV,cAAc,CAACC,KAAK,KAAKvS,SAAS,EACpCsS,cAAc,CAACC,KAAK,GAAI,MAAM,IAAI,CAACX,aAAa,CAACpO,OAAO,CAAS;MAC/DpC,MAAM,EAAE,yBAAyB;MACjChE,MAAM,EAAE,CAACD,QAAQ,CAACE,IAAI,EAAE,QAAQ;IAClC,CAAC,CAAY;IAEf,IAAI,CAAC,IAAI,CAACyU,mBAAmB,IAAIQ,cAAc,CAACE,QAAQ,EAAE;MACxD,IAAIF,cAAc,CAACG,YAAY,EAAE,OAAOH,cAAc,CAACG,YAAY;MACnE,IAAIH,cAAc,CAACI,oBAAoB,EAAE,OAAOJ,cAAc,CAACI,oBAAoB;MACnF;MACA,IAAI,CAACJ,cAAc,CAACK,GAAG,EAAE;QACvB,MAAMC,eAAe,GAAG,MAAM,IAAI,CAACC,kBAAkB,CAACP,cAAc,CAAC;QACrE,IAAIM,eAAe,EAAE;UACnBN,cAAc,CAACQ,QAAQ,GAAGF,eAAe;QAC3C;MACF,CAAC,MAAM;QACLN,cAAc,CAACQ,QAAQ,GAAGR,cAAc,CAACK,GAAG;MAC9C;MACA,OAAOL,cAAc;IACvB;IAEA,IAAI,CAACA,cAAc,CAACK,GAAG,EAAE;MACvB,MAAMC,eAAe,GAAG,MAAM,IAAI,CAACC,kBAAkB,CAACP,cAAc,CAAC;MACrE,IAAIM,eAAe,EAAE;QACnBN,cAAc,CAACQ,QAAQ,GAAGF,eAAe;MAC3C;IACF,CAAC,MAAM;MACLN,cAAc,CAACQ,QAAQ,GAAGR,cAAc,CAACK,GAAG;IAC9C;IAEA,MAAM;MACJH,QAAQ,EAAEO,eAAe;MACzBN,YAAY,EAAEO,mBAAmB;MACjCN,oBAAoB,EAAEO;IACxB,CAAC,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACZ,cAAc,CAAC;IAEhD,IAAI,IAAI,CAACR,mBAAmB,EAAE;MAC5B;MACA;MACA,IAAIQ,cAAc,CAACE,QAAQ,IAAI,CAACF,cAAc,CAACG,YAAY,IAAI,CAACH,cAAc,CAACI,oBAAoB,EAAE;QACnGJ,cAAc,CAACG,YAAY,GAAGH,cAAc,CAACE,QAAQ;QAErDF,cAAc,CAACI,oBAAoB,GAAG/C,UAAU,CAC9C,OAAOsD,2BAA2B,KAAK,QAAQ,GAAGzK,uCAAc,CAACyK,2BAA2B,CAAC,GAAGA,2BAA2B,EAC3H,OAAOX,cAAc,CAACE,QAAQ,KAAK,QAAQ,GAAGhK,uCAAc,CAAC8J,cAAc,CAACE,QAAQ,CAAC,GAAGF,cAAc,CAACE,QAAQ,CAChH,GACGS,2BAA2B,GAC3BX,cAAc,CAACE,QAAQ;MAC7B,CAAC,MAAM;QACL,IAAIQ,mBAAmB,IAAI,CAACV,cAAc,CAACG,YAAY,EAAE;UACvD;UACA;UACAH,cAAc,CAACG,YAAY,GAAGO,mBAAmB;QACnD;QAEA,IAAIC,2BAA2B,IAAI,CAACX,cAAc,CAACI,oBAAoB,EAAE;UACvE;UACA;UACAJ,cAAc,CAACI,oBAAoB,GAAGO,2BAA2B;QACnE;QAEA,IAAIF,eAAe,IAAI,CAACT,cAAc,CAACG,YAAY,EAAE;UACnD;UACA;UACA;UACAH,cAAc,CAACG,YAAY,GAAGM,eAAe;QAC/C;QAEA,IAAIT,cAAc,CAACG,YAAY,IAAI,CAACH,cAAc,CAACI,oBAAoB,EAAE;UACvE;UACA;UACA;UACA;UACAJ,cAAc,CAACI,oBAAoB,GAAGJ,cAAc,CAACG,YAAY;QACnE;MACF;;MAEA;;MAEA,OAAOH,cAAc,CAACE,QAAQ;IAChC,CAAC,MAAM;MACL;MACA;;MAEA,OAAOF,cAAc,CAACI,oBAAoB;MAC1C,OAAOJ,cAAc,CAACG,YAAY;IACpC;;IAEA;IACA;IACA;IACA;IACA,IAAIM,eAAe,IAAI,CAACT,cAAc,CAACE,QAAQ,IAAI,CAACF,cAAc,CAACI,oBAAoB,IAAI,CAACJ,cAAc,CAACG,YAAY,EAAE;MACvHH,cAAc,CAACE,QAAQ,GAAGO,eAAwB;IACpD;IAEAT,cAAc,CAACa,IAAI,GAAG,IAAI,CAACrB,mBAAmB,GAAGjB,qCAAqC,GAAGA,iCAAiC;IAC1HyB,cAAc,CAACrS,OAAO,GAAG,IAAI,CAAC4C,WAAW,CAAC5C,OAAO;IACjD,OAAOqS,cAAc;EACvB;EAEA,MAAcc,wBAAwBA,CAAA,EAAkC;IACtE,MAAMZ,QAAQ,GAAI,MAAM,IAAI,CAACZ,aAAa,CAACpO,OAAO,CAAS;MAAEpC,MAAM,EAAE,cAAc;MAAEhE,MAAM,EAAE;IAAG,CAAC,CAAY;IAC7G,OAAO;MACLoV,QAAQ,EAAEhI,eAAe,CAACgI,QAAQ,CAAC,CAACzN,QAAQ;IAC9C,CAAC;EACH;EAEA,MAAcgN,uBAAuBA,CAAA,EAAqB;IACxD,MAAMsB,WAAW,GAAG,MAAM,IAAI,CAACzB,aAAa,CAACpO,OAAO,CAAQ;MAAEpC,MAAM,EAAE,sBAAsB;MAAEhE,MAAM,EAAE,CAAC,QAAQ,EAAE,KAAK;IAAE,CAAC,CAAC;IAC1H,MAAMkW,eAAe,GAAGD,WAAW,IAAIA,WAAW,CAACE,aAAa,KAAKvT,SAAS;IAE9E,OAAO,CAAC,CAACsT,eAAe;EAC1B;EAEA,MAAcE,uBAAuBA,CAAA,EAAqB;IACxD,IAAI,CAAC,IAAI,CAAC3Q,WAAW,EAAE,MAAM,IAAI9G,KAAK,CAAC,8BAA8B,CAAC;IACtE,MAAM0X,wBAAwB,GAAG,IAAI,CAAC5Q,WAAW,CAAC5C,OAAO,KAAK,KAAK;IAEnE,MAAMA,OAAO,GAAG4H,MAAM,CAACf,QAAQ,CAAC,IAAI,CAACjE,WAAW,CAAC5C,OAAO,EAAE,EAAE,CAAC;IAE7D,IAAIyT,OAAgB;IAEpB,IAAI;MACF,IAAI,IAAI,CAAC5B,mBAAmB,EAAE;QAC5B;QACA,MAAM1G,SAAS,GAAG,MAAMF,wBAAwB,CAAC0F,0BAA0B,CAAC,YAAY,EAAG,GAAE3Q,OAAQ,EAAC,CAAC,CAAC;QACxGyT,OAAO,GAAG;UACRE,eAAe,EAAExI,SAAS;UAC1ByI,eAAe,EAAEvC,6BAA6BN;QAChD,CAAC;MACH,CAAC,MAAM,IAAIyC,wBAAwB,EAAE;QACnC,MAAMrI,SAAS,GAAG,MAAMQ,4BAA4B,CAAC+E,4BAA4B,CAAC,YAAY,EAAG,GAAE1Q,OAAQ,EAAC,CAAC,CAAC;QAC9GyT,OAAO,GAAG;UACRE,eAAe,EAAExI,SAAS;UAC1ByI,eAAe,EAAEvC,yBAAyBR;QAC5C,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAI/U,KAAK,CAAC,oDAAoD,CAAC;MACvE;IACF,CAAC,CAAC,OAAO+X,CAAU,EAAE;MACnB,IAAI;QACF,MAAM1I,SAAS,GAAG,MAAM,IAAI,CAACgI,wBAAwB,EAAE;QACvDM,OAAO,GAAG;UACRE,eAAe,EAAExI,SAAS;UAC1ByI,eAAe,EAAEvC,+BAA+BC;QAClD,CAAC;MACH,CAAC,CAAC,OAAO/M,KAAc,EAAE;QACvB,MAAM,IAAIzI,KAAK,CAAE,6CAA6CyI,KAAK,CAAW5H,OAAQ,EAAC,CAAC;MAC1F;IACF;IACA,OAAO8W,OAAO;EAChB;EAEA,MAAcR,iBAAiBA,CAC7B/V,QAA8C,EACwC;IACtF,IAAK,CAAC,IAAI,CAAC2U,mBAAmB,IAAI3U,QAAQ,CAACqV,QAAQ,IAAM,IAAI,CAACV,mBAAmB,IAAI3U,QAAQ,CAACsV,YAAY,IAAItV,QAAQ,CAACuV,oBAAqB,EAAE;MAC5I,OAAO,CAAC,CAAC;IACX;IAEA,IAAI;MACF,MAAM;QAAEkB,eAAe;QAAEC;MAAgB,CAAC,GAAG,MAAM,IAAI,CAACL,uBAAuB,EAAE;MACjF,IAAI,IAAI,CAAC1B,mBAAmB,IAAI+B,eAAe,KAAKvC,6BAA6B,EAAE;QACjF,MAAM;UAAE5F,MAAM,EAAE;YAAEF,6BAA6B;YAAEC;UAAsB,CAAC,GAAG,CAAC;QAAE,CAAC,GAAGmI,eAAiC;QAEnH,IAAIpI,6BAA6B,IAAIC,qBAAqB,EAAE;UAC1D,OAAO;YACLgH,YAAY,EAAEhD,qCAAY,CAACnF,eAAe,CAACmB,qBAAqB,CAAC,CAAC;YAClEiH,oBAAoB,EAAEjD,qCAAY,CAACnF,eAAe,CAACkB,6BAA6B,CAAC;UACnF,CAAC;QACH;MACF,CAAC,MAAM,IAAIqI,eAAe,KAAKvC,yBAAyB,EAAE;QACxD;QACA;QACA,OAAO;UACLkB,QAAQ,EAAE/C,qCAAY,CAACnF,eAAe,CAAEsJ,eAAe,CAAmBlI,MAAM,CAAC;QACnF,CAAC;MACH,CAAC,MAAM,IAAImI,eAAe,KAAKvC,+BAA+B,EAAE;QAC9D;QACA;QACA,OAAO;UACLkB,QAAQ,EAAE/C,qCAAY,CAACnF,eAAe,CAAEsJ,eAAe,CAAqBpB,QAAQ,CAAC;QACvF,CAAC;MACH;IACF,CAAC,CAAC,OAAOhO,KAAK,EAAE;MACdnC,8BAAS,CAACmC,KAAK,CAAC;IAClB;IAEA,MAAM;MAAEgO;IAAS,CAAC,GAAG,MAAM,IAAI,CAACY,wBAAwB,EAAE;IAE1D,OAAO;MAAEZ,QAAQ,EAAE/C,qCAAY,CAACnF,eAAe,CAACkI,QAAQ,CAAC;IAAE,CAAC;EAC9D;EAEA,MAAcuB,aAAaA,CAACC,MAAyB,EAAmB;IACtE,MAAM7W,QAAQ,GAAAO,iCAAA,KAAQsW,MAAM,CAAE;;IAE9B;IACA;IACA;IACA;IACA;IACA,OAAO7W,QAAQ,CAACqV,QAAQ;IACxB,OAAOrV,QAAQ,CAACsV,YAAY;IAC5B,OAAOtV,QAAQ,CAACuV,oBAAoB;IACpC,MAAMC,GAAG,GAAI,MAAM,IAAI,CAACf,aAAa,CAACpO,OAAO,CAAS;MAAEpC,MAAM,EAAE,iBAAiB;MAAEhE,MAAM,EAAE,CAACD,QAAQ;IAAE,CAAC,CAAY;IACnH,OAAOwV,GAAG;EACZ;EAEA,MAAcsB,eAAeA,CAACD,MAAyB,EAGpD;IACD,MAAME,KAAK,GAAI,MAAM,IAAI,CAACtC,aAAa,CAACpO,OAAO,CAAQ;MAAEpC,MAAM,EAAE,sBAAsB;MAAEhE,MAAM,EAAE,CAAC,QAAQ,EAAE,KAAK;IAAE,CAAC,CAAW;IAC/H;IACA,MAAM+W,eAAe,GAAGlE,OAAO,CAACiE,KAAK,CAACpB,QAAQ,CAAW;IACzD,MAAMsB,eAAe,GAAGhE,oBAAoB,CAAC+D,eAAe,EAAE,EAAE,EAAE,EAAE,CAAC;IACrE,IAAIE,eAAe,GAAGtE,OAAO,CAACqE,eAAe,CAAC;IAE9C,IAAI;MACFC,eAAe,GAAG,MAAM,IAAI,CAACN,aAAa,CAACC,MAAM,CAAC;IACpD,CAAC,CAAC,OAAOxP,KAAc,EAAE;MACvBnC,6BAAQ,CAACmC,KAAK,CAAC;IACjB;IACA,OAAO;MAAE+P,aAAa,EAAEL,KAAK,CAACpB,QAAkB;MAAEuB;IAAgB,CAAC;EACrE;EAEQG,YAAYA,CAACC,kBAA0B,EAAEC,gBAAwB,EAA4B;IAAA,IAA1BC,UAAU,GAAAC,SAAA,CAAA3Z,MAAA,QAAA2Z,SAAA,QAAA5U,SAAA,GAAA4U,SAAA,MAAG,GAAG;IACzF,MAAMC,iBAAiB,GAAG5E,OAAO,CAACwE,kBAAkB,CAAC;IACrD,MAAMK,eAAe,GAAG7E,OAAO,CAACyE,gBAAgB,CAAC;IACjD,MAAMK,eAAe,GAAGD,eAAe,CAACE,IAAI,CAAC,GAAG,CAAC;IACjD,MAAMC,kBAAkB,GAAGJ,iBAAiB,CAACG,IAAI,CAACL,UAAU,CAAC;;IAE7D;IACA,IAAIE,iBAAiB,CAACK,EAAE,CAACH,eAAe,CAAC,EAAE,OAAOhF,OAAO,CAAC8E,iBAAiB,CAAC;IAC5E;IACA,IAAII,kBAAkB,CAACnF,EAAE,CAACiF,eAAe,CAAC,EAAE,OAAOhF,OAAO,CAACkF,kBAAkB,CAAC;IAC9E;IACA,OAAOlF,OAAO,CAACgF,eAAe,CAAC;EACjC;EAEA,MAAcI,4BAA4BA,CAACC,YAAkD,EAG1F;IACD,MAAM;MAAEzX,IAAI;MAAE0X;IAAG,CAAC,GAAGD,YAAY;IACjC,IAAI/R,IAAI,GAAG,EAAE;IAEb,IAAIiS,UAAyB;IAE7B,IAAI3X,IAAI,IAAI,CAAC0X,EAAE,EAAE;MACfC,UAAU,GAAGrE,iCAAiC;IAChD,CAAC,MAAM;MACL,IAAI;QACF5N,IAAI,GAAI,MAAM,IAAI,CAACuO,aAAa,CAACpO,OAAO,CAAS;UAAEpC,MAAM,EAAE,aAAa;UAAEhE,MAAM,EAAE,CAACiY,EAAE,EAAE,QAAQ;QAAE,CAAC,CAAY;MAChH,CAAC,CAAC,OAAO7Q,KAAK,EAAE;QACdnC,6BAAQ,CAACmC,KAAK,CAAC;MACjB;MACA,MAAM+Q,WAAW,GAAG,CAAClS,IAAI,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK;MAE5DiS,UAAU,GAAGC,WAAW,GAAGtE,4BAA4B,GAAGA,sCAAsC;IAClG;IAEA,OAAO;MAAEuE,mBAAmB,EAAEF,UAAU;MAAEjS;IAAK,CAAC;EAClD;EAEA,MAAcwP,kBAAkBA,CAAC1V,QAA8C,EAAmB;IAChG,MAAM;MAAEqY;IAAoB,CAAC,GAAG,MAAM,IAAI,CAACL,4BAA4B,CAAAzX,iCAAA,KAAMP,QAAQ,EAAG;IAExF,IAAIA,QAAQ,CAACwV,GAAG,EAAE;MAChB,OAAOxV,QAAQ,CAACwV,GAAG;IACrB;IAEA,IAAIxV,QAAQ,CAACkY,EAAE,IAAIG,mBAAmB,KAAKvE,4BAA4B,EAAE;MACvE;MACA,IAAI9T,QAAQ,CAACQ,IAAI,EAAE;QACjB,MAAM5B,KAAK,CAAC,iEAAiE,CAAC;MAChF;MAEA,MAAM0Z,mBAAmB,GAAG,KAAM;;MAElC;MACA,OAAOhG,qCAAY,CAACgG,mBAAmB,CAAC1Q,QAAQ,CAAC,EAAE,CAAC,CAAC;IACvD;IAEA,MAAM;MAAEwP,aAAa;MAAEF;IAAgB,CAAC,GAAG,MAAM,IAAI,CAACJ,eAAe,CAAC9W,QAAQ,CAAC;;IAE/E;IACA,MAAM2V,QAAQ,GAAG,IAAI,CAAC0B,YAAY,CAAC/E,qCAAY,CAAC4E,eAAe,CAAC,EAAEE,aAAa,CAAW;IAC1F,OAAOzB,QAAQ;EACjB;AACF;;;;;ACvViE;AACM;AACF;AACyB;AACnD;AAE6E;AAE7D;AACA;AACG;AASvD,MAAM4C,0BAA0B,SAASlT,0CAAY,CAA2D;EACrHE,WAAWA,CAAAvH,IAAA,EAAqG;IAAA,IAApG;MAAEwH,MAAM;MAAEC;IAAuF,CAAC,GAAAzH,IAAA;IAC5G,KAAK,CAAC;MAAEwH,MAAM,EAAE;QAAEE,WAAW,EAAAnF,uCAAA,CAAAA,uCAAA,KAAOiF,MAAM,CAACE,WAAW;UAAEC,cAAc,EAAEZ,4CAAuBa;QAAA;MAAG,CAAC;MAAEH;IAAM,CAAC,CAAC;EAC/G;EAWA,MAAaM,MAAMA,CAAA,EAAsB;IACvC,IAAI,CAAC,IAAI,CAACN,KAAK,CAAC9B,UAAU,EACxB,MAAMhG,iEAAyB,CAAC;MAAE8B,OAAO,EAAE,2EAA2E;MAAEyG,IAAI,EAAE;IAAK,CAAC,CAAC;IACvI,MAAM,IAAI,CAACC,aAAa,CAAC,IAAI,CAACV,KAAK,CAAC9B,UAAU,CAAC;IAC/C,OAAO,IAAI,CAACyC,oBAAoB,CAACC,OAAO,CAAC;MAAEpC,MAAM,EAAE;IAAe,CAAC,CAAC;EACtE;EAEA,MAAakC,aAAaA,CAAC0K,OAAe,EAAiB;IACzD,MAAMC,WAAW,GAAG,IAAI0D,oBAAoB,CAAC;MAC3C/C,sBAAsB,EAAE,IAAI,CAACA,sBAAsB,CAAC+G,IAAI,CAAC,IAAI;IAC/D,CAAC,CAAC;IACF,MAAMpW,gBAAgB,GAAGoC,sCAAmB,CAAC;MAC3CsM,WAAW;MACXD,OAAO;MACPY,sBAAsB,EAAE,IAAI,CAACA,sBAAsB,CAAC+G,IAAI,CAAC,IAAI;IAC/D,CAAC,CAAC;IACF,MAAMnW,aAAa,GAAGF,mBAAmB,CAACC,gBAAgB,CAAC;IAC3D,MAAMyH,qBAAqB,GAAG,IAAI,CAACC,wBAAwB,EAAE;IAC7D,MAAM/B,MAAM,GAAG,IAAIjD,yCAAU,EAAE;IAC/B;IACA,MAAM;MAAEP;IAAkB,CAAC,GAAGH,mBAAmB,CAAC,IAAI,CAACoB,MAAM,CAACE,WAAW,CAAsB;IAC/FqC,MAAM,CAACC,IAAI,CAAC3F,aAAa,CAAC;IAC1B0F,MAAM,CAACC,IAAI,CAAC6B,qBAAqB,CAAC;IAClC9B,MAAM,CAACC,IAAI,CAAC,IAAI,CAACyQ,oBAAoB,EAAE,CAAC;IACxC1Q,MAAM,CAACC,IAAI,CAACzD,iBAAiB,CAAC;IAC9B,MAAMyB,QAAQ,GAAGnB,uDAAkB,CAACkD,MAAM,CAAC;IAC3C,IAAI,CAACE,yBAAyB,CAACjC,QAAQ,CAAC;IACxC,MAAM8K,WAAW,CAAC4D,IAAI,EAAE;IACxB,MAAM,IAAI,CAACnN,aAAa,EAAE;EAC5B;EAEA,MAAa/D,aAAaA,CAACvD,MAA8B,EAAiB;IACxE,IAAI,CAAC,IAAI,CAACmG,oBAAoB,EAAE,MAAMzI,iEAAyB,CAAC;MAAE8B,OAAO,EAAE,6BAA6B;MAAEyG,IAAI,EAAE;IAAK,CAAC,CAAC;IACvH,MAAMwS,WAAW,GAAG,MAAM,IAAI,CAACtS,oBAAoB,CAACC,OAAO,CAAkB;MAAEpC,MAAM,EAAE;IAAkB,CAAC,CAAC;IAC3G,IAAIyU,WAAW,KAAKzY,MAAM,CAAC0D,UAAU,EAAE;MACrC,MAAM,IAAI,CAACwC,aAAa,CAAClG,MAAM,CAAC0D,UAAU,CAAC;MAC3C,IAAI,CAACyC,oBAAoB,CAAC0B,IAAI,CAAC,iBAAiB,EAAE;QAChD9I,QAAQ,EAAE,MAAM,IAAI,CAACoH,oBAAoB,CAACC,OAAO,CAAoB;UAAEpC,MAAM,EAAE;QAAe,CAAC;MACjG,CAAC,CAAC;IACJ;EACF;EAEA,MAAaxB,WAAWA,CAACxC,MAA2B,EAAiB;IACnE,IAAI,CAAC,IAAI,CAACmG,oBAAoB,EAAE,MAAMzI,iEAAyB,CAAC;MAAE8B,OAAO,EAAE,6BAA6B;MAAEyG,IAAI,EAAE;IAAK,CAAC,CAAC;IACvH,MAAMR,WAAW,GAAG,IAAI,CAACV,cAAc,CAAC/E,MAAM,CAAC6C,OAAO,CAAC;IACvD,IAAI,CAAC4D,MAAM,CAAC;MACV5D,OAAO,EAAE;IACX,CAAC,CAAC;IACF,IAAI,CAACwE,SAAS,CAAC;MAAE5B;IAAY,CAAC,CAAC;IAC/B,MAAMmL,OAAO,GAAG,MAAM,IAAI,CAACzK,oBAAoB,CAACC,OAAO,CAAkB;MAAEpC,MAAM,EAAE;IAAkB,CAAC,CAAC;IACvG,MAAM,IAAI,CAACkC,aAAa,CAAC0K,OAAO,CAAC;EACnC;EAEA,MAAgBtJ,aAAaA,CAAA,EAAoB;IAC/C,IAAI,CAAC,IAAI,CAACnB,oBAAoB,EAAE,MAAMzI,iEAAyB,CAAC;MAAE8B,OAAO,EAAE,6BAA6B;MAAEyG,IAAI,EAAE;IAAK,CAAC,CAAC;IACvH,MAAM;MAAEpD;IAAQ,CAAC,GAAG,IAAI,CAAC0C,MAAM,CAACE,WAAW;IAC3C,IAAI,CAAC5C,OAAO,EAAE,MAAMnF,mEAA2B,CAAC,yCAAyC,CAAC;IAC1F,MAAMgb,OAAO,GAAG,MAAM,IAAI,CAACvS,oBAAoB,CAACC,OAAO,CAAmB;MACxEpC,MAAM,EAAE,aAAa;MACrBhE,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI0J,QAAQ,CAAC7G,OAAO,EAAE,EAAE,CAAC,KAAK6G,QAAQ,CAACgP,OAAO,EAAE,EAAE,CAAC,EAAE,MAAMhb,4EAAoC,CAAE,oCAAmCgb,OAAQ,EAAC,CAAC;IAC9I,IAAI,IAAI,CAAClT,KAAK,CAAC3C,OAAO,KAAKA,OAAO,EAAE;MAClC,IAAI,CAACsD,oBAAoB,CAAC0B,IAAI,CAAC,cAAc,EAAEhF,OAAO,CAAC;MACvD,IAAI,CAACsD,oBAAoB,CAAC0B,IAAI,CAAC,SAAS,EAAE;QAAEhF;MAAQ,CAAC,CAAC;IACxD;IACA,IAAI,CAAC4D,MAAM,CAAC;MAAE5D;IAAQ,CAAC,CAAC;IACxB,OAAO6V,OAAO;EAChB;EAEQ7O,wBAAwBA,CAAA,EAAqC;IACnE,MAAMC,mBAAyC,GAAG;MAChDvH,QAAQ,EAAE,MAAOvC,MAAiC,IAAoB;QACpE,MAAM;UAAE6C,OAAO;UAAE+D,SAAS;UAAE9D,OAAO;UAAE+D,iBAAiB;UAAE9D;QAAe,CAAC,GAAG/C,MAAM;QACjF,IAAI,CAACuC,QAAQ,CAAC;UACZmD,cAAc,EAAEZ,4CAAuB;UACvCjC,OAAO;UACPqE,MAAM,EAAE,CAAAnE,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEkE,MAAM,KAAI,KAAK;UACvCD,UAAU,EAAE,CAAAjE,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEgE,IAAI,KAAI,OAAO;UAC3CL,WAAW,EAAEE,SAAS;UACtBxC,SAAS,EAAEtB,OAAO,CAAC,CAAC,CAAC;UACrBgE,aAAa,EAAE,CAAAD,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAG,CAAC,CAAC,KAAI,EAAE;UAC3CM,QAAQ,EAAE,CAAApE,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEoE,QAAQ,KAAI;QACxC,CAAC,CAAC;MACJ,CAAC;MACD3E,WAAW,EAAE,MAAOxC,MAA2B,IAAoB;QACjE,MAAM;UAAE6C;QAAQ,CAAC,GAAG7C,MAAM;QAC1B,MAAM,IAAI,CAACwC,WAAW,CAAC;UAAEK;QAAQ,CAAC,CAAC;MACrC;IACF,CAAC;IACD,MAAM+G,qBAAqB,GAAGtH,2BAA2B,CAACwH,mBAAmB,CAAC;IAC9E,OAAOF,qBAAqB;EAC9B;EAEQ4O,oBAAoBA,CAAA,EAAqC;IAC/D,MAAMI,eAAiC,GAAG;MACxCtV,gBAAgB,EAAE,MAAOtD,MAA8B,IAAoB;QACzE,MAAM;UAAE0D;QAAW,CAAC,GAAG1D,MAAM;QAC7B,MAAM,IAAI,CAACuD,aAAa,CAAC;UAAEG;QAAW,CAAC,CAAC;MAC1C;IACF,CAAC;IACD,OAAON,uBAAuB,CAACwV,eAAe,CAAC;EACjD;AACF;AAAC/S,wBAAA,CAtHYyS,0BAA0B,yBAKD,MAAOtY,MAG1C,IAA0C;EACzC,MAAMsI,eAAe,GAAG,IAAIgQ,0BAA0B,CAAC;IAAE/S,MAAM,EAAE;MAAEE,WAAW,EAAEzF,MAAM,CAACyF;IAAY;EAAE,CAAC,CAAC;EACvG,MAAM6C,eAAe,CAACpC,aAAa,CAAClG,MAAM,CAAC4Q,OAAO,CAAC;EACnD,OAAOtI,eAAe;AACxB,CAAC;;AC/B0C;AACR;;;ACDD","sources":["webpack://@web3auth/ethereum-provider/webpack/bootstrap","webpack://@web3auth/ethereum-provider/webpack/runtime/compat get default export","webpack://@web3auth/ethereum-provider/webpack/runtime/define property getters","webpack://@web3auth/ethereum-provider/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/ethereum-provider/webpack/runtime/make namespace object","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/base-controllers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/openlogin-jrpc\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"eth-rpc-errors\"","webpack://@web3auth/ethereum-provider/./src/rpc/walletMidddleware.ts","webpack://@web3auth/ethereum-provider/./src/rpc/ethRpcMiddlewares.ts","webpack://@web3auth/ethereum-provider/./src/rpc/jrpcClient.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/walletConnectUtils.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/WalletConnectProvider.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@walletconnect/utils\"","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/walletConnectV2Utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/WalletConnectV2Provider.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/index.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/tx\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@metamask/eth-sig-util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"assert\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"jsonschema\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"bignumber.js\"","webpack://@web3auth/ethereum-provider/./src/providers/converter.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/common\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"bn.js\"","webpack://@web3auth/ethereum-provider/./src/providers/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/constants.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/index.ts","webpack://@web3auth/ethereum-provider/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/base-controllers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-jrpc\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"eth-rpc-errors\");","import type { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport type { MessageParams, TransactionParams, TypedMessageParams, WalletMiddlewareOptions } from \"./interfaces\";\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as any).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers, IProviderHandlers } from \"./interfaces\";\nimport { createWalletMiddleware } from \"./walletMidddleware\";\n\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processSignTransaction,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }),\n  ]);\n  return ethMiddleware;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain),\n  });\n}\n\n// #region account middlewares\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount),\n  });\n}\n\n// #endregion account middlewares\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector, ITxData } from \"@walletconnect/legacy-types\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\n\nexport function getProviderHandlers({ connector }: { connector: IConnector }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      const { accounts } = connector;\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.sendTransaction(txParams as ITxData);\n      return result;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTransaction(txParams as ITxData);\n      return result;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n  };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector } from \"@walletconnect/legacy-types\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, isHexStrict, log, WalletInitializationError, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./walletConnectUtils\";\n\nexport interface WalletConnectProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectProvider extends BaseProvider<BaseProviderConfig, WalletConnectProviderState, IConnector> {\n  private connector: IConnector | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectProviderConfig; state?: BaseProviderState; connector?: IConnector }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 }, skipLookupNetwork: !!config.skipLookupNetwork },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: IConnector;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n    skipLookupNetwork: boolean;\n  }): Promise<WalletConnectProvider> => {\n    const providerFactory = new WalletConnectProvider({ config: { chainConfig: params.chainConfig, skipLookupNetwork: params.skipLookupNetwork } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: IConnector): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId, addChain = true, lookup = true }: { chainId: string; addChain?: boolean; lookup?: boolean }): Promise<void> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    const { rpcTarget, displayName } = currentChainConfig;\n    if (addChain) {\n      try {\n        await this.connector.sendCustomRequest({\n          method: \"wallet_addEthereumChain\",\n          params: [\n            {\n              chainId,\n              chainName: displayName,\n              rpcUrls: [rpcTarget],\n              blockExplorerUrls: [currentChainConfig.blockExplorer],\n              nativeCurrency: {\n                name: currentChainConfig.tickerName,\n                symbol: currentChainConfig.ticker,\n                decimals: currentChainConfig.decimals || 18,\n              },\n            },\n          ],\n        });\n      } catch (error) {\n        log.error(error);\n      }\n    }\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId }],\n      });\n    } catch (error) {\n      log.error(error);\n      // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n\n    this.configure({ chainConfig: currentChainConfig });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const { rpcTarget, displayName } = chainConfig;\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [\n          {\n            chainId: chainConfig.chainId,\n            chainName: displayName,\n            rpcUrls: [rpcTarget],\n            blockExplorerUrls: [chainConfig.blockExplorer],\n            nativeCurrency: {\n              name: chainConfig.tickerName,\n              symbol: chainConfig.ticker,\n              decimals: chainConfig.decimals || 18,\n            },\n          },\n        ],\n      });\n      super.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  }\n\n  protected async lookupNetwork(connector: IConnector): Promise<string> {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.provider.emit(\"connect\", { chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  private async setupEngine(connector: IConnector): Promise<void> {\n    const providerHandlers = getProviderHandlers({ connector });\n    this.update({\n      accounts: connector.accounts || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    if (!this.config.skipLookupNetwork) await this.lookupNetwork(connector);\n  }\n\n  private async onConnectorStateUpdate(connector: IConnector) {\n    connector.on(\"session_update\", async (error: Error | null, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n      const { accounts, chainId: connectedChainId, rpcUrl }: { accounts?: string[]; chainId?: number; rpcUrl?: string } = payload.params[0];\n      // Check if accounts changed and trigger event\n      if (accounts?.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts,\n        });\n        // await this.setupEngine(connector);\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n      const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n      // Check if chainId changed and trigger event\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {};\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: { ...maybeConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl, chainNamespace: CHAIN_NAMESPACES.EIP155 },\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@walletconnect/utils\");","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { ISignClient, SessionTypes } from \"@walletconnect/types\";\nimport { getAccountsFromNamespaces, parseAccountId } from \"@walletconnect/utils\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\n\nasync function getLastActiveSession(signClient: ISignClient): Promise<SessionTypes.Struct | null> {\n  if (signClient.session.length) {\n    const lastKeyIndex = signClient.session.keys.length - 1;\n    return signClient.session.get(signClient.session.keys[lastKeyIndex]);\n  }\n  return null;\n}\n\nexport async function sendJrpcRequest<T, U>(signClient: ISignClient, chainId: number, method: string, params: U): Promise<T> {\n  const session = await getLastActiveSession(signClient);\n  if (!session) {\n    throw ethErrors.provider.disconnected();\n  }\n  return signClient.request<T>({\n    topic: session.topic,\n    chainId: `eip155:${chainId}`,\n    request: {\n      method,\n      params,\n    },\n  });\n}\n\nexport async function getAccounts(signClient: ISignClient): Promise<string[]> {\n  const session = await getLastActiveSession(signClient);\n  if (!session) {\n    throw ethErrors.provider.disconnected();\n  }\n  const accounts = getAccountsFromNamespaces(session.namespaces);\n  if (accounts && accounts.length) {\n    return [\n      ...new Set(\n        accounts.map((add) => {\n          return parseAccountId(add).address;\n        })\n      ),\n    ];\n  }\n  throw new Error(\"Failed to get accounts\");\n}\n\nexport function getProviderHandlers({ connector, chainId }: { connector: ISignClient; chainId: number }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      return getAccounts(connector);\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, TransactionParams[]>(connector, chainId, \"eth_sendTransaction\", [txParams]);\n      return methodRes;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, TransactionParams[]>(connector, chainId, \"eth_signTransaction\", [txParams]);\n      return methodRes;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, string[]>(connector, chainId, \"eth_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, string[]>(connector, chainId, \"personal_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, unknown[]>(connector, chainId, \"eth_signTypedData\", [msgParams.data, msgParams.from]);\n      return methodRes;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, unknown[]>(connector, chainId, \"eth_signTypedData_v3\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, unknown[]>(connector, chainId, \"eth_signTypedData_v4\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n  };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport type { ISignClient, SignClientTypes } from \"@walletconnect/types\";\nimport { getAccountsFromNamespaces, getChainsFromNamespaces, parseAccountId, parseChainId } from \"@walletconnect/utils\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, log, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getAccounts, getProviderHandlers } from \"./walletConnectV2Utils\";\n\nexport interface WalletConnectV2ProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectV2ProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectV2Provider extends BaseProvider<BaseProviderConfig, WalletConnectV2ProviderState, ISignClient> {\n  private connector: ISignClient | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectV2ProviderConfig; state?: BaseProviderState; connector?: ISignClient }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 }, skipLookupNetwork: !!config.skipLookupNetwork },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: ISignClient;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n    skipLookupNetwork: boolean;\n  }): Promise<WalletConnectV2Provider> => {\n    const providerFactory = new WalletConnectV2Provider({ config: { chainConfig: params.chainConfig, skipLookupNetwork: params.skipLookupNetwork } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: ISignClient): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId }: { chainId: string }): Promise<void> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.configure({ chainConfig: currentChainConfig });\n    await this.setupEngine(this.connector);\n  }\n\n  async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    super.addChain(chainConfig);\n  }\n\n  // no need to implement this method in wallet connect v2.\n  protected async lookupNetwork(_: ISignClient): Promise<string> {\n    return this.config.chainConfig.chainId;\n  }\n\n  private async setupEngine(connector: ISignClient): Promise<void> {\n    const { chainId } = this.config.chainConfig;\n    const numChainId = parseInt(chainId, 16);\n    const providerHandlers = getProviderHandlers({ connector, chainId: numChainId });\n    const jrpcRes = await getAccounts(connector);\n\n    this.update({\n      accounts: jrpcRes || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 18,\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private connectedTopic() {\n    if (!this.connector) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (this.connector?.session?.length) {\n      // currently we are supporting only 1 active session\n      const lastKeyIndex = this.connector.session.keys.length - 1;\n      return this.connector.session.get(this.connector.session.keys[lastKeyIndex])?.topic;\n    }\n    return undefined;\n  }\n\n  private checkIfChainIdAllowed(chainId) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allChains = getChainsFromNamespaces(sessionData.namespaces);\n\n    let chainAllowed = false;\n    for (const chain of allChains) {\n      const parsedId = parseChainId(chain);\n      if (Number.parseInt(parsedId.reference, 10) === Number.parseInt(chainId, 10)) {\n        chainAllowed = true;\n        break;\n      }\n    }\n    return chainAllowed;\n  }\n\n  private checkIfAccountAllowed(address) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allAccounts = getAccountsFromNamespaces(sessionData.namespaces);\n    let accountAllowed = false;\n    for (const account of allAccounts) {\n      const parsedAccount = parseAccountId(account);\n      if (parsedAccount.address?.toLowerCase() === address?.toLowerCase()) {\n        accountAllowed = true;\n        break;\n      }\n    }\n    return accountAllowed;\n  }\n\n  private async onConnectorStateUpdate(connector: ISignClient) {\n    connector.events.on(\"session_event\", async (payload: SignClientTypes.EventArguments[\"session_event\"]) => {\n      log.debug(\"session_event data\", payload);\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      const { event } = payload.params;\n      const { name, data } = event || {};\n      // Check if accounts changed and trigger event\n      if (name === \"accountsChanged\" && data?.length && this.state.accounts[0] !== data[0] && this.checkIfAccountAllowed(data[0])) {\n        this.update({\n          accounts: data,\n        });\n        this.provider.emit(\"accountsChanged\", data);\n      }\n\n      if (event.name === \"chainChanged\") {\n        const { chainId: connectedChainId, rpcUrl } = data;\n        const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n\n        if (!this.checkIfChainIdAllowed(connectedHexChainId)) return;\n        // Check if chainId changed and trigger event\n        if (connectedHexChainId && this.state.chainId !== connectedHexChainId) {\n          const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedHexChainId) || {};\n          // Handle rpcUrl update\n          this.configure({\n            chainConfig: { ...maybeConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl, chainNamespace: CHAIN_NAMESPACES.EIP155 },\n          });\n          await this.setupEngine(connector);\n        }\n      }\n    });\n  }\n}\n","export * from \"./WalletConnectProvider\";\nexport * from \"./WalletConnectV2Provider\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/tx\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@metamask/eth-sig-util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"assert\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jsonschema\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bignumber.js\");","import { stripHexPrefix } from \"@ethereumjs/util\";\nimport BigNumber from \"bignumber.js\";\n\ntype DenominationType = \"WEI\" | \"GWEI\" | \"ETH\";\ntype NumericBaseType = \"hex\" | \"dec\";\n\ntype ConverterInput = {\n  value: string | BigNumber;\n  fromNumericBase: NumericBaseType;\n  fromDenomination?: DenominationType;\n  toNumericBase?: NumericBaseType;\n  toDenomination?: DenominationType;\n  numberOfDecimals?: number;\n};\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber: Record<NumericBaseType, (n: string | BigNumber) => BigNumber> = {\n  hex: (n: string | BigNumber) => (typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16)),\n  dec: (n: string | BigNumber) => new BigNumber(n, 10),\n};\nconst toNormalizedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange: Record<string, (n: BigNumber) => string> = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n};\n\nconst converter = (params: ConverterInput): string | BigNumber => {\n  const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n  let convertedValue: string | BigNumber = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue as BigNumber);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue as BigNumber);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = (convertedValue as BigNumber).dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nconst conversionUtil = (\n  value: string | BigNumber,\n  { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals }: Partial<ConverterInput>\n): BigNumber | string => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\",\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  }) as string;\n}\n\nfunction hexWEIToDecGWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  }) as string;\n}\n\nexport { conversionUtil, decGWEIToHexWEI, hexWEIToDecGWEI };\n","import { isValidAddress } from \"@ethereumjs/util\";\nimport { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, TypedDataV1Field, typedSignatureHash } from \"@metamask/eth-sig-util\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport { isHexStrict } from \"@web3auth/base\";\nimport assert from \"assert\";\nimport { BigNumber } from \"bignumber.js\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport jsonschema from \"jsonschema\";\n\nimport { TypedMessageParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { EIP1159GasData, LegacyGasData } from \"./interfaces\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | BigNumber): string {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nexport async function fetchEip1159GasEstimates(url: string): Promise<EIP1159GasData> {\n  const estimates = await get<EIP1159GasData>(url);\n  const normalizedEstimates = {\n    ...estimates,\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n  };\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<LegacyGasData> {\n  const result = await get<{\n    SafeGasPrice: string;\n    ProposeGasPrice: string;\n    FastGasPrice: string;\n  }>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\",\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\nexport const validateTypedMessageParams = (parameters: TypedMessageParams<unknown>, activeChainId: number) => {\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(\n      typeof parameters.from === \"string\" && isValidAddress(parameters.from),\n      '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.'\n    );\n    let data = null;\n    let chainId = null;\n    switch ((parameters as TypedMessageParams<unknown>).version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data as unknown), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data as TypedDataV1Field[]);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, `Primary type of \"${data.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = data.domain?.chainId;\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n        break;\n      default:\n        assert.fail(`Unknown typed data version \"${(parameters as TypedMessageParams<unknown>).version}\"`);\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error?.message,\n    });\n  }\n};\n","import { TransactionFactory } from \"@ethereumjs/tx\";\nimport { privateToAddress, stripHexPrefix } from \"@ethereumjs/util\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { SafeEventEmitterProvider, signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { isHexStrict, log } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\nimport { validateTypedMessageParams } from \"./TransactionFormatter/utils\";\n\nasync function signTx(txParams: TransactionParams & { gas?: string }, privKey: string, txFormatter: TransactionFormatter): Promise<Buffer> {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common,\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nexport function getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy,\n}: {\n  txFormatter: TransactionFormatter;\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request<string[], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = {\n        ...msgParams,\n        version: SignTypedDataVersion.V1,\n      };\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/common\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","import { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { BigNumber } from \"bignumber.js\";\nimport BN from \"bn.js\";\n\nexport function bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport function bnToHex(inputBn: BN) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nexport function hexToBn(inputHex: string): BN {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nexport function BnMultiplyByFraction(targetBN: BN, numerator: number | string, denominator: number | string): BN {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n","export const LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nexport const EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n};\n\nexport const TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n};\n\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\",\n};\n","import { Common, Hardfork } from \"@ethereumjs/common\";\nimport { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { Block } from \"@toruslabs/base-controllers\";\nimport { CustomChainConfig, log, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { TransactionParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { bnLessThan, BnMultiplyByFraction, bnToHex, hexToBn } from \"../../utils\";\nimport { EIP1559APIEndpoint, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES } from \"./constants\";\nimport { EIP1159GasData, FallbackGasData, GasData, LegacyGasData, TxType } from \"./interfaces\";\nimport { fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates } from \"./utils\";\n\nexport class TransactionFormatter {\n  private chainConfig: CustomChainConfig | null = null;\n\n  private getProviderEngineProxy: () => SafeEventEmitterProvider;\n\n  private isEIP1559Compatible = false;\n\n  constructor({ getProviderEngineProxy }: { getProviderEngineProxy: () => SafeEventEmitterProvider }) {\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init(): Promise<void> {\n    this.chainConfig = (await this.providerProxy.request<CustomChainConfig>({ method: \"eth_provider_config\", params: [] })) as CustomChainConfig;\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration(): Promise<Common> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const { displayName: name, chainId } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams: TransactionParams & { gas?: string }): Promise<TransactionParams & { gas?: string }> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = {\n      ...txParams,\n    };\n\n    if (clonedTxParams.nonce === undefined)\n      clonedTxParams.nonce = (await this.providerProxy.request<number>({\n        method: \"eth_getTransactionCount\",\n        params: [txParams.from, \"latest\"],\n      })) as number;\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice as never;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  private async fetchEthGasPriceEstimate(): Promise<{ gasPrice: string }> {\n    const gasPrice = (await this.providerProxy.request<string>({ method: \"eth_gasPrice\", params: [] })) as string;\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n    };\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n\n    return !!supportsEIP1559;\n  }\n\n  private async fetchGasFeeEstimateData(): Promise<GasData> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n\n    let gasData: GasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e: unknown) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error: unknown) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    return gasData;\n  }\n\n  private async getDefaultGasFees(\n    txParams: TransactionParams & { gas?: string }\n  ): Promise<{ gasPrice?: string; maxFeePerGas?: string; maxPriorityFeePerGas?: string }> {\n    if ((!this.isEIP1559Compatible && txParams.gasPrice) || (this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates as EIP1159GasData;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as LegacyGasData).medium)),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as FallbackGasData).gasPrice)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const { gasPrice } = await this.fetchEthGasPriceEstimate();\n\n    return { gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice)) };\n  }\n\n  private async estimateTxGas(txMeta: TransactionParams): Promise<string> {\n    const txParams = { ...txMeta };\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = (await this.providerProxy.request<string>({ method: \"eth_estimateGas\", params: [txParams] })) as string;\n    return gas;\n  }\n\n  private async analyzeGasUsage(txMeta: TransactionParams): Promise<{\n    blockGasLimit: string;\n    estimatedGasHex: string;\n  }> {\n    const block = (await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] })) as Block;\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit as string);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error: unknown) {\n      log.warn(error);\n    }\n    return { blockGasLimit: block.gasLimit as string, estimatedGasHex };\n  }\n\n  private addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  private async determineTransactionCategory(txParameters: TransactionParams & { gas?: string }): Promise<{\n    transactionCategory: TxType | null;\n    code?: string;\n  }> {\n    const { data, to } = txParameters;\n    let code = \"\";\n\n    let txCategory: TxType | null;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = (await this.providerProxy.request<string>({ method: \"eth_getCode\", params: [to, \"latest\"] })) as string;\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return { transactionCategory: txCategory, code };\n  }\n\n  private async getDefaultGasLimit(txParams: TransactionParams & { gas?: string }): Promise<string> {\n    const { transactionCategory } = await this.determineTransactionCategory({ ...txParams });\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21_000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit as string);\n    return gasLimit;\n  }\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createAccountMiddleware, createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<string[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n      this._providerEngineProxy.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 18,\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./EthereumPrivateKeyProvider\";\nexport * from \"./ethPrivatekeyUtils\";\nexport * from \"./TransactionFormatter\";\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProviders\";\n","export * from \"./providers\";\n"],"names":["createAsyncMiddleware","createScaffoldMiddleware","ethErrors","resemblesAddress","str","length","createWalletMiddleware","_ref","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","rpc","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","_objectSpread","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","eth_accounts","eth_private_key","private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","mergeMiddleware","createEthMiddleware","providerHandlers","ethMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","_req$params","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","_req$params2","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","_ref2","updatePrivatekey","updateAccount","_req$params3","accountParams","privateKey","wallet_updateAccount","createFetchMiddleware","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","networkMiddleware","getProviderHandlers","connector","_","signMessage","signPersonalMessage","providerFromEngine","JRPCEngine","CHAIN_NAMESPACES","getChainConfig","isHexStrict","log","WalletInitializationError","WalletLoginError","BaseProvider","WalletConnectProvider","constructor","config","state","chainConfig","chainNamespace","EIP155","skipLookupNetwork","_defineProperty","enable","provider","custom","code","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","lookup","currentChainConfig","update","displayName","sendCustomRequest","chainName","blockExplorerUrls","blockExplorer","name","tickerName","symbol","ticker","decimals","error","configure","lookupNetwork","notReady","connected","notConnectedError","connectedHexChainId","toString","rpcConnectionError","emit","engine","push","updateProviderEngineProxy","on","payload","connectedChainId","rpcUrl","maybeConfig","providerFactory","getAccountsFromNamespaces","parseAccountId","getLastActiveSession","signClient","session","lastKeyIndex","keys","get","sendJrpcRequest","disconnected","topic","namespaces","Set","add","methodRes","getChainsFromNamespaces","parseChainId","WalletConnectV2Provider","numChainId","parseInt","jrpcRes","chainSwitchMiddleware","getChainSwitchMiddleware","chainSwitchHandlers","connectedTopic","_this$connector","_this$connector$sessi","_this$connector$sessi2","checkIfChainIdAllowed","sessionData","allChains","chainAllowed","chain","parsedId","Number","reference","checkIfAccountAllowed","allAccounts","accountAllowed","account","_parsedAccount$addres","parsedAccount","events","debug","event","stripHexPrefix","BigNumber","BIG_NUMBER_WEI_MULTIPLIER","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","isValidAddress","SignTypedDataVersion","TYPED_MESSAGE_SCHEMA","typedSignatureHash","assert","jsonschema","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","validateTypedMessageParams","parameters","activeChainId","_data$domain","ok","V1","doesNotThrow","JSON","parse","Array","isArray","V3","V4","primaryType","types","validation","validate","properties","strictEqual","errors","domain","isNaN","fail","invalidInput","TransactionFactory","privateToAddress","decrypt","getEncryptionPublicKey","signTx","privKey","txFormatter","finalTxParams","formatTransaction","common","getCommonConfiguration","unsignedEthTx","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","providerEngineProxy","txHash","concat","rawMessageSig","privKeyBuffer","sig","finalChainId","info","stripped","buff","decrypted","encryptedData","addHexPrefix","BN","bnLessThan","a","b","lt","bnToHex","inputBn","hexToBn","inputHex","isBN","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","mul","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","Common","Hardfork","TransactionFormatter","providerProxy","init","isEIP1559Compatible","getEIP1559Compatibility","hardfork","London","Berlin","customChainParams","networkId","defaultHardfork","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gas","defaultGasLimit","getDefaultGasLimit","gasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","type","fetchEthGasPriceEstimate","latestBlock","supportsEIP1559","baseFeePerGas","fetchGasFeeEstimateData","isLegacyGasAPICompatible","gasData","replace","gasFeeEstimates","gasEstimateType","e","estimateTxGas","txMeta","analyzeGasUsage","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","arguments","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","to","txCategory","codeIsEmpty","transactionCategory","TWENTY_ONE_THOUSAND","EthereumPrivateKeyProvider","bind","getAccountMiddleware","existingKey","network","chainDisconnected","accountHandlers"],"sourceRoot":""}