{"ast":null,"code":"//require('dotenv').config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require('axios');\n\nconst FormData = require('form-data');\n\nexport const uploadJSONToIPFS = async JSONBody => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`; //making axios POST request to Pinata ⬇️\n\n  return axios.post(url, JSONBody, {\n    headers: {\n      pinata_api_key: key,\n      pinata_secret_api_key: secret\n    }\n  }).then(function (response) {\n    return {\n      success: true,\n      pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n    };\n  }).catch(function (error) {\n    console.log(error);\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};\nexport const uploadFileToIPFS = async file => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`; //making axios POST request to Pinata ⬇️\n\n  let data = new FormData();\n  data.append('file', file);\n  const metadata = JSON.stringify({\n    name: 'testname',\n    keyvalues: {\n      exampleKey: 'exampleValue'\n    }\n  });\n  data.append('pinataMetadata', metadata); //pinataOptions are optional\n\n  const pinataOptions = JSON.stringify({\n    cidVersion: 0,\n    customPinPolicy: {\n      regions: [{\n        id: 'FRA1',\n        desiredReplicationCount: 1\n      }, {\n        id: 'NYC1',\n        desiredReplicationCount: 2\n      }]\n    }\n  });\n  data.append('pinataOptions', pinataOptions);\n  return axios.post(url, data, {\n    maxBodyLength: 'Infinity',\n    headers: {\n      'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n      pinata_api_key: key,\n      pinata_secret_api_key: secret\n    }\n  }).then(function (response) {\n    console.log(\"image uploaded\", response.data.IpfsHash);\n    return {\n      success: true,\n      pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n    };\n  }).catch(function (error) {\n    console.log(error);\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};","map":{"version":3,"names":["key","process","env","REACT_APP_PINATA_KEY","secret","REACT_APP_PINATA_SECRET","axios","require","FormData","uploadJSONToIPFS","JSONBody","url","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataURL","data","IpfsHash","catch","error","console","log","message","uploadFileToIPFS","file","append","metadata","JSON","stringify","name","keyvalues","exampleKey","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","maxBodyLength","_boundary"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/src/pinata.js"],"sourcesContent":["//require('dotenv').config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require('axios');\nconst FormData = require('form-data');\n\nexport const uploadJSONToIPFS = async(JSONBody) => {\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    return axios \n        .post(url, JSONBody, {\n            headers: {\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n           return {\n               success: true,\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};\n\nexport const uploadFileToIPFS = async(file) => {\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    \n    let data = new FormData();\n    data.append('file', file);\n\n    const metadata = JSON.stringify({\n        name: 'testname',\n        keyvalues: {\n            exampleKey: 'exampleValue'\n        }\n    });\n    data.append('pinataMetadata', metadata);\n\n    //pinataOptions are optional\n    const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n            regions: [\n                {\n                    id: 'FRA1',\n                    desiredReplicationCount: 1\n                },\n                {\n                    id: 'NYC1',\n                    desiredReplicationCount: 2\n                }\n            ]\n        }\n    });\n    data.append('pinataOptions', pinataOptions);\n\n    return axios \n        .post(url, data, {\n            maxBodyLength: 'Infinity',\n            headers: {\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n            console.log(\"image uploaded\", response.data.IpfsHash)\n            return {\n               success: true,\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};"],"mappings":"AAAA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAxB;AACA,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAR,CAAYG,uBAA3B;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AAEA,OAAO,MAAME,gBAAgB,GAAG,MAAMC,QAAN,IAAmB;EAC/C,MAAMC,GAAG,GAAI,gDAAb,CAD+C,CAE/C;;EACA,OAAOL,KAAK,CACPM,IADE,CACGD,GADH,EACQD,QADR,EACkB;IACjBG,OAAO,EAAE;MACLC,cAAc,EAAEd,GADX;MAELe,qBAAqB,EAAEX;IAFlB;EADQ,CADlB,EAOFY,IAPE,CAOG,UAAUC,QAAV,EAAoB;IACvB,OAAO;MACHC,OAAO,EAAE,IADN;MAEHC,SAAS,EAAE,uCAAuCF,QAAQ,CAACG,IAAT,CAAcC;IAF7D,CAAP;EAIF,CAZE,EAaFC,KAbE,CAaI,UAAUC,KAAV,EAAiB;IACpBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,OAAO;MACHL,OAAO,EAAE,KADN;MAEHQ,OAAO,EAAEH,KAAK,CAACG;IAFZ,CAAP;EAKP,CApBM,CAAP;AAqBH,CAxBM;AA0BP,OAAO,MAAMC,gBAAgB,GAAG,MAAMC,IAAN,IAAe;EAC3C,MAAMjB,GAAG,GAAI,gDAAb,CAD2C,CAE3C;;EAEA,IAAIS,IAAI,GAAG,IAAIZ,QAAJ,EAAX;EACAY,IAAI,CAACS,MAAL,CAAY,MAAZ,EAAoBD,IAApB;EAEA,MAAME,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe;IAC5BC,IAAI,EAAE,UADsB;IAE5BC,SAAS,EAAE;MACPC,UAAU,EAAE;IADL;EAFiB,CAAf,CAAjB;EAMAf,IAAI,CAACS,MAAL,CAAY,gBAAZ,EAA8BC,QAA9B,EAb2C,CAe3C;;EACA,MAAMM,aAAa,GAAGL,IAAI,CAACC,SAAL,CAAe;IACjCK,UAAU,EAAE,CADqB;IAEjCC,eAAe,EAAE;MACbC,OAAO,EAAE,CACL;QACIC,EAAE,EAAE,MADR;QAEIC,uBAAuB,EAAE;MAF7B,CADK,EAKL;QACID,EAAE,EAAE,MADR;QAEIC,uBAAuB,EAAE;MAF7B,CALK;IADI;EAFgB,CAAf,CAAtB;EAeArB,IAAI,CAACS,MAAL,CAAY,eAAZ,EAA6BO,aAA7B;EAEA,OAAO9B,KAAK,CACPM,IADE,CACGD,GADH,EACQS,IADR,EACc;IACbsB,aAAa,EAAE,UADF;IAEb7B,OAAO,EAAE;MACL,gBAAiB,iCAAgCO,IAAI,CAACuB,SAAU,EAD3D;MAEL7B,cAAc,EAAEd,GAFX;MAGLe,qBAAqB,EAAEX;IAHlB;EAFI,CADd,EASFY,IATE,CASG,UAAUC,QAAV,EAAoB;IACtBO,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BR,QAAQ,CAACG,IAAT,CAAcC,QAA5C;IACA,OAAO;MACJH,OAAO,EAAE,IADL;MAEJC,SAAS,EAAE,uCAAuCF,QAAQ,CAACG,IAAT,CAAcC;IAF5D,CAAP;EAIH,CAfE,EAgBFC,KAhBE,CAgBI,UAAUC,KAAV,EAAiB;IACpBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,OAAO;MACHL,OAAO,EAAE,KADN;MAEHQ,OAAO,EAAEH,KAAK,CAACG;IAFZ,CAAP;EAKP,CAvBM,CAAP;AAwBH,CAzDM"},"metadata":{},"sourceType":"module"}