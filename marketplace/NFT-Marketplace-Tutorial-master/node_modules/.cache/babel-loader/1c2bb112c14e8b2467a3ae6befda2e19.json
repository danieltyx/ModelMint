{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1; // For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n  constructor(url, network) {\n    // This will be added in the future; please open an issue to expedite\n    if (network === \"any\") {\n      logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"network:any\"\n      });\n    }\n\n    if (typeof url === \"string\") {\n      super(url, network);\n    } else {\n      super(\"_websocket\", network);\n    }\n\n    this._pollingInterval = -1;\n    this._wsReady = false;\n\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n    } else {\n      defineReadOnly(this, \"_websocket\", url);\n    }\n\n    defineReadOnly(this, \"_requests\", {});\n    defineReadOnly(this, \"_subs\", {});\n    defineReadOnly(this, \"_subIds\", {});\n    defineReadOnly(this, \"_detectNetwork\", super.detectNetwork()); // Stall sending requests until the socket is open...\n\n    this.websocket.onopen = () => {\n      this._wsReady = true;\n      Object.keys(this._requests).forEach(id => {\n        this.websocket.send(this._requests[id].payload);\n      });\n    };\n\n    this.websocket.onmessage = messageEvent => {\n      const data = messageEvent.data;\n      const result = JSON.parse(data);\n\n      if (result.id != null) {\n        const id = String(result.id);\n        const request = this._requests[id];\n        delete this._requests[id];\n\n        if (result.result !== undefined) {\n          request.callback(null, result.result);\n          this.emit(\"debug\", {\n            action: \"response\",\n            request: JSON.parse(request.payload),\n            response: result.result,\n            provider: this\n          });\n        } else {\n          let error = null;\n\n          if (result.error) {\n            error = new Error(result.error.message || \"unknown error\");\n            defineReadOnly(error, \"code\", result.error.code || null);\n            defineReadOnly(error, \"response\", data);\n          } else {\n            error = new Error(\"unknown error\");\n          }\n\n          request.callback(error, undefined);\n          this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: JSON.parse(request.payload),\n            provider: this\n          });\n        }\n      } else if (result.method === \"eth_subscription\") {\n        // Subscription...\n        const sub = this._subs[result.params.subscription];\n\n        if (sub) {\n          //this.emit.apply(this,                  );\n          sub.processFunc(result.params.result);\n        }\n      } else {\n        console.warn(\"this should not happen\");\n      }\n    }; // This Provider does not actually poll, but we want to trigger\n    // poll events for things that depend on them (like stalling for\n    // block and transaction lookups)\n\n\n    const fauxPoll = setInterval(() => {\n      this.emit(\"poll\");\n    }, 1000);\n\n    if (fauxPoll.unref) {\n      fauxPoll.unref();\n    }\n  } // Cannot narrow the type of _websocket, as that is not backwards compatible\n  // so we add a getter and let the WebSocket be a public API.\n\n\n  get websocket() {\n    return this._websocket;\n  }\n\n  detectNetwork() {\n    return this._detectNetwork;\n  }\n\n  get pollingInterval() {\n    return 0;\n  }\n\n  resetEventsBlock(blockNumber) {\n    logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"resetEventBlock\"\n    });\n  }\n\n  set pollingInterval(value) {\n    logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPollingInterval\"\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return null;\n    });\n  }\n\n  set polling(value) {\n    if (!value) {\n      return;\n    }\n\n    logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPolling\"\n    });\n  }\n\n  send(method, params) {\n    const rid = NextId++;\n    return new Promise((resolve, reject) => {\n      function callback(error, result) {\n        if (error) {\n          return reject(error);\n        }\n\n        return resolve(result);\n      }\n\n      const payload = JSON.stringify({\n        method: method,\n        params: params,\n        id: rid,\n        jsonrpc: \"2.0\"\n      });\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: JSON.parse(payload),\n        provider: this\n      });\n      this._requests[String(rid)] = {\n        callback,\n        payload\n      };\n\n      if (this._wsReady) {\n        this.websocket.send(payload);\n      }\n    });\n  }\n\n  static defaultUrl() {\n    return \"ws:/\\/localhost:8546\";\n  }\n\n  _subscribe(tag, param, processFunc) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let subIdPromise = this._subIds[tag];\n\n      if (subIdPromise == null) {\n        subIdPromise = Promise.all(param).then(param => {\n          return this.send(\"eth_subscribe\", param);\n        });\n        this._subIds[tag] = subIdPromise;\n      }\n\n      const subId = yield subIdPromise;\n      this._subs[subId] = {\n        tag,\n        processFunc\n      };\n    });\n  }\n\n  _startEvent(event) {\n    switch (event.type) {\n      case \"block\":\n        this._subscribe(\"block\", [\"newHeads\"], result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit(\"block\", blockNumber);\n        });\n\n        break;\n\n      case \"pending\":\n        this._subscribe(\"pending\", [\"newPendingTransactions\"], result => {\n          this.emit(\"pending\", result);\n        });\n\n        break;\n\n      case \"filter\":\n        this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n\n          this.emit(event.filter, this.formatter.filterLog(result));\n        });\n\n        break;\n\n      case \"tx\":\n        {\n          const emitReceipt = event => {\n            const hash = event.hash;\n            this.getTransactionReceipt(hash).then(receipt => {\n              if (!receipt) {\n                return;\n              }\n\n              this.emit(hash, receipt);\n            });\n          }; // In case it is already mined\n\n\n          emitReceipt(event); // To keep things simple, we start up a single newHeads subscription\n          // to keep an eye out for transactions we are watching for.\n          // Starting a subscription for an event (i.e. \"tx\") that is already\n          // running is (basically) a nop.\n\n          this._subscribe(\"tx\", [\"newHeads\"], result => {\n            this._events.filter(e => e.type === \"tx\").forEach(emitReceipt);\n          });\n\n          break;\n        }\n      // Nothing is needed\n\n      case \"debug\":\n      case \"poll\":\n      case \"willPoll\":\n      case \"didPoll\":\n      case \"error\":\n        break;\n\n      default:\n        console.log(\"unhandled:\", event);\n        break;\n    }\n  }\n\n  _stopEvent(event) {\n    let tag = event.tag;\n\n    if (event.type === \"tx\") {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === \"tx\").length) {\n        return;\n      }\n\n      tag = \"tx\";\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n\n      delete this._subs[subId];\n      this.send(\"eth_unsubscribe\", [subId]);\n    });\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Wait until we have connected before trying to disconnect\n      if (this.websocket.readyState === WebSocket.CONNECTING) {\n        yield new Promise(resolve => {\n          this.websocket.onopen = function () {\n            resolve(true);\n          };\n\n          this.websocket.onerror = function () {\n            resolve(false);\n          };\n        });\n      } // Hangup\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n\n\n      this.websocket.close(1000);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BigNumber","defineReadOnly","JsonRpcProvider","WebSocket","Logger","version","logger","NextId","WebSocketProvider","constructor","url","network","throwError","errors","UNSUPPORTED_OPERATION","operation","_pollingInterval","_wsReady","connection","detectNetwork","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","result","JSON","parse","String","request","undefined","callback","emit","action","response","provider","error","Error","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_websocket","_detectNetwork","pollingInterval","resetEventsBlock","blockNumber","value","poll","polling","rid","Promise","resolve","reject","stringify","jsonrpc","defaultUrl","_subscribe","tag","param","subIdPromise","_subIds","all","then","subId","_startEvent","event","type","from","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","_stopEvent","length","listenerCount","destroy","readyState","CONNECTING","onerror","close"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/providers/src.ts/websocket-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: (...args: Array<any>) => any;\n    onmessage: (...args: Array<any>) => any;\n    onerror: (...args: Array<any>) => any;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}