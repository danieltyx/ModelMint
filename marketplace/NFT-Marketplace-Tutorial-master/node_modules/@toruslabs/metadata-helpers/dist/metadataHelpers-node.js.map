{"version":3,"file":"metadataHelpers-node.js","mappings":";;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA,MAAM,8BAA4B;;;ACAlC,MAAM,qCAA4B;;;ACAlC,MAAM,iCAA4B;;;;ACAkC;AACnC;AACW;;AAE5C,2CAA2C,gCAAgC,oCAAoC,oDAAoD,6DAA6D,iEAAiE,sCAAsC;AACvU,iCAAiC,gBAAgB,sBAAsB,OAAO,uDAAuD,6DAA6D,wBAAe,6BAA6B,oKAAoK,mFAAmF,KAAK;AAC1e,YAAY,qCAAkB;AAC9B,aAAa,6CAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK,GAAG;AACR,2BAA2B,KAAK;AAChC,mBAAmB;AACnB,0BAA0B;AAC1B;AACA;AACA,SAAS,KAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB,EAAE,oBAAoB;AAC/D,mBAAmB,aAAa;AAChC;AACA;AACA,2CAA2C,8CAA8C;AACzF;AACA;AACA;AACA;AACA;AACA,uCAAuC,GAAG;AAC1C,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,kBAAkB,+BAAK;AACvB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEyP;AACzP;;;AC/QA,MAAM,8CAA4B;;;ACAlC,MAAM,iCAA4B;;ACAlC,MAAM,sBAA4B;;ACAE;AACmC;AAEhE,SAASE,SAASA,CAACE,CAAS,EAAU;EAC3C,OAAOC,MAAM,CAACC,IAAI,CAACH,oCAAU,CAACC,CAAC,CAAC,CAAC;AACnC;AAE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","sources":["webpack://@toruslabs/metadata-helpers/external commonjs \"node-fetch\"","webpack://@toruslabs/metadata-helpers/webpack/bootstrap","webpack://@toruslabs/metadata-helpers/webpack/runtime/compat get default export","webpack://@toruslabs/metadata-helpers/webpack/runtime/define property getters","webpack://@toruslabs/metadata-helpers/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/metadata-helpers/webpack/runtime/make namespace object","webpack://@toruslabs/metadata-helpers/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/metadata-helpers/external commonjs \"lodash.merge\"","webpack://@toruslabs/metadata-helpers/external commonjs \"loglevel\"","webpack://@toruslabs/metadata-helpers/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js","webpack://@toruslabs/metadata-helpers/external commonjs \"json-stable-stringify\"","webpack://@toruslabs/metadata-helpers/external commonjs \"elliptic\"","webpack://@toruslabs/metadata-helpers/external commonjs \"ethereum-cryptography/keccak\"","webpack://@toruslabs/metadata-helpers/./src/utils.ts","webpack://@toruslabs/metadata-helpers/./src/MetadataStorageLayer.ts","webpack://@toruslabs/metadata-helpers/external commonjs \"@toruslabs/eccrypto\"","webpack://@toruslabs/metadata-helpers/./src/webAuthnShareResolver.ts","webpack://@toruslabs/metadata-helpers/./src/index.ts"],"sourcesContent":["module.exports = require(\"node-fetch\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n// #region API Keys\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n}\n// #endregion\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n    return response;\n  }\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\nfunction logTracingHeader(response) {\n  log.info(`Request tracing with traceID=${response.headers.get(\"x-web3-correlation-id\")}`);\n}\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(`Timed out in ${ms}ms`));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (customOptions.logTracingHeader) {\n      logTracingHeader(response);\n    }\n    if (response.ok) {\n      return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PUT\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-stable-stringify\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ethereum-cryptography/keccak\");","import { ec as EC } from \"elliptic\";\nimport { keccak256 as keccakHash } from \"ethereum-cryptography/keccak\";\n\nexport function keccak256(a: Buffer): Buffer {\n  return Buffer.from(keccakHash(a));\n}\n\nexport const ec = new EC(\"secp256k1\");\n","import { post, setAPIKey, setEmbedHost } from \"@toruslabs/http-helpers\";\nimport stringify from \"json-stable-stringify\";\n\nimport { ec, keccak256 } from \"./utils\";\n\nexport type PubKeyParams = {\n  pub_key_X: string;\n  pub_key_Y: string;\n};\n\nexport type MetadataParams = PubKeyParams & {\n  set_data: {\n    data: string;\n    timestamp: string;\n  };\n  signature: string;\n};\n\nclass MetadataStorageLayer {\n  public metadataHost: string;\n\n  public serverTimeOffset: number; // ms\n\n  constructor(metadataHost = \"https://metadata.tor.us\", serverTimeOffset = 0) {\n    this.metadataHost = metadataHost;\n    this.serverTimeOffset = serverTimeOffset;\n  }\n\n  static setAPIKey(apiKey: string): void {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost: string): void {\n    setEmbedHost(embedHost);\n  }\n\n  generateMetadataParams(message: string, privateKeyHex: string): MetadataParams {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    const setData = {\n      data: message,\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16),\n    };\n    const sig = key.sign(keccak256(Buffer.from(stringify(setData), \"utf8\")));\n    return {\n      pub_key_X: key.getPublic().getX().toString(16, 64),\n      pub_key_Y: key.getPublic().getY().toString(16, 64),\n      set_data: setData,\n      signature: Buffer.from(\n        sig.r.toString(16, 64) + sig.s.toString(16, 64) + (sig.recoveryParam?.toString(16).padStart(2, \"0\").slice(-2) ?? \"00\"),\n        \"hex\"\n      ).toString(\"base64\"),\n    };\n  }\n\n  generatePubKeyParams(privateKeyHex: string): PubKeyParams {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    return {\n      pub_key_X: key.getPublic().getX().toString(16, 64),\n      pub_key_Y: key.getPublic().getY().toString(16, 64),\n    };\n  }\n\n  async setMetadata(data: MetadataParams, namespace: string | null, options?: RequestInit): Promise<string> {\n    const params = namespace !== null ? { ...data, namespace } : data;\n    const metadataResponse = await post<{ message: string }>(`${this.metadataHost}/set`, params, options, { useAPIKey: true });\n    return metadataResponse.message;\n  }\n\n  async getMetadata(pubKey: PubKeyParams, namespace: string | null, options?: RequestInit): Promise<string> {\n    const params = namespace !== null ? { ...pubKey, namespace } : pubKey;\n    const metadataResponse = await post<{ message: string }>(`${this.metadataHost}/get`, params, options, { useAPIKey: true });\n    return metadataResponse.message;\n  }\n}\n\nexport default MetadataStorageLayer;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","import { decrypt, Ecies, encrypt, getPublic } from \"@toruslabs/eccrypto\";\n\nimport MetadataStorageLayer, { PubKeyParams } from \"./MetadataStorageLayer\";\nimport { ec } from \"./utils\";\n\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\n\nexport type EciesHex = {\n  iv: string;\n  ephemPublicKey: string;\n  ciphertext: string;\n  mac: string;\n};\n\nexport function encParamsHexToBuf(encParamsHex: EciesHex): Ecies {\n  return {\n    iv: Buffer.from(encParamsHex.iv, \"hex\"),\n    ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n    ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n    mac: Buffer.from(encParamsHex.mac, \"hex\"),\n  };\n}\n\nexport function encParamsBufToHex(encParams: Ecies): EciesHex {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\"),\n  };\n}\n\nexport async function encryptData(privKeyHex: string, d: unknown): Promise<string> {\n  const serializedDec = JSON.stringify(d);\n  const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n  const encParams = await encrypt(getPublic(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n  const encParamsHex = encParamsBufToHex(encParams);\n  const sData = JSON.stringify(encParamsHex);\n  return sData;\n}\n\nexport async function decryptData<T>(privKeyHex: string, d: string): Promise<T> {\n  const encParamsHex: EciesHex = JSON.parse(d);\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const serializedBuf = await decrypt(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedDec = serializedBuf.toString(\"utf-8\");\n  const data: T = JSON.parse(serializedDec);\n  return data;\n}\n\nexport async function getAndDecryptData<T>(m: MetadataStorageLayer, privKeyHex: string, namespace: string): Promise<Record<string, T> | null> {\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const pubKey = keyPair.getPublic();\n  const serializedData = await m.getMetadata({ pub_key_X: pubKey.getX().toString(16), pub_key_Y: pubKey.getY().toString(16) }, namespace);\n  if (!serializedData) {\n    return null;\n  }\n  const data = await decryptData<T>(privKeyHex, serializedData);\n  return data as Record<string, T>;\n}\n\nexport async function encryptAndSetData(m: MetadataStorageLayer, privKeyHex: string, d: Record<string, unknown>, namespace: string): Promise<void> {\n  const sData = await encryptData(privKeyHex, d);\n  const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n  await m.setMetadata(metadataParams, namespace);\n}\n\nexport async function setTorusShare(\n  m: MetadataStorageLayer,\n  webAuthnPubKey: PubKeyParams,\n  webAuthnRefHex: string,\n  subspace: string,\n  subspaceData: unknown\n): Promise<void> {\n  const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = refKeyPair.getPrivate();\n  const pubKey = ec.keyFromPublic({\n    x: webAuthnPubKey.pub_key_X,\n    y: webAuthnPubKey.pub_key_Y,\n  });\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  let d: Record<string, unknown> = {};\n  if (data) d = data;\n  const serializedSubspaceData = JSON.stringify(subspaceData);\n  const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n  const encSubspaceData = await encrypt(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n  const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n  d[subspace] = encSubspaceDataHex;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\n\nexport async function setDeviceShare(m: MetadataStorageLayer, webAuthnRefHex: string, subspace: string, subspaceData: unknown): Promise<void> {\n  const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = keyPair.getPrivate();\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  let d: Record<string, unknown> = {};\n  if (data) d = data;\n  d[subspace] = subspaceData;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\n\nexport async function getTorusShare<T>(m: MetadataStorageLayer, webAuthnKeyHex: string, webAuthnRefHex: string, subspace: string): Promise<T | null> {\n  const data = await getAndDecryptData<EciesHex>(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  if (!data) return null;\n  const encParamsHex = data[subspace];\n  if (!encParamsHex) return null;\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n  const privKey = keyPair.getPrivate();\n  const serializedSubspaceDataBuf = await decrypt(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n  const subspaceData = JSON.parse(serializedSubspaceData);\n  return subspaceData;\n}\n\nexport async function getDeviceShare<T>(m: MetadataStorageLayer, webAuthnRefHex: string, subspace: string): Promise<T | null> {\n  const data = await getAndDecryptData<T>(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  if (data) return data[subspace];\n  return null;\n}\n","export * from \"./MetadataStorageLayer\";\nexport { default } from \"./MetadataStorageLayer\";\nexport * from \"./utils\";\nexport * from \"./webAuthnShareResolver\";\n"],"names":["ec","EC","keccak256","keccakHash","a","Buffer","from","post","setAPIKey","setEmbedHost","stringify","MetadataStorageLayer","constructor","metadataHost","arguments","length","undefined","serverTimeOffset","_defineProperty","apiKey","embedHost","generateMetadataParams","message","privateKeyHex","key","keyFromPrivate","setData","data","timestamp","Math","floor","Date","now","toString","sig","sign","pub_key_X","getPublic","getX","pub_key_Y","getY","set_data","signature","r","s","recoveryParam","padStart","slice","generatePubKeyParams","setMetadata","namespace","options","params","_objectSpread","metadataResponse","useAPIKey","getMetadata","pubKey","decrypt","encrypt","WEBAUTHN_TORUS_SHARE","WEBAUTHN_DEVICE_SHARE","encParamsHexToBuf","encParamsHex","iv","ephemPublicKey","ciphertext","mac","encParamsBufToHex","encParams","encryptData","privKeyHex","d","serializedDec","JSON","serializedBuf","sData","decryptData","parse","keyPair","getPrivate","getAndDecryptData","m","serializedData","encryptAndSetData","metadataParams","setTorusShare","webAuthnPubKey","webAuthnRefHex","subspace","subspaceData","refKeyPair","privKey","keyFromPublic","x","y","serializedSubspaceData","serializedSubspaceDataBuf","encSubspaceData","encSubspaceDataHex","setDeviceShare","getTorusShare","webAuthnKeyHex","getDeviceShare","default"],"sourceRoot":""}