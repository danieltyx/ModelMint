{"ast":null,"code":"\"use strict\";\n\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, TransactionDescription } from \"@ethersproject/abi\";\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\nimport * as base64 from \"@ethersproject/base64\";\nimport { Base58 as base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder, dnsEncode, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\"; ////////////////////////\n// Enums\n\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\"; ////////////////////////\n// Exports\n\nexport { AbiCoder, defaultAbiCoder, Fragment, ConstructorFragment, ErrorFragment, EventFragment, FunctionFragment, ParamType, FormatTypes, checkResultErrors, Logger, RLP, _fetchData, fetchJson, poll, checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy, arrayify, concat, stripZeros, zeroPad, isBytes, isBytesLike, defaultPath, HDNode, SigningKey, Interface, LogDescription, TransactionDescription, base58, base64, hexlify, isHexString, hexConcat, hexStripZeros, hexValue, hexZeroPad, hexDataLength, hexDataSlice, nameprep, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs, formatBytes32String, parseBytes32String, dnsEncode, hashMessage, namehash, isValidName, id, _TypedDataEncoder, getAddress, getIcapAddress, getContractAddress, getCreate2Address, isAddress, formatEther, parseEther, formatUnits, parseUnits, commify, computeHmac, keccak256, ripemd160, sha256, sha512, randomBytes, shuffled, solidityPack, solidityKeccak256, soliditySha256, splitSignature, joinSignature, accessListify, parseTransaction, serializeTransaction, TransactionTypes, getJsonWalletAddress, computeAddress, recoverAddress, computePublicKey, recoverPublicKey, verifyMessage, verifyTypedData, getAccountPath, mnemonicToEntropy, entropyToMnemonic, isValidMnemonic, mnemonicToSeed, ////////////////////////\n// Enums\nSupportedAlgorithm, UnicodeNormalizationForm, Utf8ErrorReason, Indexed };","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,QAAT,EAAmBC,iBAAnB,EAAsCC,mBAAtC,EAA2DC,eAA3D,EAA4EC,aAA5E,EAA2FC,aAA3F,EAA0GC,WAA1G,EAAuHC,QAAvH,EAAiIC,gBAAjI,EAAmJC,OAAnJ,EAA4JC,SAA5J,EAAuKC,cAAvK,EAAuLC,SAAvL,EAA0MC,sBAA1M,QAAuO,oBAAvO;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,kBAAxC,EAA4DC,cAA5D,EAA4EC,SAA5E,QAA6F,wBAA7F;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,SAASC,MAAM,IAAIC,MAAnB,QAAiC,sBAAjC;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,EAAsCC,YAAtC,EAAoDC,aAApD,EAAmEC,OAAnE,EAA4EC,aAA5E,EAA2FC,QAA3F,EAAqGC,UAArG,EAAiHC,OAAjH,EAA0HC,WAA1H,EAAuIC,WAAvI,EAAoJC,aAApJ,EAAmKC,OAAnK,EAA4KC,cAA5K,EAA4LC,UAA5L,QAA8M,sBAA9M;AACA,SAASC,iBAAT,EAA4BC,SAA5B,EAAuCC,WAAvC,EAAoDC,EAApD,EAAwDC,WAAxD,EAAqEC,QAArE,QAAqF,qBAArF;AACA,SAASC,WAAT,EAAsBC,iBAAtB,EAAyCC,cAAzC,EAAyDC,MAAzD,EAAiEC,eAAjE,EAAkFC,iBAAlF,EAAqGC,cAArG,QAA2H,uBAA3H;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,MAAzC,QAAuD,qBAAvD;AACA,SAASL,SAAS,IAAIM,iBAAtB,EAAyCC,IAAI,IAAIC,YAAjD,EAA+DJ,MAAM,IAAIK,cAAzE,QAA+F,yBAA/F;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,uBAAtC;AACA,SAASC,eAAT,EAA0BC,QAA1B,EAAoCC,cAApC,EAAoDC,SAApD,EAA+DC,iBAA/D,EAAkFC,WAAlF,QAAqG,2BAArG;AACA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,UAA7C,QAA+D,4BAA/D;AACA,SAASC,mBAAT,EAA8BC,QAA9B,EAAwCC,kBAAxC,EAA4DC,oBAA5D,EAAkFC,WAAlF,EAA+FC,gBAA/F,EAAiHC,YAAjH,EAA+HC,cAA/H,QAAqJ,wBAArJ;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,KAAK,IAAIC,gBAAjD,EAAmEC,cAAnE,EAAmFC,SAAS,IAAIC,oBAAhG,EAAsHC,gBAAtH,QAA8I,6BAA9I;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,UAA/B,EAA2CC,WAA3C,EAAwDC,UAAxD,QAA0E,sBAA1E;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,uBAA/C;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,IAAhC,QAA4C,oBAA5C,C,CAEA;AACA;;AAEA,SAASC,kBAAT,QAAmC,qBAAnC;AACA,SAASC,wBAAT,EAAmCC,eAAnC,QAA0D,wBAA1D,C,CAeA;AACA;;AAEA,SACItG,QADJ,EAEIG,eAFJ,EAIII,QAJJ,EAKIL,mBALJ,EAMIE,aANJ,EAOIC,aAPJ,EAQIG,gBARJ,EASII,SATJ,EAUIN,WAVJ,EAYIL,iBAZJ,EAeIoD,MAfJ,EAiBIiB,GAjBJ,EAmBI2B,UAnBJ,EAoBIC,SApBJ,EAqBIC,IArBJ,EAuBInC,eAvBJ,EAwBIC,QAxBJ,EAyBIC,cAzBJ,EA0BIC,SA1BJ,EA2BIC,iBA3BJ,EA4BIC,WA5BJ,EA8BI/C,QA9BJ,EAgCIC,MAhCJ,EAiCIc,UAjCJ,EAkCIF,OAlCJ,EAoCIJ,OApCJ,EAqCIC,WArCJ,EAuCIY,WAvCJ,EAwCIG,MAxCJ,EAyCI0B,UAzCJ,EA2CI/D,SA3CJ,EA6CIC,cA7CJ,EA8CIE,sBA9CJ,EAgDIQ,MAhDJ,EAiDIF,MAjDJ,EAmDIQ,OAnDJ,EAoDIM,WApDJ,EAqDIT,SArDJ,EAsDII,aAtDJ,EAuDIC,QAvDJ,EAwDIC,UAxDJ,EAyDIJ,aAzDJ,EA0DID,YA1DJ,EA4DIkD,QA5DJ,EA6DIE,oBA7DJ,EA8DIC,WA9DJ,EA+DIC,gBA/DJ,EAgEIC,YAhEJ,EAiEIC,cAjEJ,EAmEIP,mBAnEJ,EAoEIE,kBApEJ,EAsEIrC,SAtEJ,EAuEIC,WAvEJ,EAwEIG,QAxEJ,EAyEID,WAzEJ,EA0EID,EA1EJ,EA4EIH,iBA5EJ,EA8EIxB,UA9EJ,EA+EIG,cA/EJ,EAgFID,kBAhFJ,EAiFID,iBAjFJ,EAkFIG,SAlFJ,EAoFIyE,WApFJ,EAqFIC,UArFJ,EAuFIC,WAvFJ,EAwFIC,UAxFJ,EA0FIJ,OA1FJ,EA4FIpC,WA5FJ,EA6FIF,SA7FJ,EA8FIG,SA9FJ,EA+FIC,MA/FJ,EAgGIC,MAhGJ,EAkGIK,WAlGJ,EAmGIC,QAnGJ,EAqGIH,YArGJ,EAsGIF,iBAtGJ,EAuGIG,cAvGJ,EAyGIzB,cAzGJ,EA0GIF,aA1GJ,EA4GIgD,aA5GJ,EA6GIG,gBA7GJ,EA8GIG,oBA9GJ,EA+GIC,gBA/GJ,EAiHItC,oBAjHJ,EAmHIgC,cAnHJ,EAoHIG,cApHJ,EAsHIf,gBAtHJ,EAuHIC,gBAvHJ,EAyHIuB,aAzHJ,EA0HIC,eA1HJ,EA4HIlD,cA5HJ,EA6HIG,iBA7HJ,EA8HIJ,iBA9HJ,EA+HIG,eA/HJ,EAgIIE,cAhIJ,EAmII;AACA;AAEAkD,kBAtIJ,EAwIIC,wBAxIJ,EAyIIC,eAzIJ,EAwJI7F,OAxJJ","names":["AbiCoder","checkResultErrors","ConstructorFragment","defaultAbiCoder","ErrorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","Indexed","Interface","LogDescription","ParamType","TransactionDescription","getAddress","getCreate2Address","getContractAddress","getIcapAddress","isAddress","base64","Base58","base58","arrayify","concat","hexConcat","hexDataSlice","hexDataLength","hexlify","hexStripZeros","hexValue","hexZeroPad","isBytes","isBytesLike","isHexString","joinSignature","zeroPad","splitSignature","stripZeros","_TypedDataEncoder","dnsEncode","hashMessage","id","isValidName","namehash","defaultPath","entropyToMnemonic","getAccountPath","HDNode","isValidMnemonic","mnemonicToEntropy","mnemonicToSeed","getJsonWalletAddress","keccak256","Logger","computeHmac","ripemd160","sha256","sha512","solidityKeccak256","pack","solidityPack","soliditySha256","randomBytes","shuffled","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","RLP","computePublicKey","recoverPublicKey","SigningKey","formatBytes32String","nameprep","parseBytes32String","_toEscapedUtf8String","toUtf8Bytes","toUtf8CodePoints","toUtf8String","Utf8ErrorFuncs","accessListify","computeAddress","parse","parseTransaction","recoverAddress","serialize","serializeTransaction","TransactionTypes","commify","formatEther","parseEther","formatUnits","parseUnits","verifyMessage","verifyTypedData","_fetchData","fetchJson","poll","SupportedAlgorithm","UnicodeNormalizationForm","Utf8ErrorReason"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/ethers/src.ts/utils.ts"],"sourcesContent":["\"use strict\";\n\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, Result, TransactionDescription }from \"@ethersproject/abi\";\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\nimport * as base64 from \"@ethersproject/base64\";\nimport { Base58 as base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder, dnsEncode, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\";\n\n////////////////////////\n// Enums\n\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\";\nimport { UnsignedTransaction } from \"@ethersproject/transactions\";\n\n////////////////////////\n// Types and Interfaces\n\nimport { CoerceFunc } from \"@ethersproject/abi\";\nimport { Bytes, BytesLike, Hexable } from \"@ethersproject/bytes\"\nimport { Mnemonic } from \"@ethersproject/hdnode\";\nimport { EncryptOptions, ProgressCallback } from \"@ethersproject/json-wallets\";\nimport { Deferrable } from \"@ethersproject/properties\";\nimport { Utf8ErrorFunc } from \"@ethersproject/strings\";\nimport { AccessList, AccessListish } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, FetchJsonResponse, OnceBlockable, OncePollable, PollOptions } from \"@ethersproject/web\";\n\n////////////////////////\n// Exports\n\nexport {\n    AbiCoder,\n    defaultAbiCoder,\n\n    Fragment,\n    ConstructorFragment,\n    ErrorFragment,\n    EventFragment,\n    FunctionFragment,\n    ParamType,\n    FormatTypes,\n\n    checkResultErrors,\n    Result,\n\n    Logger,\n\n    RLP,\n\n    _fetchData,\n    fetchJson,\n    poll,\n\n    checkProperties,\n    deepCopy,\n    defineReadOnly,\n    getStatic,\n    resolveProperties,\n    shallowCopy,\n\n    arrayify,\n\n    concat,\n    stripZeros,\n    zeroPad,\n\n    isBytes,\n    isBytesLike,\n\n    defaultPath,\n    HDNode,\n    SigningKey,\n\n    Interface,\n\n    LogDescription,\n    TransactionDescription,\n\n    base58,\n    base64,\n\n    hexlify,\n    isHexString,\n    hexConcat,\n    hexStripZeros,\n    hexValue,\n    hexZeroPad,\n    hexDataLength,\n    hexDataSlice,\n\n    nameprep,\n    _toEscapedUtf8String,\n    toUtf8Bytes,\n    toUtf8CodePoints,\n    toUtf8String,\n    Utf8ErrorFuncs,\n\n    formatBytes32String,\n    parseBytes32String,\n\n    dnsEncode,\n    hashMessage,\n    namehash,\n    isValidName,\n    id,\n\n    _TypedDataEncoder,\n\n    getAddress,\n    getIcapAddress,\n    getContractAddress,\n    getCreate2Address,\n    isAddress,\n\n    formatEther,\n    parseEther,\n\n    formatUnits,\n    parseUnits,\n\n    commify,\n\n    computeHmac,\n    keccak256,\n    ripemd160,\n    sha256,\n    sha512,\n\n    randomBytes,\n    shuffled,\n\n    solidityPack,\n    solidityKeccak256,\n    soliditySha256,\n\n    splitSignature,\n    joinSignature,\n\n    accessListify,\n    parseTransaction,\n    serializeTransaction,\n    TransactionTypes,\n\n    getJsonWalletAddress,\n\n    computeAddress,\n    recoverAddress,\n\n    computePublicKey,\n    recoverPublicKey,\n\n    verifyMessage,\n    verifyTypedData,\n\n    getAccountPath,\n    mnemonicToEntropy,\n    entropyToMnemonic,\n    isValidMnemonic,\n    mnemonicToSeed,\n\n\n    ////////////////////////\n    // Enums\n\n    SupportedAlgorithm,\n\n    UnicodeNormalizationForm,\n    Utf8ErrorReason,\n\n    ////////////////////////\n    // Types\n\n    Bytes,\n    BytesLike,\n    Hexable,\n\n    AccessList,\n    AccessListish,\n    UnsignedTransaction,\n\n    CoerceFunc,\n\n    Indexed,\n\n    Mnemonic,\n\n    Deferrable,\n\n    Utf8ErrorFunc,\n\n    ConnectionInfo,\n    OnceBlockable,\n    OncePollable,\n    PollOptions,\n    FetchJsonResponse,\n\n    EncryptOptions,\n    ProgressCallback\n}\n\n"]},"metadata":{},"sourceType":"module"}