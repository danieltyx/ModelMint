{"version":3,"file":"ethereumjs-abi-utils.js","sourceRoot":"","sources":["../src/ethereumjs-abi-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint jsdoc/require-description: 0 */\n/* eslint jsdoc/require-returns: 0 */\n/* eslint jsdoc/match-description: 0 */\n/* eslint jsdoc/require-param-description: 0 */\n\nimport {\n  ToBufferInputTypes,\n  toBuffer,\n  setLengthRight,\n  setLengthLeft,\n  isHexPrefixed,\n  zeros,\n} from '@ethereumjs/util';\nimport BN from 'bn.js';\nimport { stripHexPrefix } from 'ethjs-util';\n\nimport { normalize } from './utils';\n\n//\n// Methods borrowed and somewhat adapted from ethereumjs-abi@0.6.8:\n// https://npmfs.com/package/ethereumjs-abi/0.6.8/lib/index.js\n//\n\n/**\n * Packs non-standard encoded values packed according to their respective type in types in a buffer.\n *\n * @param types - Array of types of each value to encode.\n * @param values - Array of values to encode.\n * @returns A buffer containing the packed values.\n */\nexport function solidityPack(types: string[], values: any[]): Buffer {\n  if (types.length !== values.length) {\n    throw new Error('Number of types are not matching the values');\n  }\n\n  const ret: Buffer[] = [];\n\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    ret.push(solidityHexValue(type, value, null));\n  }\n\n  return Buffer.concat(ret);\n}\n\n/**\n * Checks if a value is an array (represented as a string).\n *\n * @param type - The value to check whether it is an array.\n * @returns A boolean indicating whether the passed value is an array.\n */\nfunction isArray(type: string): boolean {\n  return type.endsWith(']');\n}\n\n/**\n * Parse array type for packing solidity values.\n *\n * @param type - A string that may be an array to parse.\n * @returns A parsed value from the array.\n */\nfunction parseTypeArray(type: string): 'dynamic' | number | null {\n  const tmp = type.match(/(.*)\\[(.*?)\\]$/u);\n  if (tmp) {\n    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10);\n  }\n  return null;\n}\n\n/**\n * Parse N from type<N>.\n *\n * @param type - Value to parse.\n * @returns Parsed value.\n */\nfunction parseTypeN(type: string): number {\n  const match = /^\\D+(\\d+)$/u.exec(type);\n  if (match === null) {\n    throw new Error(`Invalid parseTypeN input \"${type}\".`);\n  }\n  return parseInt(match[1], 10);\n}\n\n/**\n * Parse a number for determining a solidity hexvalue.\n *\n * @param arg - Number to parse.\n * @returns Parsed value.\n */\nexport function parseNumber(arg: string | number | BN): BN {\n  const type = typeof arg;\n  if (type === 'string') {\n    if (isHexPrefixed(arg as string)) {\n      return new BN(stripHexPrefix(arg), 16);\n    }\n    return new BN(arg, 10);\n  } else if (type === 'number') {\n    return new BN(arg);\n  } else if (\n    (arg && Object.prototype.hasOwnProperty.call(arg, 'toArray')) ||\n    BN.isBN(arg)\n  ) {\n    return arg as BN;\n  }\n  throw new Error('Argument is not a number');\n}\n\n/**\n * Get solidity hex value from type, value and bitsize inputs for packing these values in a buffer.\n *\n * @param type - The type of the value to encode.\n * @param value - The value to encode.\n * @param bitsize - The bitsize of the value to encode.\n * @returns The encoded soldity hex value.\n */\nfunction solidityHexValue(\n  type: string,\n  value: ToBufferInputTypes,\n  bitsize: number | null,\n): Buffer {\n  // pass in bitsize = null if use default bitsize\n  if (isArray(type)) {\n    const subType = type.replace(/\\[.*?\\]/u, '');\n    if (!isArray(subType)) {\n      const arraySize = parseTypeArray(type);\n      if (\n        arraySize !== 'dynamic' &&\n        arraySize !== 0 &&\n        arraySize !== null &&\n        (value as any[]).length > arraySize\n      ) {\n        throw new Error(`Elements exceed array size: ${arraySize}`);\n      }\n    }\n    const arrayValues = (value as number[]).map((v) =>\n      solidityHexValue(subType, v, 256),\n    );\n    return Buffer.concat(arrayValues);\n  } else if (type === 'bytes') {\n    return value as Buffer;\n  } else if (type === 'string') {\n    return Buffer.from(value as string, 'utf8');\n  } else if (type === 'bool') {\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    bitsize = bitsize || 8;\n    const padding = Array(bitsize / 4).join('0');\n    return Buffer.from(value ? `${padding}1` : `${padding}0`, 'hex');\n  } else if (type === 'address') {\n    let bytesize = 20;\n    if (bitsize) {\n      bytesize = bitsize / 8;\n    }\n    return setLengthLeft(toBuffer(value), bytesize);\n  } else if (type.startsWith('bytes')) {\n    const size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n\n    if (typeof value === 'number') {\n      value = normalize(value);\n    }\n    return setLengthRight(toBuffer(value), size);\n  } else if (type.startsWith('uint')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n\n    const num = parseNumber(value as number);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied uint exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    bitsize = bitsize || size;\n    return num.toArrayLike(Buffer, 'be', bitsize / 8);\n  } else if (type.startsWith('int')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n\n    const num = parseNumber(value as number);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied int exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    bitsize = bitsize || size;\n    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8);\n  }\n  // FIXME: support all other types\n  throw new Error(`Unsupported or invalid type: ${JSON.stringify(type)}`);\n}\n\n/**\n * Gets the correct solidity type name.\n *\n * @param name - The type name for which we want the corresponding solidity type name.\n * @returns The solidity type name for the input value.\n */\nfunction elementaryName(name: string): string {\n  if (name.startsWith('int[')) {\n    return `int256${name.slice(3)}`;\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return `uint256${name.slice(4)}`;\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return `fixed128x128${name.slice(5)}`;\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return `ufixed128x128${name.slice(6)}`;\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n  return name;\n}\n\n/**\n * @param types\n * @param values\n */\nexport function rawEncode(\n  types: string[],\n  values: (BN | Buffer | string | number | string[] | number[])[],\n): Buffer {\n  const output: Buffer[] = [];\n  const data: Buffer[] = [];\n\n  let headLength = 0;\n\n  types.forEach((type) => {\n    if (isArray(type)) {\n      const size: number | 'dynamic' | null = parseTypeArray(type);\n      // eslint-disable-next-line no-negated-condition\n      if (size !== 'dynamic' && size !== null) {\n        headLength += 32 * size;\n      } else {\n        headLength += 32;\n      }\n    } else {\n      headLength += 32;\n    }\n  });\n\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    const cur = encodeSingle(type, value);\n\n    // Use the head/tail method for storing dynamic data\n    if (isDynamic(type)) {\n      output.push(encodeSingle('uint256', headLength));\n      data.push(cur);\n      headLength += cur.length;\n    } else {\n      output.push(cur);\n    }\n  }\n\n  return Buffer.concat(output.concat(data));\n}\n\n// Encodes a single item (can be dynamic array)\n// @returns: Buffer\n/**\n * @param type\n * @param arg\n */\nfunction encodeSingle(\n  type: string,\n  arg: BN | Buffer | string | number | string[] | number[],\n): Buffer {\n  if (type === 'address') {\n    return encodeSingle('uint160', parseNumber(arg as string));\n  } else if (type === 'bool') {\n    return encodeSingle('uint8', arg ? 1 : 0);\n  } else if (type === 'string') {\n    return encodeSingle('bytes', Buffer.from(arg as string, 'utf8'));\n  } else if (isArray(type)) {\n    // this part handles fixed-length ([2]) and variable length ([]) arrays\n    // NOTE: we catch here all calls to arrays, that simplifies the rest\n    if (typeof (arg as any).length === 'undefined') {\n      throw new Error('Not an array?');\n    }\n    const size = parseTypeArray(type);\n    if (\n      size !== 'dynamic' &&\n      size !== 0 &&\n      size !== null &&\n      (arg as any).length > size\n    ) {\n      throw new Error(`Elements exceed array size: ${size}`);\n    }\n    const ret: Buffer[] = [];\n    type = type.slice(0, type.lastIndexOf('['));\n    if (typeof arg === 'string') {\n      arg = JSON.parse(arg);\n    }\n\n    // TODO: if this is array, should do for-of\n    for (const i in arg as Record<string, any>) {\n      if (Object.prototype.hasOwnProperty.call(arg, i)) {\n        ret.push(encodeSingle(type, arg[i]));\n      }\n    }\n\n    if (size === 'dynamic') {\n      const length = encodeSingle('uint256', (arg as any).length);\n      ret.unshift(length);\n    }\n    return Buffer.concat(ret);\n  } else if (type === 'bytes') {\n    arg = Buffer.from(arg as Buffer);\n\n    let ret = Buffer.concat([encodeSingle('uint256', arg.length), arg]);\n\n    if (arg.length % 32 !== 0) {\n      ret = Buffer.concat([ret, zeros(32 - (arg.length % 32))]);\n    }\n\n    return ret;\n  } else if (type.startsWith('bytes')) {\n    const size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n\n    // TODO: fix types here\n    const nArg = typeof arg === 'number' ? normalize(arg) : arg;\n    return setLengthRight(toBuffer(nArg as string), 32);\n  } else if (type.startsWith('uint')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n\n    const num = parseNumber(arg as string);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied uint exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    if (num.isNeg()) {\n      throw new Error('Supplied uint is negative');\n    }\n\n    return num.toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('int')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n\n    const num = parseNumber(arg as string);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied int exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    return num.toTwos(256).toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('ufixed')) {\n    const size = parseTypeNxM(type);\n\n    const num = parseNumber(arg as string);\n\n    if (num.isNeg()) {\n      throw new Error('Supplied ufixed is negative');\n    }\n\n    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))));\n  } else if (type.startsWith('fixed')) {\n    const size = parseTypeNxM(type);\n\n    return encodeSingle(\n      'int256',\n      parseNumber(arg as string).mul(new BN(2).pow(new BN(size[1]))),\n    );\n  }\n\n  throw new Error(`Unsupported or invalid type: ${JSON.stringify(type)}`);\n}\n\n// Is a type dynamic?\n/**\n * @param type\n */\nfunction isDynamic(type: string): boolean {\n  // FIXME: handle all types? I don't think anything is missing now\n  return (\n    type === 'string' || type === 'bytes' || parseTypeArray(type) === 'dynamic'\n  );\n}\n\n// Parse N,M from type<N>x<M>\n/**\n * @param type\n */\nfunction parseTypeNxM(type: string): [number, number] {\n  const match = /^\\D+(\\d+)x(\\d+)$/u.exec(type);\n  if (match === null || match.length < 1) {\n    throw new Error(`Invalid parseTypeNxM input \"${type}\".`);\n  }\n  return [parseInt(match[1], 10), parseInt(match[2], 10)];\n}\n"]}