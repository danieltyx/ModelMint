{"version":3,"file":"openloginUtils.cjs.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;ACNA,MAAM,oCAA4B;;;ACAI;AAE/B,MAAMC,QAAQ,GAAG,MAAcD,8BAAW,CAAC,EAAE,CAAC,CAACE,QAAQ,CAAC,KAAK,CAAC;;ACFrE,MAAM,8BAA4B;;;;ACE3B,MAAMC,iBAAiB,SAASC,GAAG,CAAC;EAAA;IAAA;IAAA,6CAChB,IAAIC,eAAe,EAAE;EAAA;EAE9CH,QAAQ,GAAW;IACjB,IAAI,CAACI,IAAI,GAAG,IAAI,CAACC,UAAU,CAACL,QAAQ,EAAE;IACtC,OAAO,KAAK,CAACA,QAAQ,CAACM,IAAI,CAAC,IAAI,CAAC;EAClC;AACF;;ACTA,MAAM,kCAA4B;;;ACAlC,MAAM,+BAA4B;;;ACAG;AACN;AAExB,MAAMG,SAAS,GAAGF,8BAAY;AAE9B,SAASG,QAAQ,CAACC,GAAW,EAAU;EAC5C,OAAOF,SAAS,CAACG,MAAM,CAACD,GAAG,CAAC;AAC9B;AAEO,SAASE,QAAQ,CAACF,GAAW,EAAU;EAC5C;EACA,OAAOF,SAAS,CAACK,MAAM,CAACH,GAAG,CAAC;AAC9B;AAEO,MAAMI,MAAM,GAAGP,2BAAS;AAIxB,SAASQ,YAAY,CAACC,MAAc,EAA2B;EACpE,OAAOC,IAAI,CAACC,KAAK,CAACV,SAAS,CAACK,MAAM,CAACG,MAAM,CAAC,CAAC;AAC7C;AAEO,SAASG,YAAY,CAACC,IAA6B,EAAU;EAClE,OAAOZ,SAAS,CAACG,MAAM,CAACM,IAAI,CAACI,SAAS,CAACD,IAAI,CAAC,CAAC;AAC/C;AAEO,SAASE,SAAS,CAACZ,GAAW,EAAU;EAC7C,IAAIa,KAAsB,GAAGb,GAAG;EAChC,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACc,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,IAAId,GAAG,CAACe,MAAM,KAAK,EAAE,EAAE;IAC5EF,KAAK,GAAGG,MAAM,CAACC,IAAI,CAACjB,GAAG,CAACc,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;EAC1C;EACA,MAAMI,IAAI,GAAI,KAAId,MAAM,CAAC,WAAW,CAAC,CAACe,MAAM,CAACN,KAAK,CAAC,CAACO,MAAM,CAAC,KAAK,CAAC,CAACC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAE,EAAC;EACrF,OAAOH,IAAI;AACb;;ACjC2B;AACL","sources":["webpack://@toruslabs/openlogin-utils/webpack/bootstrap","webpack://@toruslabs/openlogin-utils/webpack/runtime/compat get default export","webpack://@toruslabs/openlogin-utils/webpack/runtime/define property getters","webpack://@toruslabs/openlogin-utils/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/openlogin-utils/webpack/runtime/make namespace object","webpack://@toruslabs/openlogin-utils/external commonjs2 \"randombytes\"","webpack://@toruslabs/openlogin-utils/./src/randomId.ts","webpack://@toruslabs/openlogin-utils/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/openlogin-utils/./src/url.ts","webpack://@toruslabs/openlogin-utils/external commonjs2 \"base64url\"","webpack://@toruslabs/openlogin-utils/external commonjs2 \"keccak\"","webpack://@toruslabs/openlogin-utils/./src/utils.ts","webpack://@toruslabs/openlogin-utils/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"randombytes\");","import randombytes from \"randombytes\";\n\nexport const randomId = (): string => randombytes(32).toString(\"hex\");\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","import { HashParams } from \"./hashParams\";\n\nexport class URLWithHashParams extends URL {\n  hashParams: HashParams = new URLSearchParams();\n\n  toString(): string {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"base64url\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"keccak\");","import base64urlLib from \"base64url\";\nimport keccakLib from \"keccak\";\n\nexport const base64url = base64urlLib;\n\nexport function safebtoa(str: string): string {\n  return base64url.encode(str);\n}\n\nexport function safeatob(str: string): string {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\n\nexport const keccak = keccakLib;\n\nexport type BufferEncoding = \"ascii\" | \"utf8\" | \"utf-8\" | \"utf16le\" | \"ucs2\" | \"ucs-2\" | \"base64\" | \"latin1\" | \"binary\" | \"hex\";\n\nexport function base64toJSON(b64str: string): Record<string, unknown> {\n  return JSON.parse(base64url.decode(b64str));\n}\n\nexport function jsonToBase64(json: Record<string, unknown>): string {\n  return base64url.encode(JSON.stringify(json));\n}\n\nexport function keccak256(str: string): string {\n  let input: string | Buffer = str;\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n  const data = `0x${keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\")}`;\n  return data;\n}\n\nexport interface BaseLoginOptions {\n  /**\n   * If you need to send custom parameters to the Authorization Server,\n   * make sure to use the original parameter name.\n   */\n  [key: string]: unknown;\n  /**\n   * - `'page'`: displays the UI with a full page view\n   * - `'popup'`: displays the UI with a popup window\n   * - `'touch'`: displays the UI in a way that leverages a touch interface\n   * - `'wap'`: displays the UI with a \"feature phone\" type interface\n   */\n  display?: \"page\" | \"popup\" | \"touch\" | \"wap\" | string;\n  /**\n   * - `'none'`: do not prompt user for login or consent on re-authentication\n   * - `'login'`: prompt user for re-authentication\n   * - `'consent'`: prompt user for consent before processing request\n   * - `'select_account'`: prompt user to select an account\n   */\n  prompt?: \"none\" | \"login\" | \"consent\" | \"select_account\" | string;\n  /**\n   * Maximum allowable elapsed time (in seconds) since authentication.\n   * If the last time the user authenticated is greater than this value,\n   * the user must be re-authenticated.\n   */\n  max_age?: string | number;\n  /**\n   * The space-separated list of language tags, ordered by preference.\n   * For example: `'fr-CA fr en'`.\n   */\n  ui_locales?: string;\n  /**\n   * Previously issued ID Token.\n   */\n  id_token_hint?: string;\n  /**\n   * The user's email address or other identifier. When your app knows\n   * which user is trying to authenticate, you can provide this parameter\n   * to pre-fill the email box or select the right session for sign-in.\n   *\n   * This currently only affects the classic Lock experience.\n   */\n  login_hint?: string;\n  acr_values?: string;\n  /**\n   * The default scope to be used on authentication requests.\n   * The defaultScope defined in the Auth0Client is included\n   * along with this scope\n   */\n  scope?: string;\n  /**\n   * The default audience to be used for requesting API access.\n   */\n  audience?: string;\n  /**\n   * The name of the connection configured for your application.\n   * If null, it will redirect to the Auth0 Login Page and show\n   * the Login Widget.\n   */\n  connection?: string;\n}\n\nexport interface ExtraLoginOptions extends BaseLoginOptions {\n  /**\n   * Your Auth0 account domain such as `'example.auth0.com'`,\n   * `'example.eu.auth0.com'` or , `'example.mycompany.com'`\n   * (when using [custom domains](https://auth0.com/docs/custom-domains))\n   */\n  domain?: string;\n  /**\n   * The Client ID found on your Application settings page\n   */\n  client_id?: string;\n  /**\n   * The default URL where Auth0 will redirect your browser to with\n   * the authentication result. It must be whitelisted in\n   * the \"Allowed Callback URLs\" field in your Auth0 Application's\n   * settings. If not provided here, it should be provided in the other\n   * methods that provide authentication.\n   */\n  redirect_uri?: string;\n  /**\n   * The value in seconds used to account for clock skew in JWT expirations.\n   * Typically, this value is no more than a minute or two at maximum.\n   * Defaults to 60s.\n   */\n  leeway?: number;\n  /**\n   * The field in jwt token which maps to verifier id\n   */\n  verifierIdField?: string;\n  /**\n   * Whether the verifier id field is case sensitive\n   * @defaultValue true\n   */\n  isVerifierIdCaseSensitive?: boolean;\n}\n","export * from \"./randomId\";\nexport * from \"./url\";\nexport * from \"./utils\";\n"],"names":["randombytes","randomId","toString","URLWithHashParams","URL","URLSearchParams","hash","hashParams","call","base64urlLib","keccakLib","base64url","safebtoa","str","encode","safeatob","decode","keccak","base64toJSON","b64str","JSON","parse","jsonToBase64","json","stringify","keccak256","input","slice","length","Buffer","from","data","update","digest","padStart"],"sourceRoot":""}