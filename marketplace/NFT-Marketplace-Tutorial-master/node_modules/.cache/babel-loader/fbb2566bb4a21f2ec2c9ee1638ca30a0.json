{"ast":null,"code":"\"use strict\";\n\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n  constructor() {\n    this.formats = this.getDefaultFormats();\n  }\n\n  getDefaultFormats() {\n    const formats = {};\n    const address = this.address.bind(this);\n    const bigNumber = this.bigNumber.bind(this);\n    const blockTag = this.blockTag.bind(this);\n    const data = this.data.bind(this);\n    const hash = this.hash.bind(this);\n    const hex = this.hex.bind(this);\n    const number = this.number.bind(this);\n    const type = this.type.bind(this);\n\n    const strictData = v => {\n      return this.data(v, true);\n    };\n\n    formats.transaction = {\n      hash: hash,\n      type: type,\n      accessList: Formatter.allowNull(this.accessList.bind(this), null),\n      blockHash: Formatter.allowNull(hash, null),\n      blockNumber: Formatter.allowNull(number, null),\n      transactionIndex: Formatter.allowNull(number, null),\n      confirmations: Formatter.allowNull(number, null),\n      from: address,\n      // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n      // must be set\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      gasLimit: bigNumber,\n      to: Formatter.allowNull(address, null),\n      value: bigNumber,\n      nonce: number,\n      data: data,\n      r: Formatter.allowNull(this.uint256),\n      s: Formatter.allowNull(this.uint256),\n      v: Formatter.allowNull(number),\n      creates: Formatter.allowNull(address, null),\n      raw: Formatter.allowNull(data)\n    };\n    formats.transactionRequest = {\n      from: Formatter.allowNull(address),\n      nonce: Formatter.allowNull(number),\n      gasLimit: Formatter.allowNull(bigNumber),\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      to: Formatter.allowNull(address),\n      value: Formatter.allowNull(bigNumber),\n      data: Formatter.allowNull(strictData),\n      type: Formatter.allowNull(number),\n      accessList: Formatter.allowNull(this.accessList.bind(this), null)\n    };\n    formats.receiptLog = {\n      transactionIndex: number,\n      blockNumber: number,\n      transactionHash: hash,\n      address: address,\n      topics: Formatter.arrayOf(hash),\n      data: data,\n      logIndex: number,\n      blockHash: hash\n    };\n    formats.receipt = {\n      to: Formatter.allowNull(this.address, null),\n      from: Formatter.allowNull(this.address, null),\n      contractAddress: Formatter.allowNull(address, null),\n      transactionIndex: number,\n      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n      root: Formatter.allowNull(hex),\n      gasUsed: bigNumber,\n      logsBloom: Formatter.allowNull(data),\n      blockHash: hash,\n      transactionHash: hash,\n      logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n      blockNumber: number,\n      confirmations: Formatter.allowNull(number, null),\n      cumulativeGasUsed: bigNumber,\n      effectiveGasPrice: Formatter.allowNull(bigNumber),\n      status: Formatter.allowNull(number),\n      type: type\n    };\n    formats.block = {\n      hash: Formatter.allowNull(hash),\n      parentHash: hash,\n      number: number,\n      timestamp: number,\n      nonce: Formatter.allowNull(hex),\n      difficulty: this.difficulty.bind(this),\n      gasLimit: bigNumber,\n      gasUsed: bigNumber,\n      miner: Formatter.allowNull(address),\n      extraData: data,\n      transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n      baseFeePerGas: Formatter.allowNull(bigNumber)\n    };\n    formats.blockWithTransactions = shallowCopy(formats.block);\n    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n    formats.filter = {\n      fromBlock: Formatter.allowNull(blockTag, undefined),\n      toBlock: Formatter.allowNull(blockTag, undefined),\n      blockHash: Formatter.allowNull(hash, undefined),\n      address: Formatter.allowNull(address, undefined),\n      topics: Formatter.allowNull(this.topics.bind(this), undefined)\n    };\n    formats.filterLog = {\n      blockNumber: Formatter.allowNull(number),\n      blockHash: Formatter.allowNull(hash),\n      transactionIndex: number,\n      removed: Formatter.allowNull(this.boolean.bind(this)),\n      address: address,\n      data: Formatter.allowFalsish(data, \"0x\"),\n      topics: Formatter.arrayOf(hash),\n      transactionHash: hash,\n      logIndex: number\n    };\n    return formats;\n  }\n\n  accessList(accessList) {\n    return accessListify(accessList || []);\n  } // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n  // Strict! Used on input.\n\n\n  number(number) {\n    if (number === \"0x\") {\n      return 0;\n    }\n\n    return BigNumber.from(number).toNumber();\n  }\n\n  type(number) {\n    if (number === \"0x\" || number == null) {\n      return 0;\n    }\n\n    return BigNumber.from(number).toNumber();\n  } // Strict! Used on input.\n\n\n  bigNumber(value) {\n    return BigNumber.from(value);\n  } // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n\n\n  boolean(value) {\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      value = value.toLowerCase();\n\n      if (value === \"true\") {\n        return true;\n      }\n\n      if (value === \"false\") {\n        return false;\n      }\n    }\n\n    throw new Error(\"invalid boolean - \" + value);\n  }\n\n  hex(value, strict) {\n    if (typeof value === \"string\") {\n      if (!strict && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n\n      if (isHexString(value)) {\n        return value.toLowerCase();\n      }\n    }\n\n    return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n  }\n\n  data(value, strict) {\n    const result = this.hex(value, strict);\n\n    if (result.length % 2 !== 0) {\n      throw new Error(\"invalid data; odd-length - \" + value);\n    }\n\n    return result;\n  } // Requires an address\n  // Strict! Used on input.\n\n\n  address(value) {\n    return getAddress(value);\n  }\n\n  callAddress(value) {\n    if (!isHexString(value, 32)) {\n      return null;\n    }\n\n    const address = getAddress(hexDataSlice(value, 12));\n    return address === AddressZero ? null : address;\n  }\n\n  contractAddress(value) {\n    return getContractAddress(value);\n  } // Strict! Used on input.\n\n\n  blockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n\n    if (blockTag === \"earliest\") {\n      return \"0x0\";\n    }\n\n    if (blockTag === \"latest\" || blockTag === \"pending\") {\n      return blockTag;\n    }\n\n    if (typeof blockTag === \"number\" || isHexString(blockTag)) {\n      return hexValue(blockTag);\n    }\n\n    throw new Error(\"invalid blockTag\");\n  } // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n\n\n  hash(value, strict) {\n    const result = this.hex(value, strict);\n\n    if (hexDataLength(result) !== 32) {\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    return result;\n  } // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\n\n  difficulty(value) {\n    if (value == null) {\n      return null;\n    }\n\n    const v = BigNumber.from(value);\n\n    try {\n      return v.toNumber();\n    } catch (error) {}\n\n    return null;\n  }\n\n  uint256(value) {\n    if (!isHexString(value)) {\n      throw new Error(\"invalid uint256\");\n    }\n\n    return hexZeroPad(value, 32);\n  }\n\n  _block(value, format) {\n    if (value.author != null && value.miner == null) {\n      value.miner = value.author;\n    } // The difficulty may need to come from _difficulty in recursed blocks\n\n\n    const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n    const result = Formatter.check(format, value);\n    result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);\n    return result;\n  }\n\n  block(value) {\n    return this._block(value, this.formats.block);\n  }\n\n  blockWithTransactions(value) {\n    return this._block(value, this.formats.blockWithTransactions);\n  } // Strict! Used on input.\n\n\n  transactionRequest(value) {\n    return Formatter.check(this.formats.transactionRequest, value);\n  }\n\n  transactionResponse(transaction) {\n    // Rename gas to gasLimit\n    if (transaction.gas != null && transaction.gasLimit == null) {\n      transaction.gasLimit = transaction.gas;\n    } // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n\n\n    if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n      transaction.to = \"0x0000000000000000000000000000000000000000\";\n    } // Rename input to data\n\n\n    if (transaction.input != null && transaction.data == null) {\n      transaction.data = transaction.input;\n    } // If to and creates are empty, populate the creates from the transaction\n\n\n    if (transaction.to == null && transaction.creates == null) {\n      transaction.creates = this.contractAddress(transaction);\n    }\n\n    if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n      transaction.accessList = [];\n    }\n\n    const result = Formatter.check(this.formats.transaction, transaction);\n\n    if (transaction.chainId != null) {\n      let chainId = transaction.chainId;\n\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n\n      result.chainId = chainId;\n    } else {\n      let chainId = transaction.networkId; // geth-etc returns chainId\n\n      if (chainId == null && result.v == null) {\n        chainId = transaction.chainId;\n      }\n\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n\n      if (typeof chainId !== \"number\" && result.v != null) {\n        chainId = (result.v - 35) / 2;\n\n        if (chainId < 0) {\n          chainId = 0;\n        }\n\n        chainId = parseInt(chainId);\n      }\n\n      if (typeof chainId !== \"number\") {\n        chainId = 0;\n      }\n\n      result.chainId = chainId;\n    } // 0x0000... should actually be null\n\n\n    if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n      result.blockHash = null;\n    }\n\n    return result;\n  }\n\n  transaction(value) {\n    return parseTransaction(value);\n  }\n\n  receiptLog(value) {\n    return Formatter.check(this.formats.receiptLog, value);\n  }\n\n  receipt(value) {\n    const result = Formatter.check(this.formats.receipt, value); // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n\n    if (result.root != null) {\n      if (result.root.length <= 4) {\n        // Could be 0x00, 0x0, 0x01 or 0x1\n        const value = BigNumber.from(result.root).toNumber();\n\n        if (value === 0 || value === 1) {\n          // Make sure if both are specified, they match\n          if (result.status != null && result.status !== value) {\n            logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n              root: result.root,\n              status: result.status\n            });\n          }\n\n          result.status = value;\n          delete result.root;\n        } else {\n          logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n        }\n      } else if (result.root.length !== 66) {\n        // Must be a valid bytes32\n        logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n      }\n    }\n\n    if (result.status != null) {\n      result.byzantium = true;\n    }\n\n    return result;\n  }\n\n  topics(value) {\n    if (Array.isArray(value)) {\n      return value.map(v => this.topics(v));\n    } else if (value != null) {\n      return this.hash(value, true);\n    }\n\n    return null;\n  }\n\n  filter(value) {\n    return Formatter.check(this.formats.filter, value);\n  }\n\n  filterLog(value) {\n    return Formatter.check(this.formats.filterLog, value);\n  }\n\n  static check(format, object) {\n    const result = {};\n\n    for (const key in format) {\n      try {\n        const value = format[key](object[key]);\n\n        if (value !== undefined) {\n          result[key] = value;\n        }\n      } catch (error) {\n        error.checkKey = key;\n        error.checkValue = object[key];\n        throw error;\n      }\n    }\n\n    return result;\n  } // if value is null-ish, nullValue is returned\n\n\n  static allowNull(format, nullValue) {\n    return function (value) {\n      if (value == null) {\n        return nullValue;\n      }\n\n      return format(value);\n    };\n  } // If value is false-ish, replaceValue is returned\n\n\n  static allowFalsish(format, replaceValue) {\n    return function (value) {\n      if (!value) {\n        return replaceValue;\n      }\n\n      return format(value);\n    };\n  } // Requires an Array satisfying check\n\n\n  static arrayOf(format) {\n    return function (array) {\n      if (!Array.isArray(array)) {\n        throw new Error(\"not an array\");\n      }\n\n      const result = [];\n      array.forEach(function (value) {\n        result.push(format(value));\n      });\n      return result;\n    };\n  }\n\n}\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n} // Show the throttle message only once\n\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"mappings":"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","names":["getAddress","getContractAddress","BigNumber","hexDataLength","hexDataSlice","hexValue","hexZeroPad","isHexString","AddressZero","shallowCopy","accessListify","parse","parseTransaction","Logger","version","logger","Formatter","constructor","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","type","strictData","v","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","value","nonce","r","uint256","s","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","toNumber","toLowerCase","Error","strict","substring","throwArgumentError","result","length","callAddress","error","_block","format","author","_difficulty","check","gas","isZero","input","chainId","networkId","parseInt","replace","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","push","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/providers/src.ts/formatter.ts"],"sourcesContent":["\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n"]},"metadata":{},"sourceType":"module"}