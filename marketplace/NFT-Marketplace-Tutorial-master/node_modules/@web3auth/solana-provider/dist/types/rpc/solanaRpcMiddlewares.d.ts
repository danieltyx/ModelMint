import { JRPCMiddleware, JRPCRequest } from "@toruslabs/openlogin-jrpc";
import { TransactionOrVersionedTransaction } from "../interface";
export interface IProviderHandlers {
    requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;
    getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;
    getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;
    signTransaction: (req: JRPCRequest<{
        message: TransactionOrVersionedTransaction;
    }>) => Promise<TransactionOrVersionedTransaction>;
    signAllTransactions: (req: JRPCRequest<{
        message: TransactionOrVersionedTransaction[];
    }>) => Promise<TransactionOrVersionedTransaction[]>;
    signAndSendTransaction: (req: JRPCRequest<{
        message: TransactionOrVersionedTransaction;
    }>) => Promise<{
        signature: string;
    }>;
    getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;
    signMessage: (req: JRPCRequest<{
        message: Uint8Array;
        display?: string;
    }>) => Promise<Uint8Array>;
}
export declare function createGetAccountsMiddleware({ getAccounts }: {
    getAccounts: IProviderHandlers["getAccounts"];
}): JRPCMiddleware<unknown, unknown>;
export declare function createRequestAccountsMiddleware({ requestAccounts, }: {
    requestAccounts: IProviderHandlers["requestAccounts"];
}): JRPCMiddleware<unknown, unknown>;
export declare function createGenericJRPCMiddleware<T, U>(targetMethod: string, handler: (req: JRPCRequest<T>) => Promise<U>): JRPCMiddleware<unknown, unknown>;
export declare function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown>;
export interface AddSolanaChainParameter {
    chainId: string;
    chainName: string;
    nativeCurrency: {
        name: string;
        symbol: string;
        decimals: 18;
    };
    rpcUrls: string[];
    blockExplorerUrls?: string[];
}
export interface IChainSwitchHandlers {
    addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;
    switchSolanaChain: (req: JRPCRequest<{
        chainId: string;
    }>) => Promise<void>;
}
export declare function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown>;
export interface IAccountHandlers {
    updatePrivatekey: (req: JRPCRequest<{
        privateKey: string;
    }>) => Promise<void>;
}
export declare function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown>;
