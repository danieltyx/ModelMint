{"version":3,"file":"torusEvmAdapter.cjs.js","mappings":"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","sources":["webpack://@web3auth/torus-evm-adapter/webpack/bootstrap","webpack://@web3auth/torus-evm-adapter/webpack/runtime/compat get default export","webpack://@web3auth/torus-evm-adapter/webpack/runtime/define property getters","webpack://@web3auth/torus-evm-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/torus-evm-adapter/webpack/runtime/make namespace object","webpack://@web3auth/torus-evm-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/torus-evm-adapter/external commonjs2 \"@toruslabs/torus-embed\"","webpack://@web3auth/torus-evm-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/torus-evm-adapter/external commonjs2 \"@web3auth/base-evm-adapter\"","webpack://@web3auth/torus-evm-adapter/./src/torusWalletAdapter.ts","webpack://@web3auth/torus-evm-adapter/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/torus-embed\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-evm-adapter\");","import Torus, { LoginParams, NetworkInterface, TorusCtorArgs, TorusParams } from \"@toruslabs/torus-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\nexport interface TorusWalletOptions extends BaseAdapterSettings {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: LoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n}\n\nexport class TorusWalletAdapter extends BaseEvmAdapter<never> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_EVM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: LoginParams = {};\n\n  constructor(params: TorusWalletOptions = {}) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.torusInstance) {\n      return this.torusInstance.provider as unknown as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n\n    const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n    const network: NetworkInterface = {\n      chainId: Number.parseInt(chainId, 16),\n      host: rpcTarget,\n      blockExplorer,\n      networkName: displayName,\n      ticker,\n      tickerName,\n      // decimals: decimals || 18,\n    };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus evm adapter init\");\n    await this.torusInstance.init({\n      showTorusButton: false,\n      ...this.initParams,\n      network,\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      log.debug(\"initializing torus evm adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_EVM });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const { chainId } = this.torusInstance.provider;\n      if (chainId && parseInt(chainId) !== parseInt((this.chainConfig as CustomChainConfig).chainId, 16)) {\n        const { chainId: _chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n        const network: NetworkInterface = {\n          chainId: Number.parseInt(_chainId, 16),\n          host: rpcTarget,\n          blockExplorer,\n          networkName: displayName,\n          tickerName,\n          ticker,\n        };\n        // in some cases when user manually switches chain and relogin then adapter will not connect to initially passed\n        // chainConfig but will connect to the one that user switched to.\n        // So here trying to switch network to the one that was initially passed in chainConfig.\n        await this.torusInstance.setProvider({\n          ...network,\n        });\n        const updatedChainID = await this.torusInstance.ethereum.request<string>({ method: \"eth_chainId\" });\n        if (updatedChainID && parseInt(updatedChainID) !== parseInt((this.chainConfig as CustomChainConfig).chainId, 16)) {\n          throw WalletInitializationError.fromCode(\n            5000,\n            `Not connected to correct chainId. Expected: ${(this.chainConfig as CustomChainConfig).chainId}, Current: ${updatedChainID}`\n          );\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_EVM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(init);\n    // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_addEthereumChain\",\n    //   params: [\n    //     {\n    //       chainId: chainConfig.chainId,\n    //       chainName: chainConfig.displayName,\n    //       rpcUrls: [chainConfig.rpcTarget],\n    //       blockExplorerUrls: [chainConfig.blockExplorer],\n    //       nativeCurrency: {\n    //         name: chainConfig.tickerName,\n    //         symbol: chainConfig.ticker,\n    //         decimals: chainConfig.decimals || 18,\n    //       },\n    //     },\n    //   ],\n    // });\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_switchEthereumChain\",\n    //   params: [{ chainId: params.chainId }],\n    // });\n    const chainConfig = this.getChainConfig(params.chainId) as CustomChainConfig;\n    await this.torusInstance?.setProvider({\n      host: chainConfig.rpcTarget,\n      chainId: parseInt(chainConfig.chainId, 16),\n      networkName: chainConfig.displayName,\n      blockExplorer: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n","export * from \"./torusWalletAdapter\";\n"],"names":["Torus","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","CHAIN_NAMESPACES","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","Web3AuthError","BaseEvmAdapter","TorusWalletAdapter","constructor","params","arguments","length","undefined","_defineProperty","TORUS_EVM","EIP155","EXTERNAL","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","provider","status","CONNECTED","torusInstance","_","Error","init","options","checkInitializationRequirements","chainId","blockExplorer","displayName","rpcTarget","ticker","tickerName","chainConfig","network","Number","parseInt","host","networkName","debug","_objectSpread","showTorusButton","READY","emit","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","notReady","CONNECTING","adapter","login","_chainId","setProvider","updatedChainID","ethereum","request","method","fromCode","reconnected","connectionError","disconnect","cleanup","disconnectSession","logout","hideTorusButton","getUserInfo","notConnectedError","userInfo","addChain","checkAddChainRequirements","addChainConfig","switchChain","_this$torusInstance","checkSwitchChainRequirements","getChainConfig","setAdapterSettings"],"sourceRoot":""}