{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction isAccount(value) {\n  return value != null && isHexString(value.privateKey, 32) && value.address != null;\n}\n\nfunction hasMnemonic(value) {\n  const mnemonic = value.mnemonic;\n  return mnemonic && mnemonic.phrase;\n}\n\nexport class Wallet extends Signer {\n  constructor(privateKey, provider) {\n    super();\n\n    if (isAccount(privateKey)) {\n      const signingKey = new SigningKey(privateKey.privateKey);\n      defineReadOnly(this, \"_signingKey\", () => signingKey);\n      defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n      if (this.address !== getAddress(privateKey.address)) {\n        logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n      }\n\n      if (hasMnemonic(privateKey)) {\n        const srcMnemonic = privateKey.mnemonic;\n        defineReadOnly(this, \"_mnemonic\", () => ({\n          phrase: srcMnemonic.phrase,\n          path: srcMnemonic.path || defaultPath,\n          locale: srcMnemonic.locale || \"en\"\n        }));\n        const mnemonic = this.mnemonic;\n        const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n\n        if (computeAddress(node.privateKey) !== this.address) {\n          logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n        }\n      } else {\n        defineReadOnly(this, \"_mnemonic\", () => null);\n      }\n    } else {\n      if (SigningKey.isSigningKey(privateKey)) {\n        /* istanbul ignore if */\n        if (privateKey.curve !== \"secp256k1\") {\n          logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n        }\n\n        defineReadOnly(this, \"_signingKey\", () => privateKey);\n      } else {\n        // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n        if (typeof privateKey === \"string\") {\n          if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n            privateKey = \"0x\" + privateKey;\n          }\n        }\n\n        const signingKey = new SigningKey(privateKey);\n        defineReadOnly(this, \"_signingKey\", () => signingKey);\n      }\n\n      defineReadOnly(this, \"_mnemonic\", () => null);\n      defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    }\n    /* istanbul ignore if */\n\n\n    if (provider && !Provider.isProvider(provider)) {\n      logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n    }\n\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n\n  get mnemonic() {\n    return this._mnemonic();\n  }\n\n  get privateKey() {\n    return this._signingKey().privateKey;\n  }\n\n  get publicKey() {\n    return this._signingKey().publicKey;\n  }\n\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n\n  connect(provider) {\n    return new Wallet(this, provider);\n  }\n\n  signTransaction(transaction) {\n    return resolveProperties(transaction).then(tx => {\n      if (tx.from != null) {\n        if (getAddress(tx.from) !== this.address) {\n          logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n        }\n\n        delete tx.from;\n      }\n\n      const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n\n      return serialize(tx, signature);\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n    });\n  }\n\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        if (this.provider == null) {\n          logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\",\n            value: name\n          });\n        }\n\n        return this.provider.resolveName(name);\n      });\n      return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n    });\n  }\n\n  encrypt(password, options, progressCallback) {\n    if (typeof options === \"function\" && !progressCallback) {\n      progressCallback = options;\n      options = {};\n    }\n\n    if (progressCallback && typeof progressCallback !== \"function\") {\n      throw new Error(\"invalid callback\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    return encryptKeystore(this, password, options, progressCallback);\n  }\n  /**\n   *  Static methods to create Wallet instances.\n   */\n\n\n  static createRandom(options) {\n    let entropy = randomBytes(16);\n\n    if (!options) {\n      options = {};\n    }\n\n    if (options.extraEntropy) {\n      entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n    }\n\n    const mnemonic = entropyToMnemonic(entropy, options.locale);\n    return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n  }\n\n  static fromEncryptedJson(json, password, progressCallback) {\n    return decryptJsonWallet(json, password, progressCallback).then(account => {\n      return new Wallet(account);\n    });\n  }\n\n  static fromEncryptedJsonSync(json, password) {\n    return new Wallet(decryptJsonWalletSync(json, password));\n  }\n\n  static fromMnemonic(mnemonic, path, wordlist) {\n    if (!path) {\n      path = defaultPath;\n    }\n\n    return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n  }\n\n}\nexport function verifyMessage(message, signature) {\n  return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"mappings":"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","names":["getAddress","Provider","Signer","arrayify","concat","hexDataSlice","isHexString","joinSignature","hashMessage","_TypedDataEncoder","defaultPath","HDNode","entropyToMnemonic","keccak256","defineReadOnly","resolveProperties","randomBytes","SigningKey","decryptJsonWallet","decryptJsonWalletSync","encryptKeystore","computeAddress","recoverAddress","serialize","Logger","version","logger","isAccount","value","privateKey","address","hasMnemonic","mnemonic","phrase","Wallet","constructor","provider","signingKey","publicKey","throwArgumentError","srcMnemonic","path","locale","node","fromMnemonic","derivePath","isSigningKey","curve","match","length","isProvider","_mnemonic","_signingKey","Promise","resolve","connect","signTransaction","transaction","then","tx","from","signature","signDigest","signMessage","message","_signTypedData","domain","types","populated","resolveNames","name","throwError","errors","UNSUPPORTED_OPERATION","operation","resolveName","hash","encrypt","password","options","progressCallback","Error","createRandom","entropy","extraEntropy","fromEncryptedJson","json","account","fromEncryptedJsonSync","wordlist","verifyMessage","verifyTypedData"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/wallet/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider, TransactionRequest } from \"@ethersproject/abstract-provider\";\nimport { ExternallyOwnedAccount, Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { arrayify, Bytes, BytesLike, concat, hexDataSlice, isHexString, joinSignature, SignatureLike } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic, Mnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore, ProgressCallback } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize, UnsignedTransaction } from \"@ethersproject/transactions\";\nimport { Wordlist } from \"@ethersproject/wordlists\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction isAccount(value: any): value is ExternallyOwnedAccount {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\n\nfunction hasMnemonic(value: any): value is { mnemonic: Mnemonic } {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\n\nexport class Wallet extends Signer implements ExternallyOwnedAccount, TypedDataSigner {\n\n    readonly address: string;\n    readonly provider: Provider;\n\n    // Wrapping the _signingKey and _mnemonic in a getter function prevents\n    // leaking the private key in console.log; still, be careful! :)\n    readonly _signingKey: () => SigningKey;\n    readonly _mnemonic: () => Mnemonic;\n\n    constructor(privateKey: BytesLike | ExternallyOwnedAccount | SigningKey, provider?: Provider) {\n        super();\n\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => (\n                    {\n                        phrase: srcMnemonic.phrase,\n                        path: srcMnemonic.path || defaultPath,\n                        locale: srcMnemonic.locale || \"en\"\n                    }\n                ));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            } else {\n                defineReadOnly(this, \"_mnemonic\", (): Mnemonic => null);\n            }\n\n\n        } else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => (<SigningKey>privateKey));\n\n            } else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof(privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n\n            defineReadOnly(this, \"_mnemonic\", (): Mnemonic => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n\n    get mnemonic(): Mnemonic { return this._mnemonic(); }\n    get privateKey(): string { return this._signingKey().privateKey; }\n    get publicKey(): string { return this._signingKey().publicKey; }\n\n    getAddress(): Promise<string> {\n        return Promise.resolve(this.address);\n    }\n\n    connect(provider: Provider): Wallet {\n        return new Wallet(this, provider);\n    }\n\n    signTransaction(transaction: TransactionRequest): Promise<string> {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n\n            const signature = this._signingKey().signDigest(keccak256(serialize(<UnsignedTransaction>tx)));\n            return serialize(<UnsignedTransaction>tx, signature);\n        });\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            if (this.provider == null) {\n                logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName\",\n                    value: name\n                });\n            }\n            return this.provider.resolveName(name);\n        });\n\n        return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n    }\n\n    encrypt(password: Bytes | string, options?: any, progressCallback?: ProgressCallback): Promise<string> {\n        if (typeof(options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n\n        if (progressCallback && typeof(progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n\n        if (!options) { options = {}; }\n\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n\n\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options?: any): Wallet {\n        let entropy: Uint8Array = randomBytes(16);\n\n        if (!options) { options = { }; }\n\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([ entropy, options.extraEntropy ])), 0, 16));\n        }\n\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n\n    static fromEncryptedJson(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<Wallet> {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n\n    static fromEncryptedJsonSync(json: string, password: Bytes | string): Wallet {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n\n    static fromMnemonic(mnemonic: string, path?: string, wordlist?: Wordlist): Wallet {\n        if (!path) { path = defaultPath; }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\n\nexport function verifyMessage(message: Bytes | string, signature: SignatureLike): string {\n    return recoverAddress(hashMessage(message), signature);\n}\n\nexport function verifyTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, signature: SignatureLike): string {\n    return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}\n"]},"metadata":{},"sourceType":"module"}