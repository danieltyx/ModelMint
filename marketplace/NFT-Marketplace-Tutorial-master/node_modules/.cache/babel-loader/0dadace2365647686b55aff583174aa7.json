{"ast":null,"code":"import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n\n    if (this._pendingBatch == null) {\n      this._pendingBatch = [];\n    }\n\n    const inflightRequest = {\n      request,\n      resolve: null,\n      reject: null\n    };\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this._pendingBatch.push(inflightRequest);\n\n    if (!this._pendingBatchAggregator) {\n      // Schedule batch for next event loop + short duration\n      this._pendingBatchAggregator = setTimeout(() => {\n        // Get teh current batch and clear it, so new requests\n        // go into the next batch\n        const batch = this._pendingBatch;\n        this._pendingBatch = null;\n        this._pendingBatchAggregator = null; // Get the request as an array of requests\n\n        const request = batch.map(inflight => inflight.request);\n        this.emit(\"debug\", {\n          action: \"requestBatch\",\n          request: deepCopy(request),\n          provider: this\n        });\n        return fetchJson(this.connection, JSON.stringify(request)).then(result => {\n          this.emit(\"debug\", {\n            action: \"response\",\n            request: request,\n            response: result,\n            provider: this\n          }); // For each result, feed it to the correct Promise, depending\n          // on whether it was a success or error\n\n          batch.forEach((inflightRequest, index) => {\n            const payload = result[index];\n\n            if (payload.error) {\n              const error = new Error(payload.error.message);\n              error.code = payload.error.code;\n              error.data = payload.error.data;\n              inflightRequest.reject(error);\n            } else {\n              inflightRequest.resolve(payload.result);\n            }\n          });\n        }, error => {\n          this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: request,\n            provider: this\n          });\n          batch.forEach(inflightRequest => {\n            inflightRequest.reject(error);\n          });\n        });\n      }, 10);\n    }\n\n    return promise;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["deepCopy","fetchJson","JsonRpcProvider","JsonRpcBatchProvider","send","method","params","request","id","_nextId","jsonrpc","_pendingBatch","inflightRequest","resolve","reject","promise","Promise","push","_pendingBatchAggregator","setTimeout","batch","map","inflight","emit","action","provider","connection","JSON","stringify","then","result","response","forEach","index","payload","error","Error","message","code","data"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/providers/src.ts/json-rpc-batch-provider.ts"],"sourcesContent":["\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}