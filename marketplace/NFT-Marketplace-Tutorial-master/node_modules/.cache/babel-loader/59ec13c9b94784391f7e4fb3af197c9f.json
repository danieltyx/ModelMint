{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\n\nfunction staller(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\n\nfunction bodyify(value, type) {\n  if (value == null) {\n    return null;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  if (isBytesLike(value)) {\n    if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n      try {\n        return toUtf8String(value);\n      } catch (error) {}\n\n      ;\n    }\n\n    return hexlify(value);\n  }\n\n  return value;\n} // This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\n\n\nexport function _fetchData(connection, body, processFunc) {\n  // How many times to retry in the event of a throttle\n  const attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n  logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n  const throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n  const throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n  logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n  const errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n  const headers = {};\n  let url = null; // @TODO: Allow ConnectionInfo to override some of these values\n\n  const options = {\n    method: \"GET\"\n  };\n  let allow304 = false;\n  let timeout = 2 * 60 * 1000;\n\n  if (typeof connection === \"string\") {\n    url = connection;\n  } else if (typeof connection === \"object\") {\n    if (connection == null || connection.url == null) {\n      logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n    }\n\n    url = connection.url;\n\n    if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n      timeout = connection.timeout;\n    }\n\n    if (connection.headers) {\n      for (const key in connection.headers) {\n        headers[key.toLowerCase()] = {\n          key: key,\n          value: String(connection.headers[key])\n        };\n\n        if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n          allow304 = true;\n        }\n      }\n    }\n\n    options.allowGzip = !!connection.allowGzip;\n\n    if (connection.user != null && connection.password != null) {\n      if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n        logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"url\",\n          url: url,\n          user: connection.user,\n          password: \"[REDACTED]\"\n        });\n      }\n\n      const authorization = connection.user + \":\" + connection.password;\n      headers[\"authorization\"] = {\n        key: \"Authorization\",\n        value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n      };\n    }\n\n    if (connection.skipFetchSetup != null) {\n      options.skipFetchSetup = !!connection.skipFetchSetup;\n    }\n  }\n\n  const reData = new RegExp(\"^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$\", \"i\");\n  const dataMatch = url ? url.match(reData) : null;\n\n  if (dataMatch) {\n    try {\n      const response = {\n        statusCode: 200,\n        statusMessage: \"OK\",\n        headers: {\n          \"content-type\": dataMatch[1]\n        },\n        body: base64Decode(dataMatch[2])\n      };\n      let result = response.body;\n\n      if (processFunc) {\n        result = processFunc(response.body, response);\n      }\n\n      return Promise.resolve(result);\n    } catch (error) {\n      logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n        body: bodyify(dataMatch[1], dataMatch[2]),\n        error: error,\n        requestBody: null,\n        requestMethod: \"GET\",\n        url: url\n      });\n    }\n  }\n\n  if (body) {\n    options.method = \"POST\";\n    options.body = body;\n\n    if (headers[\"content-type\"] == null) {\n      headers[\"content-type\"] = {\n        key: \"Content-Type\",\n        value: \"application/octet-stream\"\n      };\n    }\n\n    if (headers[\"content-length\"] == null) {\n      headers[\"content-length\"] = {\n        key: \"Content-Length\",\n        value: String(body.length)\n      };\n    }\n  }\n\n  const flatHeaders = {};\n  Object.keys(headers).forEach(key => {\n    const header = headers[key];\n    flatHeaders[header.key] = header.value;\n  });\n  options.headers = flatHeaders;\n\n  const runningTimeout = function () {\n    let timer = null;\n    const promise = new Promise(function (resolve, reject) {\n      if (timeout) {\n        timer = setTimeout(() => {\n          if (timer == null) {\n            return;\n          }\n\n          timer = null;\n          reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            timeout: timeout,\n            url: url\n          }));\n        }, timeout);\n      }\n    });\n\n    const cancel = function () {\n      if (timer == null) {\n        return;\n      }\n\n      clearTimeout(timer);\n      timer = null;\n    };\n\n    return {\n      promise,\n      cancel\n    };\n  }();\n\n  const runningFetch = function () {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (let attempt = 0; attempt < attemptLimit; attempt++) {\n        let response = null;\n\n        try {\n          response = yield getUrl(url, options);\n\n          if (attempt < attemptLimit) {\n            if (response.statusCode === 301 || response.statusCode === 302) {\n              // Redirection; for now we only support absolute locataions\n              const location = response.headers.location || \"\";\n\n              if (options.method === \"GET\" && location.match(/^https:/)) {\n                url = response.headers.location;\n                continue;\n              }\n            } else if (response.statusCode === 429) {\n              // Exponential back-off throttling\n              let tryAgain = true;\n\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n\n              if (tryAgain) {\n                let stall = 0;\n                const retryAfter = response.headers[\"retry-after\"];\n\n                if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                  stall = parseInt(retryAfter) * 1000;\n                } else {\n                  stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                } //console.log(\"Stalling 429\");\n\n\n                yield staller(stall);\n                continue;\n              }\n            }\n          }\n        } catch (error) {\n          response = error.response;\n\n          if (response == null) {\n            runningTimeout.cancel();\n            logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              serverError: error,\n              url: url\n            });\n          }\n        }\n\n        let body = response.body;\n\n        if (allow304 && response.statusCode === 304) {\n          body = null;\n        } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n          runningTimeout.cancel();\n          logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n            status: response.statusCode,\n            headers: response.headers,\n            body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n          });\n        }\n\n        if (processFunc) {\n          try {\n            const result = yield processFunc(body, response);\n            runningTimeout.cancel();\n            return result;\n          } catch (error) {\n            // Allow the processFunc to trigger a throttle\n            if (error.throttleRetry && attempt < attemptLimit) {\n              let tryAgain = true;\n\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n\n              if (tryAgain) {\n                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt))); //console.log(\"Stalling callback\");\n\n                yield staller(timeout);\n                continue;\n              }\n            }\n\n            runningTimeout.cancel();\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n              body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n              error: error,\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              url: url\n            });\n          }\n        }\n\n        runningTimeout.cancel(); // If we had a processFunc, it either returned a T or threw above.\n        // The \"body\" is now a Uint8Array.\n\n        return body;\n      }\n\n      return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n        requestMethod: options.method,\n        url: url\n      });\n    });\n  }();\n\n  return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n  let processJsonFunc = (value, response) => {\n    let result = null;\n\n    if (value != null) {\n      try {\n        result = JSON.parse(toUtf8String(value));\n      } catch (error) {\n        logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n          body: value,\n          error: error\n        });\n      }\n    }\n\n    if (processFunc) {\n      result = processFunc(result, response);\n    }\n\n    return result;\n  }; // If we have json to send, we must\n  // - add content-type of application/json (unless already overridden)\n  // - convert the json to bytes\n\n\n  let body = null;\n\n  if (json != null) {\n    body = toUtf8Bytes(json); // Create a connection with the content-type set for JSON\n\n    const updated = typeof connection === \"string\" ? {\n      url: connection\n    } : shallowCopy(connection);\n\n    if (updated.headers) {\n      const hasContentType = Object.keys(updated.headers).filter(k => k.toLowerCase() === \"content-type\").length !== 0;\n\n      if (!hasContentType) {\n        updated.headers = shallowCopy(updated.headers);\n        updated.headers[\"content-type\"] = \"application/json\";\n      }\n    } else {\n      updated.headers = {\n        \"content-type\": \"application/json\"\n      };\n    }\n\n    connection = updated;\n  }\n\n  return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n  if (!options) {\n    options = {};\n  }\n\n  options = shallowCopy(options);\n\n  if (options.floor == null) {\n    options.floor = 0;\n  }\n\n  if (options.ceiling == null) {\n    options.ceiling = 10000;\n  }\n\n  if (options.interval == null) {\n    options.interval = 250;\n  }\n\n  return new Promise(function (resolve, reject) {\n    let timer = null;\n    let done = false; // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n\n    const cancel = () => {\n      if (done) {\n        return false;\n      }\n\n      done = true;\n\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      return true;\n    };\n\n    if (options.timeout) {\n      timer = setTimeout(() => {\n        if (cancel()) {\n          reject(new Error(\"timeout\"));\n        }\n      }, options.timeout);\n    }\n\n    const retryLimit = options.retryLimit;\n    let attempt = 0;\n\n    function check() {\n      return func().then(function (result) {\n        // If we have a result, or are allowed null then we're done\n        if (result !== undefined) {\n          if (cancel()) {\n            resolve(result);\n          }\n        } else if (options.oncePoll) {\n          options.oncePoll.once(\"poll\", check);\n        } else if (options.onceBlock) {\n          options.onceBlock.once(\"block\", check); // Otherwise, exponential back-off (up to 10s) our next request\n        } else if (!done) {\n          attempt++;\n\n          if (attempt > retryLimit) {\n            if (cancel()) {\n              reject(new Error(\"retry limit reached\"));\n            }\n\n            return;\n          }\n\n          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n\n          if (timeout < options.floor) {\n            timeout = options.floor;\n          }\n\n          if (timeout > options.ceiling) {\n            timeout = options.ceiling;\n          }\n\n          setTimeout(check, timeout);\n        }\n\n        return null;\n      }, function (error) {\n        if (cancel()) {\n          reject(error);\n        }\n      });\n    }\n\n    check();\n  });\n}","map":{"version":3,"mappings":"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","names":["decode","base64Decode","encode","base64Encode","hexlify","isBytesLike","shallowCopy","toUtf8Bytes","toUtf8String","Logger","version","logger","getUrl","staller","duration","Promise","resolve","setTimeout","bodyify","value","type","split","trim","error","_fetchData","connection","body","processFunc","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","errorPassThrough","headers","url","options","method","allow304","timeout","throwArgumentError","key","toLowerCase","String","indexOf","allowGzip","user","password","substring","allowInsecureAuthentication","throwError","errors","INVALID_ARGUMENT","argument","authorization","skipFetchSetup","reData","RegExp","dataMatch","match","response","statusCode","statusMessage","result","SERVER_ERROR","requestBody","requestMethod","length","flatHeaders","Object","keys","forEach","header","runningTimeout","timer","promise","reject","makeError","TIMEOUT","cancel","clearTimeout","runningFetch","attempt","location","tryAgain","stall","retryAfter","parseInt","Math","random","pow","serverError","status","throttleRetry","race","fetchJson","json","processJsonFunc","JSON","parse","updated","hasContentType","filter","k","poll","func","floor","ceiling","interval","done","Error","retryLimit","check","then","undefined","oncePoll","once","onceBlock"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/web/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n    }\n    const reData = new RegExp(\"^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": dataMatch[1] },\n                body: base64Decode(dataMatch[2])\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n"]},"metadata":{},"sourceType":"module"}