{"ast":null,"code":"\"use strict\";\n\nimport { HashZero } from \"@ethersproject/constants\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8\";\nexport function formatBytes32String(text) {\n  // Get the bytes\n  const bytes = toUtf8Bytes(text); // Check we have room for null-termination\n\n  if (bytes.length > 31) {\n    throw new Error(\"bytes32 string must be less than 32 bytes\");\n  } // Zero-pad (implicitly null-terminates)\n\n\n  return hexlify(concat([bytes, HashZero]).slice(0, 32));\n}\nexport function parseBytes32String(bytes) {\n  const data = arrayify(bytes); // Must be 32 bytes with a null-termination\n\n  if (data.length !== 32) {\n    throw new Error(\"invalid bytes32 - not 32 bytes long\");\n  }\n\n  if (data[31] !== 0) {\n    throw new Error(\"invalid bytes32 string - no null terminator\");\n  } // Find the null termination\n\n\n  let length = 31;\n\n  while (data[length - 1] === 0) {\n    length--;\n  } // Determine the string value\n\n\n  return toUtf8String(data.slice(0, length));\n}","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,QAAT,QAAyB,0BAAzB;AACA,SAASC,QAAT,EAA8BC,MAA9B,EAAsCC,OAAtC,QAAqD,sBAArD;AAEA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,QAA1C;AAGA,OAAM,SAAUC,mBAAV,CAA8BC,IAA9B,EAA0C;EAE5C;EACA,MAAMC,KAAK,GAAGJ,WAAW,CAACG,IAAD,CAAzB,CAH4C,CAK5C;;EACA,IAAIC,KAAK,CAACC,MAAN,GAAe,EAAnB,EAAuB;IAAE,MAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;EAA+D,CAN5C,CAQ5C;;;EACA,OAAOP,OAAO,CAACD,MAAM,CAAC,CAAEM,KAAF,EAASR,QAAT,CAAD,CAAN,CAA4BW,KAA5B,CAAkC,CAAlC,EAAqC,EAArC,CAAD,CAAd;AACH;AAED,OAAM,SAAUC,kBAAV,CAA6BJ,KAA7B,EAA6C;EAC/C,MAAMK,IAAI,GAAGZ,QAAQ,CAACO,KAAD,CAArB,CAD+C,CAG/C;;EACA,IAAIK,IAAI,CAACJ,MAAL,KAAgB,EAApB,EAAwB;IAAE,MAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;EAAyD;;EACnF,IAAIG,IAAI,CAAC,EAAD,CAAJ,KAAa,CAAjB,EAAoB;IAAE,MAAM,IAAIH,KAAJ,CAAU,6CAAV,CAAN;EAAiE,CALxC,CAO/C;;;EACA,IAAID,MAAM,GAAG,EAAb;;EACA,OAAOI,IAAI,CAACJ,MAAM,GAAG,CAAV,CAAJ,KAAqB,CAA5B,EAA+B;IAAEA,MAAM;EAAK,CATG,CAW/C;;;EACA,OAAOJ,YAAY,CAACQ,IAAI,CAACF,KAAL,CAAW,CAAX,EAAcF,MAAd,CAAD,CAAnB;AACH","names":["HashZero","arrayify","concat","hexlify","toUtf8Bytes","toUtf8String","formatBytes32String","text","bytes","length","Error","slice","parseBytes32String","data"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/strings/src.ts/bytes32.ts"],"sourcesContent":["\"use strict\";\n\nimport { HashZero } from \"@ethersproject/constants\";\nimport { arrayify, BytesLike, concat, hexlify } from \"@ethersproject/bytes\";\n\nimport { toUtf8Bytes, toUtf8String } from \"./utf8\";\n\n\nexport function formatBytes32String(text: string): string {\n\n    // Get the bytes\n    const bytes = toUtf8Bytes(text);\n\n    // Check we have room for null-termination\n    if (bytes.length > 31) { throw new Error(\"bytes32 string must be less than 32 bytes\"); }\n\n    // Zero-pad (implicitly null-terminates)\n    return hexlify(concat([ bytes, HashZero ]).slice(0, 32));\n}\n\nexport function parseBytes32String(bytes: BytesLike): string {\n    const data = arrayify(bytes);\n\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) { throw new Error(\"invalid bytes32 - not 32 bytes long\"); }\n    if (data[31] !== 0) { throw new Error(\"invalid bytes32 string - no null terminator\"); }\n\n    // Find the null termination\n    let length = 31;\n    while (data[length - 1] === 0) { length--; }\n\n    // Determine the string value\n    return toUtf8String(data.slice(0, length));\n}\n\n"]},"metadata":{},"sourceType":"module"}