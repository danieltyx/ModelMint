{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, concat, hexDataLength, hexDataSlice, isHexString, stripZeros } from \"@ethersproject/bytes\";\nimport { BigNumber, _base16To36, _base36To16 } from \"@ethersproject/bignumber\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { encode } from \"@ethersproject/rlp\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction getChecksumAddress(address) {\n  if (!isHexString(address, 20)) {\n    logger.throwArgumentError(\"invalid address\", \"address\", address);\n  }\n\n  address = address.toLowerCase();\n  const chars = address.substring(2).split(\"\");\n  const expanded = new Uint8Array(40);\n\n  for (let i = 0; i < 40; i++) {\n    expanded[i] = chars[i].charCodeAt(0);\n  }\n\n  const hashed = arrayify(keccak256(expanded));\n\n  for (let i = 0; i < 40; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n\n    if ((hashed[i >> 1] & 0x0f) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n\n  return \"0x\" + chars.join(\"\");\n} // Shims for environments that are missing some required constants and functions\n\n\nconst MAX_SAFE_INTEGER = 0x1fffffffffffff;\n\nfunction log10(x) {\n  if (Math.log10) {\n    return Math.log10(x);\n  }\n\n  return Math.log(x) / Math.LN10;\n} // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\n\n\nconst ibanLookup = {};\n\nfor (let i = 0; i < 10; i++) {\n  ibanLookup[String(i)] = String(i);\n}\n\nfor (let i = 0; i < 26; i++) {\n  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n} // How many decimal digits can we process? (for 64-bit float, this is 15)\n\n\nconst safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\n\nfunction ibanChecksum(address) {\n  address = address.toUpperCase();\n  address = address.substring(4) + address.substring(0, 2) + \"00\";\n  let expanded = address.split(\"\").map(c => {\n    return ibanLookup[c];\n  }).join(\"\"); // Javascript can handle integers safely up to 15 (decimal) digits\n\n  while (expanded.length >= safeDigits) {\n    let block = expanded.substring(0, safeDigits);\n    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n  }\n\n  let checksum = String(98 - parseInt(expanded, 10) % 97);\n\n  while (checksum.length < 2) {\n    checksum = \"0\" + checksum;\n  }\n\n  return checksum;\n}\n\n;\nexport function getAddress(address) {\n  let result = null;\n\n  if (typeof address !== \"string\") {\n    logger.throwArgumentError(\"invalid address\", \"address\", address);\n  }\n\n  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n    // Missing the 0x prefix\n    if (address.substring(0, 2) !== \"0x\") {\n      address = \"0x\" + address;\n    }\n\n    result = getChecksumAddress(address); // It is a checksummed address with a bad checksum\n\n    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n      logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n    } // Maybe ICAP? (we only support direct mode)\n\n  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n    // It is an ICAP address with a bad checksum\n    if (address.substring(2, 4) !== ibanChecksum(address)) {\n      logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n    }\n\n    result = _base36To16(address.substring(4));\n\n    while (result.length < 40) {\n      result = \"0\" + result;\n    }\n\n    result = getChecksumAddress(\"0x\" + result);\n  } else {\n    logger.throwArgumentError(\"invalid address\", \"address\", address);\n  }\n\n  return result;\n}\nexport function isAddress(address) {\n  try {\n    getAddress(address);\n    return true;\n  } catch (error) {}\n\n  return false;\n}\nexport function getIcapAddress(address) {\n  let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n\n  while (base36.length < 30) {\n    base36 = \"0\" + base36;\n  }\n\n  return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n} // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n\nexport function getContractAddress(transaction) {\n  let from = null;\n\n  try {\n    from = getAddress(transaction.from);\n  } catch (error) {\n    logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n  }\n\n  const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));\n  return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));\n}\nexport function getCreate2Address(from, salt, initCodeHash) {\n  if (hexDataLength(salt) !== 32) {\n    logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n  }\n\n  if (hexDataLength(initCodeHash) !== 32) {\n    logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n  }\n\n  return getAddress(hexDataSlice(keccak256(concat([\"0xff\", getAddress(from), salt, initCodeHash])), 12));\n}","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,QAAT,EAA8BC,MAA9B,EAAsCC,aAAtC,EAAqDC,YAArD,EAAmEC,WAAnE,EAAgFC,UAAhF,QAAkG,sBAAlG;AACA,SAASC,SAAT,EAAkCC,WAAlC,EAA+CC,WAA/C,QAAkE,0BAAlE;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,MAAT,QAAuB,oBAAvB;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;;AAEA,SAASE,kBAAT,CAA4BC,OAA5B,EAA2C;EACvC,IAAI,CAACX,WAAW,CAACW,OAAD,EAAU,EAAV,CAAhB,EAA+B;IAC3BF,MAAM,CAACG,kBAAP,CAA0B,iBAA1B,EAA6C,SAA7C,EAAwDD,OAAxD;EACH;;EAEDA,OAAO,GAAGA,OAAO,CAACE,WAAR,EAAV;EAEA,MAAMC,KAAK,GAAGH,OAAO,CAACI,SAAR,CAAkB,CAAlB,EAAqBC,KAArB,CAA2B,EAA3B,CAAd;EAEA,MAAMC,QAAQ,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAjB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;IACzBF,QAAQ,CAACE,CAAD,CAAR,GAAcL,KAAK,CAACK,CAAD,CAAL,CAASC,UAAT,CAAoB,CAApB,CAAd;EACH;;EAED,MAAMC,MAAM,GAAGzB,QAAQ,CAACS,SAAS,CAACY,QAAD,CAAV,CAAvB;;EAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;IAC5B,IAAKE,MAAM,CAACF,CAAC,IAAI,CAAN,CAAN,IAAkB,CAAnB,IAAyB,CAA7B,EAAgC;MAC5BL,KAAK,CAACK,CAAD,CAAL,GAAWL,KAAK,CAACK,CAAD,CAAL,CAASG,WAAT,EAAX;IACH;;IACD,IAAI,CAACD,MAAM,CAACF,CAAC,IAAI,CAAN,CAAN,GAAiB,IAAlB,KAA2B,CAA/B,EAAkC;MAC9BL,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,GAAeL,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,CAAaG,WAAb,EAAf;IACH;EACJ;;EAED,OAAO,OAAOR,KAAK,CAACS,IAAN,CAAW,EAAX,CAAd;AACH,C,CAED;;;AACA,MAAMC,gBAAgB,GAAW,gBAAjC;;AAEA,SAASC,KAAT,CAAeC,CAAf,EAAwB;EACpB,IAAIC,IAAI,CAACF,KAAT,EAAgB;IAAE,OAAOE,IAAI,CAACF,KAAL,CAAWC,CAAX,CAAP;EAAuB;;EACzC,OAAOC,IAAI,CAACC,GAAL,CAASF,CAAT,IAAcC,IAAI,CAACE,IAA1B;AACH,C,CAGD;AAEA;;;AACA,MAAMC,UAAU,GAAoC,EAApD;;AACA,KAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;EAAEW,UAAU,CAACC,MAAM,CAACZ,CAAD,CAAP,CAAV,GAAwBY,MAAM,CAACZ,CAAD,CAA9B;AAAoC;;AACnE,KAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;EAAEW,UAAU,CAACC,MAAM,CAACC,YAAP,CAAoB,KAAKb,CAAzB,CAAD,CAAV,GAA0CY,MAAM,CAAC,KAAKZ,CAAN,CAAhD;AAA2D,C,CAE1F;;;AACA,MAAMc,UAAU,GAAGN,IAAI,CAACO,KAAL,CAAWT,KAAK,CAACD,gBAAD,CAAhB,CAAnB;;AAEA,SAASW,YAAT,CAAsBxB,OAAtB,EAAqC;EACjCA,OAAO,GAAGA,OAAO,CAACW,WAAR,EAAV;EACAX,OAAO,GAAGA,OAAO,CAACI,SAAR,CAAkB,CAAlB,IAAuBJ,OAAO,CAACI,SAAR,CAAkB,CAAlB,EAAqB,CAArB,CAAvB,GAAiD,IAA3D;EAEA,IAAIE,QAAQ,GAAGN,OAAO,CAACK,KAAR,CAAc,EAAd,EAAkBoB,GAAlB,CAAuBC,CAAD,IAAM;IAAG,OAAOP,UAAU,CAACO,CAAD,CAAjB;EAAuB,CAAtD,EAAwDd,IAAxD,CAA6D,EAA7D,CAAf,CAJiC,CAMjC;;EACA,OAAON,QAAQ,CAACqB,MAAT,IAAmBL,UAA1B,EAAqC;IACjC,IAAIM,KAAK,GAAGtB,QAAQ,CAACF,SAAT,CAAmB,CAAnB,EAAsBkB,UAAtB,CAAZ;IACAhB,QAAQ,GAAGuB,QAAQ,CAACD,KAAD,EAAQ,EAAR,CAAR,GAAsB,EAAtB,GAA2BtB,QAAQ,CAACF,SAAT,CAAmBwB,KAAK,CAACD,MAAzB,CAAtC;EACH;;EAED,IAAIG,QAAQ,GAAGV,MAAM,CAAC,KAAMS,QAAQ,CAACvB,QAAD,EAAW,EAAX,CAAR,GAAyB,EAAhC,CAArB;;EACA,OAAOwB,QAAQ,CAACH,MAAT,GAAkB,CAAzB,EAA4B;IAAEG,QAAQ,GAAG,MAAMA,QAAjB;EAA4B;;EAE1D,OAAOA,QAAP;AACH;;AAAA;AAED,OAAM,SAAUC,UAAV,CAAqB/B,OAArB,EAAoC;EACtC,IAAIgC,MAAM,GAAG,IAAb;;EAEA,IAAI,OAAOhC,OAAP,KAAoB,QAAxB,EAAkC;IAC9BF,MAAM,CAACG,kBAAP,CAA0B,iBAA1B,EAA6C,SAA7C,EAAwDD,OAAxD;EACH;;EAED,IAAIA,OAAO,CAACiC,KAAR,CAAc,wBAAd,CAAJ,EAA6C;IAEzC;IACA,IAAIjC,OAAO,CAACI,SAAR,CAAkB,CAAlB,EAAqB,CAArB,MAA4B,IAAhC,EAAsC;MAAEJ,OAAO,GAAG,OAAOA,OAAjB;IAA2B;;IAEnEgC,MAAM,GAAGjC,kBAAkB,CAACC,OAAD,CAA3B,CALyC,CAOzC;;IACA,IAAIA,OAAO,CAACiC,KAAR,CAAc,+BAAd,KAAkDD,MAAM,KAAKhC,OAAjE,EAA0E;MACtEF,MAAM,CAACG,kBAAP,CAA0B,sBAA1B,EAAkD,SAAlD,EAA6DD,OAA7D;IACH,CAVwC,CAY7C;;EACC,CAbD,MAaO,IAAIA,OAAO,CAACiC,KAAR,CAAc,gCAAd,CAAJ,EAAqD;IAExD;IACA,IAAIjC,OAAO,CAACI,SAAR,CAAkB,CAAlB,EAAqB,CAArB,MAA4BoB,YAAY,CAACxB,OAAD,CAA5C,EAAuD;MACnDF,MAAM,CAACG,kBAAP,CAA0B,mBAA1B,EAA+C,SAA/C,EAA0DD,OAA1D;IACH;;IAEDgC,MAAM,GAAGvC,WAAW,CAACO,OAAO,CAACI,SAAR,CAAkB,CAAlB,CAAD,CAApB;;IACA,OAAO4B,MAAM,CAACL,MAAP,GAAgB,EAAvB,EAA2B;MAAEK,MAAM,GAAG,MAAMA,MAAf;IAAwB;;IACrDA,MAAM,GAAGjC,kBAAkB,CAAC,OAAOiC,MAAR,CAA3B;EAEH,CAXM,MAWA;IACHlC,MAAM,CAACG,kBAAP,CAA0B,iBAA1B,EAA6C,SAA7C,EAAwDD,OAAxD;EACH;;EAED,OAAOgC,MAAP;AACH;AAED,OAAM,SAAUE,SAAV,CAAoBlC,OAApB,EAAmC;EACrC,IAAI;IACA+B,UAAU,CAAC/B,OAAD,CAAV;IACA,OAAO,IAAP;EACH,CAHD,CAGE,OAAOmC,KAAP,EAAc,CAAG;;EACnB,OAAO,KAAP;AACH;AAED,OAAM,SAAUC,cAAV,CAAyBpC,OAAzB,EAAwC;EAC1C,IAAIqC,MAAM,GAAG7C,WAAW,CAACuC,UAAU,CAAC/B,OAAD,CAAV,CAAoBI,SAApB,CAA8B,CAA9B,CAAD,CAAX,CAA8CO,WAA9C,EAAb;;EACA,OAAO0B,MAAM,CAACV,MAAP,GAAgB,EAAvB,EAA2B;IAAEU,MAAM,GAAG,MAAMA,MAAf;EAAwB;;EACrD,OAAO,OAAOb,YAAY,CAAC,SAASa,MAAV,CAAnB,GAAuCA,MAA9C;AACH,C,CAED;;AACA,OAAM,SAAUC,kBAAV,CAA6BC,WAA7B,EAA+E;EACjF,IAAIC,IAAI,GAAW,IAAnB;;EACA,IAAI;IACAA,IAAI,GAAGT,UAAU,CAACQ,WAAW,CAACC,IAAb,CAAjB;EACH,CAFD,CAEE,OAAOL,KAAP,EAAc;IACZrC,MAAM,CAACG,kBAAP,CAA0B,sBAA1B,EAAkD,aAAlD,EAAiEsC,WAAjE;EACH;;EAED,MAAME,KAAK,GAAGnD,UAAU,CAACL,QAAQ,CAACM,SAAS,CAACiD,IAAV,CAAeD,WAAW,CAACE,KAA3B,EAAkCC,WAAlC,EAAD,CAAT,CAAxB;EAEA,OAAOX,UAAU,CAAC3C,YAAY,CAACM,SAAS,CAACC,MAAM,CAAC,CAAE6C,IAAF,EAAQC,KAAR,CAAD,CAAP,CAAV,EAAqC,EAArC,CAAb,CAAjB;AACH;AAED,OAAM,SAAUE,iBAAV,CAA4BH,IAA5B,EAA0CI,IAA1C,EAA2DC,YAA3D,EAAkF;EACpF,IAAI1D,aAAa,CAACyD,IAAD,CAAb,KAAwB,EAA5B,EAAgC;IAC5B9C,MAAM,CAACG,kBAAP,CAA0B,uBAA1B,EAAmD,MAAnD,EAA2D2C,IAA3D;EACH;;EACD,IAAIzD,aAAa,CAAC0D,YAAD,CAAb,KAAgC,EAApC,EAAwC;IACpC/C,MAAM,CAACG,kBAAP,CAA0B,+BAA1B,EAA2D,cAA3D,EAA2E4C,YAA3E;EACH;;EACD,OAAOd,UAAU,CAAC3C,YAAY,CAACM,SAAS,CAACR,MAAM,CAAC,CAAE,MAAF,EAAU6C,UAAU,CAACS,IAAD,CAApB,EAA4BI,IAA5B,EAAkCC,YAAlC,CAAD,CAAP,CAAV,EAAsE,EAAtE,CAAb,CAAjB;AACH","names":["arrayify","concat","hexDataLength","hexDataSlice","isHexString","stripZeros","BigNumber","_base16To36","_base36To16","keccak256","encode","Logger","version","logger","getChecksumAddress","address","throwArgumentError","toLowerCase","chars","substring","split","expanded","Uint8Array","i","charCodeAt","hashed","toUpperCase","join","MAX_SAFE_INTEGER","log10","x","Math","log","LN10","ibanLookup","String","fromCharCode","safeDigits","floor","ibanChecksum","map","c","length","block","parseInt","checksum","getAddress","result","match","isAddress","error","getIcapAddress","base36","getContractAddress","transaction","from","nonce","toHexString","getCreate2Address","salt","initCodeHash"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/address/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify, BytesLike, concat, hexDataLength, hexDataSlice, isHexString, stripZeros } from \"@ethersproject/bytes\";\nimport { BigNumber, BigNumberish, _base16To36, _base36To16 } from \"@ethersproject/bignumber\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { encode } from \"@ethersproject/rlp\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction getChecksumAddress(address: string): string {\n    if (!isHexString(address, 20)) {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n\n    address = address.toLowerCase();\n\n    const chars = address.substring(2).split(\"\");\n\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n\n    const hashed = arrayify(keccak256(expanded));\n\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n\n    return \"0x\" + chars.join(\"\");\n}\n\n// Shims for environments that are missing some required constants and functions\nconst MAX_SAFE_INTEGER: number = 0x1fffffffffffff;\n\nfunction log10(x: number): number {\n    if (Math.log10) { return Math.log10(x); }\n    return Math.log(x) / Math.LN10;\n}\n\n\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n\n// Create lookup table\nconst ibanLookup: { [character: string]: string } = { };\nfor (let i = 0; i < 10; i++) { ibanLookup[String(i)] = String(i); }\nfor (let i = 0; i < 26; i++) { ibanLookup[String.fromCharCode(65 + i)] = String(10 + i); }\n\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nconst safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\n\nfunction ibanChecksum(address: string): string {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits){\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) { checksum = \"0\" + checksum; }\n\n    return checksum;\n};\n\nexport function getAddress(address: string): string {\n    let result = null;\n\n    if (typeof(address) !== \"string\") {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== \"0x\") { address = \"0x\" + address; }\n\n        result = getChecksumAddress(address);\n\n        // It is a checksummed address with a bad checksum\n        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n            logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n        }\n\n    // Maybe ICAP? (we only support direct mode)\n    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n            logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n        }\n\n        result = _base36To16(address.substring(4));\n        while (result.length < 40) { result = \"0\" + result; }\n        result = getChecksumAddress(\"0x\" + result);\n\n    } else {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n\n    return result;\n}\n\nexport function isAddress(address: string): boolean {\n    try {\n        getAddress(address);\n        return true;\n    } catch (error) { }\n    return false;\n}\n\nexport function getIcapAddress(address: string): string {\n    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    while (base36.length < 30) { base36 = \"0\" + base36; }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nexport function getContractAddress(transaction: { from: string, nonce: BigNumberish }) {\n    let from: string = null;\n    try {\n        from = getAddress(transaction.from);\n    } catch (error) {\n        logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n    }\n\n    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));\n\n    return getAddress(hexDataSlice(keccak256(encode([ from, nonce ])), 12));\n}\n\nexport function getCreate2Address(from: string, salt: BytesLike, initCodeHash: BytesLike): string {\n    if (hexDataLength(salt) !== 32) {\n        logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n    }\n    if (hexDataLength(initCodeHash) !== 32) {\n        logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n    }\n    return getAddress(hexDataSlice(keccak256(concat([ \"0xff\", getAddress(from), salt, initCodeHash ])), 12))\n}\n"]},"metadata":{},"sourceType":"module"}