{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\n\nfunction spelunk(value, requireData) {\n  if (value == null) {\n    return null;\n  } // These *are* the droids we're looking for.\n\n\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n    const data = isHexString(value.data) ? value.data : null;\n\n    if (!requireData || data) {\n      return {\n        message: value.message,\n        data\n      };\n    }\n  } // Spelunk further...\n\n\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunk(value[key], requireData);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return null;\n  } // Might be a JSON string we can further descend...\n\n\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value), requireData);\n    } catch (error) {}\n  }\n\n  return null;\n}\n\nfunction checkError(method, error, params) {\n  const transaction = params.transaction || params.signedTransaction; // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n\n  if (method === \"call\") {\n    const result = spelunk(error, true);\n\n    if (result) {\n      return result.data;\n    } // Nothing descriptive..\n\n\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      data: \"0x\",\n      transaction,\n      error\n    });\n  }\n\n  if (method === \"estimateGas\") {\n    // Try to find something, with a preference on SERVER_ERROR body\n    let result = spelunk(error.body, false);\n\n    if (result == null) {\n      result = spelunk(error, false);\n    } // Found \"reverted\", this is a CALL_EXCEPTION\n\n\n    if (result) {\n      logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        reason: result.message,\n        method,\n        transaction,\n        error\n      });\n    }\n  } // @TODO: Should we spelunk for message too?\n\n\n  let message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n\n  message = (message || \"\").toLowerCase(); // \"insufficient funds for gas * price + value + cost(data)\"\n\n  if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  } // \"nonce too low\"\n\n\n  if (message.match(/nonce (is )?too low/i)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/only replay-protected/i)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  throw error;\n}\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    super();\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n\n    defineReadOnly(this, \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    const fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n\n      return address;\n    }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n\n    if (transaction.to != null) {\n      transaction.to = Promise.resolve(transaction.to).then(to => __awaiter(this, void 0, void 0, function* () {\n        if (to == null) {\n          return null;\n        }\n\n        const address = yield this.provider.resolveName(to);\n\n        if (address == null) {\n          logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n        }\n\n        return address;\n      }));\n    }\n\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress\n    }).then(_ref => {\n      let {\n        tx,\n        sender\n      } = _ref;\n\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n      } else {\n        tx.from = sender;\n      }\n\n      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n        from: true\n      });\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        return checkError(\"sendTransaction\", error, hexTx);\n      });\n    });\n  }\n\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // This cannot be mined any earlier than any recent block\n      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval); // Send the transaction\n\n      const hash = yield this.sendUncheckedTransaction(transaction);\n\n      try {\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n          const tx = yield this.provider.getTransaction(hash);\n\n          if (tx === null) {\n            return undefined;\n          }\n\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        }), {\n          oncePoll: this.provider\n        });\n      } catch (error) {\n        error.transactionHash = hash;\n        throw error;\n      }\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n    });\n  }\n\n  _legacySignMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress(); // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n\n      return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n    });\n  }\n\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names (in-place)\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        return this.provider.resolveName(name);\n      });\n      const address = yield this.getAddress();\n      return yield this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n    });\n  }\n\n  unlock(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = this.provider;\n      const address = yield this.getAddress();\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n\n}\n\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    let networkOrReady = network; // The network is unknown, query the JSON-RPC for it\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(network => {\n            resolve(network);\n          }, error => {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n\n    super(networkOrReady); // Default URL\n\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n    }\n\n    this._nextId = 42;\n  }\n\n  get _cache() {\n    if (this._eventLoopCache == null) {\n      this._eventLoopCache = {};\n    }\n\n    return this._eventLoopCache;\n  }\n\n  static defaultUrl() {\n    return \"http:/\\/localhost:8545\";\n  }\n\n  detectNetwork() {\n    if (!this._cache[\"detectNetwork\"]) {\n      this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork(); // Clear this cache at the beginning of the next event loop\n\n      setTimeout(() => {\n        this._cache[\"detectNetwork\"] = null;\n      }, 0);\n    }\n\n    return this._cache[\"detectNetwork\"];\n  }\n\n  _uncachedDetectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield timer(0);\n      let chainId = null;\n\n      try {\n        chainId = yield this.send(\"eth_chainId\", []);\n      } catch (error) {\n        try {\n          chainId = yield this.send(\"net_version\", []);\n        } catch (error) {}\n      }\n\n      if (chainId != null) {\n        const getNetwork = getStatic(this.constructor, \"getNetwork\");\n\n        try {\n          return getNetwork(BigNumber.from(chainId).toNumber());\n        } catch (error) {\n          return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            chainId: chainId,\n            event: \"invalidNetwork\",\n            serverError: error\n          });\n        }\n      }\n\n      return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n        event: \"noNetwork\"\n      });\n    });\n  }\n\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    }); // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n\n    const cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    }); // Cache the fetch, but clear it on the next event loop\n\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n\n        return null;\n\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n\n        return [\"eth_getLogs\", [params.filter]];\n\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Legacy networks do not like the type field being passed along (which\n      // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n      if (method === \"call\" || method === \"estimateGas\") {\n        const tx = params.transaction;\n\n        if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n          // If there are no EIP-1559 properties, it might be non-EIP-1559\n          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n            const feeData = yield this.getFeeData();\n\n            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n              // Network doesn't know about EIP-1559 (and hence type)\n              params = shallowCopy(params);\n              params.transaction = shallowCopy(tx);\n              delete params.transaction.type;\n            }\n          }\n        }\n      }\n\n      const args = this.prepareRequest(method, params);\n\n      if (args == null) {\n        logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      }\n\n      try {\n        return yield this.send(args[0], args[1]);\n      } catch (error) {\n        return checkError(method, error, params);\n      }\n    });\n  }\n\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n\n    super._startEvent(event);\n  }\n\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n\n    const self = this;\n    const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n\n    super._stopEvent(event);\n  } // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n\n\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n\n    checkProperties(transaction, allowed);\n    const result = {}; // JSON-RPC now requires numeric values to be \"quantity\" values\n\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      const value = hexValue(BigNumber.from(transaction[key]));\n\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      result[key] = hexlify(transaction[key]);\n    });\n\n    if (transaction.accessList) {\n      result[\"accessList\"] = accessListify(transaction.accessList);\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Signer","BigNumber","hexlify","hexValue","hexZeroPad","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","spelunk","value","requireData","message","match","data","key","result","JSON","parse","error","checkError","method","params","transaction","signedTransaction","throwError","errors","CALL_EXCEPTION","body","UNPREDICTABLE_GAS_LIMIT","reason","code","SERVER_ERROR","responseText","toLowerCase","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","timer","timeout","Promise","resolve","setTimeout","getResult","payload","Error","getLowerCase","_constructorGuard","JsonRpcSigner","constructor","constructorGuard","provider","addressOrIndex","formatter","address","throwArgumentError","connect","operation","connectUnchecked","UncheckedJsonRpcSigner","_address","_index","getAddress","send","then","accounts","length","sendUncheckedTransaction","fromAddress","gasLimit","estimate","from","estimateGas","to","__awaiter","resolveName","tx","sender","hexTx","hexlifyTransaction","hash","signTransaction","sendTransaction","blockNumber","_getInternalBlockNumber","pollingInterval","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","signMessage","_legacySignMessage","_signTypedData","domain","types","populated","resolveNames","name","stringify","getPayload","unlock","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","reject","detectNetwork","Object","freeze","_nextId","_cache","_eventLoopCache","defaultUrl","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","getUncheckedSigner","listAccounts","map","a","request","id","jsonrpc","emit","action","cache","connection","response","prepareRequest","blockTag","position","includeTransactions","blockHash","filter","perform","isZero","feeData","getFeeData","args","NOT_IMPLEMENTED","_startEvent","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","_stopEvent","listenerCount","allowExtra","allowed"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            address.toLowerCase(),\n            JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}