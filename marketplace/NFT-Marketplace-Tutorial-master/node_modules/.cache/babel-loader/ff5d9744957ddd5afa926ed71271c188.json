{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n\n      case \"filter\":\n        return this.filter;\n    }\n\n    return this.tag;\n  }\n\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n\n  get hash() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n\n    return comps[1];\n  }\n\n  get filter() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n\n}\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n\n  return null;\n}\n\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n\n  const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n} // Trim off the ipfs:// prefix and return the default gateway URL\n\n\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n\n  return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\n\nfunction numPad(value) {\n  const result = arrayify(value);\n\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n\n  const padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\n\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n\n  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n} // ABI Encodes a series of (bytes, bytes, ...)\n\n\nfunction encodeBytes(datas) {\n  const result = [];\n  let byteCount = 0; // Add place-holders for pointers as we add items\n\n  for (let i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n\n  for (let i = 0; i < datas.length; i++) {\n    const data = arrayify(datas[i]); // Update the bytes offset\n\n    result[i] = numPad(byteCount); // The length and padded value of data\n\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n\n  return hexConcat(result);\n}\n\nexport class Resolver {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  constructor(provider, address, name, resolvedAddress) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n\n  supportsWildcard() {\n    if (!this._supportsEip2544) {\n      // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n      this._supportsEip2544 = this.provider.call({\n        to: this.address,\n        data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n      }).then(result => {\n        return BigNumber.from(result).eq(1);\n      }).catch(error => {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return false;\n        } // Rethrow the error: link is down, etc. Let future attempts retry.\n\n\n        this._supportsEip2544 = null;\n        throw error;\n      });\n    }\n\n    return this._supportsEip2544;\n  }\n\n  _fetch(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // e.g. keccak256(\"addr(bytes32,uint256)\")\n      const tx = {\n        to: this.address,\n        ccipReadEnabled: true,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      }; // Wildcard support; use EIP-2544 to resolve the request\n\n      let parseBytes = false;\n\n      if (yield this.supportsWildcard()) {\n        parseBytes = true; // selector(\"resolve(bytes,bytes)\")\n\n        tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n      }\n\n      try {\n        let result = yield this.provider.call(tx);\n\n        if (arrayify(result).length % 32 === 4) {\n          logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n            transaction: tx,\n            data: result\n          });\n        }\n\n        if (parseBytes) {\n          result = _parseBytes(result, 0);\n        }\n\n        return result;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._fetch(selector, parameters);\n\n      if (result != null) {\n        return _parseBytes(result, 0);\n      }\n\n      return null;\n    });\n  }\n\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n\n    const bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    } // Bech32\n\n\n    if (coinInfo.prefix != null) {\n      const length = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n      let version = bytes[0];\n\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n\n    return null;\n  }\n\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      } // If Ethereum, use the standard `addr(bytes32)`\n\n\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const result = yield this._fetch(\"0x3b3b57de\"); // No address\n\n          if (result === \"0x\" || result === HashZero) {\n            return null;\n          }\n\n          return this.provider.formatter.callAddress(result);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n\n          throw error;\n        }\n      } // keccak256(\"addr(bytes32,uint256\")\n\n\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType)); // No address\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // Compute the address\n\n\n      const address = this._getAddress(coinType, hexBytes);\n\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n\n      return address;\n    });\n  }\n\n  getAvatar() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const linkage = [{\n        type: \"name\",\n        content: this.name\n      }];\n\n      try {\n        // test data for ricmoo.eth\n        //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n        const avatar = yield this.getText(\"avatar\");\n\n        if (avatar == null) {\n          return null;\n        }\n\n        for (let i = 0; i < matchers.length; i++) {\n          const match = avatar.match(matchers[i]);\n\n          if (match == null) {\n            continue;\n          }\n\n          const scheme = match[1].toLowerCase();\n\n          switch (scheme) {\n            case \"https\":\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"data\":\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"ipfs\":\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: getIpfsLink(avatar)\n              };\n\n            case \"erc721\":\n            case \"erc1155\":\n              {\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                const selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                }); // The owner of this name\n\n                const owner = this._resolvedAddress || (yield this.getAddress());\n                const comps = (match[2] || \"\").split(\"/\");\n\n                if (comps.length !== 2) {\n                  return null;\n                }\n\n                const addr = yield this.provider.formatter.address(comps[0]);\n                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n\n                if (scheme === \"erc721\") {\n                  // ownerOf(uint256 tokenId)\n                  const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x6352211e\", tokenId])\n                  }));\n\n                  if (owner !== tokenOwner) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"owner\",\n                    content: tokenOwner\n                  });\n                } else if (scheme === \"erc1155\") {\n                  // balanceOf(address owner, uint256 tokenId)\n                  const balance = BigNumber.from(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                  }));\n\n                  if (balance.isZero()) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"balance\",\n                    content: balance.toString()\n                  });\n                } // Call the token contract for the metadata URL\n\n\n                const tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n\n                let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n\n                if (metadataUrl == null) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata-url-base\",\n                  content: metadataUrl\n                }); // ERC-1155 allows a generic {id} in the URL\n\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                } // Transform IPFS metadata links\n\n\n                if (metadataUrl.match(/^ipfs:/i)) {\n                  metadataUrl = getIpfsLink(metadataUrl);\n                }\n\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                }); // Get the token metadata\n\n                const metadata = yield fetchJson(metadataUrl);\n\n                if (!metadata) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                }); // Pull the image URL out\n\n                let imageUrl = metadata.image;\n\n                if (typeof imageUrl !== \"string\") {\n                  return null;\n                }\n\n                if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {// Allow\n                } else {\n                  // Transform IPFS link to gateway\n                  const ipfs = imageUrl.match(matcherIpfs);\n\n                  if (ipfs == null) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"url-ipfs\",\n                    content: imageUrl\n                  });\n                  imageUrl = getIpfsLink(imageUrl);\n                }\n\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return {\n                  linkage,\n                  url: imageUrl\n                };\n              }\n          }\n        }\n      } catch (error) {}\n\n      return null;\n    });\n  }\n\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\"); // No contenthash\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // IPFS (CID: 1, Type: DAG-PB)\n\n\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      } // IPNS (CID: 1, Type: libp2p-key)\n\n\n      const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipns) {\n        const length = parseInt(ipns[3], 16);\n\n        if (ipns[4].length === length * 2) {\n          return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n        }\n      } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n\n\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n\n      const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n\n      if (skynet) {\n        if (skynet[1].length === 34 * 2) {\n          // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n          const urlSafe = {\n            \"=\": \"\",\n            \"+\": \"-\",\n            \"/\": \"_\"\n          };\n          const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, a => urlSafe[a]);\n          return \"sia:/\\/\" + hash;\n        }\n      }\n\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n\n      return toUtf8String(hexBytes);\n    });\n  }\n\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    super(); // Events being listened to\n\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.disableCcipRead = false;\n    this.formatter = new.target.getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(error => {}); // Trigger initial network setting (async)\n\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._maxFilterBlockRange = 10;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        } // Try the Provider's network detection (this MUST throw if it cannot)\n\n\n        if (network == null) {\n          network = yield this.detectNetwork();\n        } // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // Possible this call stacked so do not call defineReadOnly again\n\n\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return this._network;\n    });\n  } // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is reflected); otherwise this cannot change\n\n\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n\n        throw error;\n      });\n    });\n  } // @TODO: Remove this and just create a singleton formatter\n\n\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n\n    return defaultFormatter;\n  } // @TODO: Remove this and just use getNetwork\n\n\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  }\n\n  ccipReadFetch(tx, calldata, urls) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.disableCcipRead || urls.length === 0) {\n        return null;\n      }\n\n      const sender = tx.to.toLowerCase();\n      const data = calldata.toLowerCase();\n      const errorMessages = [];\n\n      for (let i = 0; i < urls.length; i++) {\n        const url = urls[i]; // URL expansion\n\n        const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n\n        const json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n          data,\n          sender\n        });\n        const result = yield fetchJson({\n          url: href,\n          errorPassThrough: true\n        }, json, (value, response) => {\n          value.status = response.statusCode;\n          return value;\n        });\n\n        if (result.data) {\n          return result.data;\n        }\n\n        const errorMessage = result.message || \"unknown error\"; // 4xx indicates the result is not present; stop\n\n        if (result.status >= 400 && result.status < 500) {\n          return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, {\n            url,\n            errorMessage\n          });\n        } // 5xx indicates server issue; try the next url\n\n\n        errorMessages.push(errorMessage);\n      }\n\n      return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n        urls,\n        errorMessages\n      });\n    });\n  } // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n\n\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready(); // Allowing stale data up to maxAge old\n\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            } // Too old; fetch a new value\n\n\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(_ref => {\n        let {\n          blockNumber,\n          networkError\n        } = _ref;\n\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n\n          throw networkError;\n        }\n\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n\n        this._maxInternalBlockNumber = blockNumber;\n\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n      const runners = [];\n      let blockNumber = null;\n\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n      this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      } // First polling cycle, trigger a \"block\" events\n\n\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      } // The emitted block was updated, check for obsolete events\n\n\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          } // The block we were at when we emitted this event\n\n\n          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n\n          if (eventBlockNumber === \"pending\") {\n            return;\n          } // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n\n\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      } // First polling cycle\n\n\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      } // Find all transaction hashes we are waiting on\n\n\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n\n          case \"filter\":\n            {\n              // We only allow a single getLogs to be in-flight at a time\n              if (!event._inflight) {\n                event._inflight = true; // Filter from the last known event; due to load-balancing\n                // and some nodes returning updated block numbers before\n                // indexing events, a logs result with 0 entries cannot be\n                // trusted and we must retry a range which includes it again\n\n                const filter = event.filter;\n                filter.fromBlock = event._lastBlockNumber + 1;\n                filter.toBlock = blockNumber; // Prevent fitler ranges from growing too wild\n\n                if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {\n                  filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;\n                }\n\n                const runner = this.getLogs(filter).then(logs => {\n                  // Allow the next getLogs\n                  event._inflight = false;\n\n                  if (logs.length === 0) {\n                    return;\n                  }\n\n                  logs.forEach(log => {\n                    // Only when we get an event for a given block number\n                    // can we trust the events are indexed\n                    if (log.blockNumber > event._lastBlockNumber) {\n                      event._lastBlockNumber = log.blockNumber;\n                    } // Make sure we stall requests to fetch blocks and txs\n\n\n                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                    this.emit(filter, log);\n                  });\n                }).catch(error => {\n                  this.emit(\"error\", error); // Allow another getLogs (the range was not updated)\n\n                  event._inflight = false;\n                });\n                runners.push(runner);\n              }\n\n              break;\n            }\n        }\n      });\n\n      this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  } // Deprecated; do not use this\n\n\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n\n    if (this.polling) {\n      this.poll();\n    }\n  }\n\n  get network() {\n    return this._network;\n  } // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready(); // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n\n      const currentNetwork = yield this.detectNetwork();\n\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork; // Reset all internal block number guards and caches\n\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n\n      return network;\n    });\n  }\n\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n\n  get polling() {\n    return this._poller != null;\n  }\n\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll(); // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            } // Clear out the bootstrap so we can do another\n\n\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n\n    this._pollingInterval = value;\n\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n\n  _getFastBlockNumber() {\n    const now = getTime(); // Stale block number, request a newer value\n\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n\n        return this._fastBlockNumber;\n      });\n    }\n\n    return this._fastBlockNumberPromise;\n  }\n\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    } // Update the time we updated the blocknumber\n\n\n    this._fastQueryDate = getTime(); // Newer block number, use  it\n\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good\n\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      } // Poll until the receipt is good...\n\n\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n\n          if (alreadyDone()) {\n            return;\n          }\n\n          resolve(receipt);\n        };\n\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            } // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n\n\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                } // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti]; // Successfully mined!\n\n                    if (tx.hash === transactionHash) {\n                      return;\n                    } // Matches our transaction from and nonce; its a replacement\n\n\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      } // Get the receipt of the replacement\n\n\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations); // Already resolved or rejected (prolly a timeout)\n\n                      if (alreadyDone()) {\n                        return;\n                      } // The reason we were replaced\n\n\n                      let reason = \"replaced\";\n\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      } // Explain why we were replaced\n\n\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n\n                  scannedBlock++;\n                }\n              }\n\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            });\n          });\n\n          if (done) {\n            return;\n          }\n\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n\n          if (timer.unref) {\n            timer.unref();\n          }\n\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  } // This should be called by any subclass wrapping a TransactionResponse\n\n\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n\n    const result = tx; // Check the hash we expect is the same as the hash the server reported\n\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n\n      if (timeout == null) {\n        timeout = 0;\n      } // Get the details to detect replacement\n\n\n      let replacement = undefined;\n\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n      if (receipt == null && confirms === 0) {\n        return null;\n      } // No longer pending, allow the polling loop to garbage collect this\n\n\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n\n      return receipt;\n    });\n\n    return result;\n  }\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n\n      if (tx.confirmations == null) {\n        tx.confirmations = 0;\n      }\n\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n\n  _call(transaction, blockTag, attempt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (attempt >= MAX_CCIP_REDIRECTS) {\n        logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n          redirects: attempt,\n          transaction\n        });\n      }\n\n      const txSender = transaction.to;\n      const result = yield this.perform(\"call\", {\n        transaction,\n        blockTag\n      }); // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n\n      if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4) {\n        try {\n          const data = hexDataSlice(result, 4); // Check the sender of the OffchainLookup matches the transaction\n\n          const sender = hexDataSlice(data, 0, 32);\n\n          if (!BigNumber.from(sender).eq(txSender)) {\n            logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          } // Read the URLs from the response\n\n\n          const urls = [];\n          const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n          const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n          const urlsData = hexDataSlice(data, urlsOffset + 32);\n\n          for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n\n            if (url == null) {\n              logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                name: \"OffchainLookup\",\n                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                transaction,\n                data: result\n              });\n            }\n\n            urls.push(url);\n          } // Get the CCIP calldata to forward\n\n\n          const calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)\n\n\n          if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n            logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n\n          const callbackSelector = hexDataSlice(data, 96, 100); // Get the extra data to send back to the contract as context\n\n          const extraData = _parseBytes(data, 128);\n\n          const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n\n          if (ccipResult == null) {\n            logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n\n          const tx = {\n            to: txSender,\n            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n          };\n          return this._call(tx, blockTag, attempt + 1);\n        } catch (error) {\n          if (error.code === Logger.errors.SERVER_ERROR) {\n            throw error;\n          }\n        }\n      }\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params: {\n            transaction,\n            blockTag\n          },\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const resolved = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag),\n        ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n      });\n      return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n    });\n  }\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      addressOrName = yield addressOrName;\n\n      if (typeof addressOrName !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n      }\n\n      const address = yield this.resolveName(addressOrName);\n\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n\n      return address;\n    });\n  }\n\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag; // If blockTag is a number (not \"latest\", etc), this is the block number\n\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params); // Block was not found\n\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          } // For block tags, if we are asking for a future block, we return null\n\n\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          } // Retry on the next block\n\n\n          return undefined;\n        } // Add transactions\n\n\n        if (includeTransactions) {\n          let blockNumber = null;\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              } // Add the confirmations using the fast block number (pessimistic)\n\n\n              let confirmations = blockNumber - tx.blockNumber + 1;\n\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n\n              tx.confirmations = confirmations;\n            }\n          }\n\n          const blockWithTxs = this.formatter.blockWithTransactions(block);\n          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));\n          return blockWithTxs;\n        }\n\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        }\n\n        const tx = this.formatter.transactionResponse(result);\n\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - tx.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          tx.confirmations = confirmations;\n        }\n\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        } // \"geth-etc\" returns receipts before they are ready\n\n\n        if (result.blockHash == null) {\n          return undefined;\n        }\n\n        const receipt = this.formatter.receipt(result);\n\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          receipt.confirmations = confirmations;\n        }\n\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n\n        return this.formatter.blockTag(blockNumber);\n      }\n\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let currentName = name;\n\n      while (true) {\n        if (currentName === \"\" || currentName === \".\") {\n          return null;\n        } // Optimization since the eth node cannot change and does\n        // not have a wildcard resolver\n\n\n        if (name !== \"eth\" && currentName === \"eth\") {\n          return null;\n        } // Check the current node for a resolver\n\n\n        const addr = yield this._getResolver(currentName, \"getResolver\"); // Found a resolver!\n\n        if (addr != null) {\n          const resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n\n          if (currentName !== name && !(yield resolver.supportsWildcard())) {\n            return null;\n          }\n\n          return resolver;\n        } // Get the parent node\n\n\n        currentName = currentName.split(\".\").slice(1).join(\".\");\n      }\n    });\n  }\n\n  _getResolver(name, operation) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (operation == null) {\n        operation = \"ENS\";\n      }\n\n      const network = yield this.getNetwork(); // No ENS...\n\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation,\n          network: network.name\n        });\n      }\n\n      try {\n        // keccak256(\"resolver(bytes32)\")\n        const addrData = yield this.call({\n          to: network.ensAddress,\n          data: \"0x0178b8bf\" + namehash(name).substring(2)\n        });\n        return this.formatter.callAddress(addrData);\n      } catch (error) {// ENS registry cannot throw errors on resolver(bytes32)\n      }\n\n      return null;\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name; // If it is already an address, nothing to resolve\n\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      } // Get the addr from the resolver\n\n\n      const resolver = yield this.getResolver(name);\n\n      if (!resolver) {\n        return null;\n      }\n\n      return yield resolver.getAddress();\n    });\n  }\n\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n\n      if (resolverAddr == null) {\n        return null;\n      } // keccak(\"name(bytes32)\")\n\n\n      const name = _parseString(yield this.call({\n        to: resolverAddr,\n        data: \"0x691f3431\" + namehash(node).substring(2)\n      }), 0);\n\n      const addr = yield this.resolveName(name);\n\n      if (addr != address) {\n        return null;\n      }\n\n      return name;\n    });\n  }\n\n  getAvatar(nameOrAddress) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let resolver = null;\n\n      if (isHexString(nameOrAddress)) {\n        // Address; reverse lookup\n        const address = this.formatter.address(nameOrAddress);\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n        const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n\n        if (!resolverAddress) {\n          return null;\n        } // Try resolving the avatar against the addr.reverse resolver\n\n\n        resolver = new Resolver(this, resolverAddress, node);\n\n        try {\n          const avatar = yield resolver.getAvatar();\n\n          if (avatar) {\n            return avatar.url;\n          }\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n        } // Try getting the name and performing forward lookup; allowing wildcards\n\n\n        try {\n          // keccak(\"name(bytes32)\")\n          const name = _parseString(yield this.call({\n            to: resolverAddress,\n            data: \"0x691f3431\" + namehash(node).substring(2)\n          }), 0);\n\n          resolver = yield this.getResolver(name);\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n\n          return null;\n        }\n      } else {\n        // ENS name; forward lookup with wildcard\n        resolver = yield this.getResolver(nameOrAddress);\n\n        if (!resolver) {\n          return null;\n        }\n      }\n\n      const avatar = yield resolver.getAvatar();\n\n      if (avatar == null) {\n        return null;\n      }\n\n      return avatar.url;\n    });\n  }\n\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n\n    this._events.push(event);\n\n    this._startEvent(event);\n\n    return this;\n  }\n\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  emit(eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n\n      if (found) {\n        return true;\n      }\n\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n  removeAllListeners(eventName) {\n    let stopped = [];\n\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ForkEvent","Provider","encode","base64Encode","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","dnsEncode","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","bech32","Logger","version","logger","Formatter","MAX_CCIP_REDIRECTS","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","constructor","tag","listener","once","_lastBlockNumber","_inflight","event","type","hash","filter","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","value","from","toHexString","base58Encode","matcherIpfs","RegExp","matchers","_parseString","result","start","_parseBytes","error","offset","toNumber","getIpfsLink","link","match","substring","numPad","padded","Uint8Array","set","bytesPad","Math","ceil","encodeBytes","datas","byteCount","i","push","Resolver","provider","name","resolvedAddress","formatter","supportsWildcard","_supportsEip2544","call","to","then","eq","catch","code","errors","CALL_EXCEPTION","_fetch","selector","parameters","tx","ccipReadEnabled","parseBytes","throwError","transaction","_fetchBytes","_getAddress","coinType","hexBytes","coinInfo","String","UNSUPPORTED_OPERATION","operation","bytes","parseInt","words","toWords","unshift","getAddress","callAddress","getAvatar","linkage","content","avatar","getText","scheme","url","owner","_resolvedAddress","addr","tokenId","tokenOwner","balance","isZero","toString","metadataUrl","replace","metadata","JSON","stringify","imageUrl","image","ipfs","getContentHash","ipns","swarm","skynet","urlSafe","a","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","_events","_emitted","block","disableCcipRead","new","target","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","NETWORK_ERROR","undefined","ccipReadFetch","calldata","urls","sender","errorMessages","href","json","errorPassThrough","response","status","statusCode","errorMessage","message","SERVER_ERROR","m","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","receipt","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","nonce","mined","getTransaction","getBlockWithTransactions","ti","transactions","reason","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","getGasPrice","method","getBalance","addressOrName","blockTag","params","_getBlockTag","getCode","getStorageAt","position","p","expectedHash","returnedHash","wait","confirms","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","accessList","transactionRequest","_getFilter","_call","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","extraData","ccipResult","resolved","estimateGas","resolveName","_getBlock","blockHashOrBlockTag","includeTransactions","blockWithTxs","blockWithTransactions","oncePoll","getBlock","transactionResponse","removed","arrayOf","filterLog","bind","getEtherPrice","getResolver","currentName","_getResolver","resolver","ensAddress","addrData","lookupAddress","node","resolverAddr","nameOrAddress","resolverAddress","NOT_IMPLEMENTED","_startEvent","e","_stopEvent","_addEventListener","args","stopped","eventTag","apply","listenerCount","listeners","off","removeAllListeners","found"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/providers/src.ts/base-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // Filter from the last known event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild\n                        if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {\n                            filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}