{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class ErrorDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n\n}\nconst BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\n\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n\nexport class Interface {\n  constructor(fragments) {\n    let abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          } //checkNames(fragment, \"input\", fragment.inputs);\n\n\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.functions;\n          break;\n\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n\n        case \"error\":\n          bucket = this.errors;\n          break;\n\n        default:\n          return;\n      }\n\n      let signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor add a default\n\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n\n    const abi = this.fragments.map(fragment => fragment.format(format)); // We need to re-bundle the JSON fragments a bit\n\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n\n    return abi;\n  } // Sub-classes can override these to handle other blockchains\n\n\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n\n  static getAddress(address) {\n    return getAddress(address);\n  }\n\n  static getSighash(fragment) {\n    return hexDataSlice(id(fragment.format()), 0, 4);\n  }\n\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  } // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n\n      return this.functions[matching[0]];\n    } // Normalize the signature and lookup the function\n\n\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n\n    return result;\n  } // Find an event definition by any means necessary (unless it is ambiguous)\n\n\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n\n      return this.events[matching[0]];\n    } // Normalize the signature and lookup the function\n\n\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n\n    return result;\n  } // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n  getError(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      const getSighash = getStatic(this.constructor, \"getSighash\");\n\n      for (const name in this.errors) {\n        const error = this.errors[name];\n\n        if (nameOrSignatureOrSighash === getSighash(error)) {\n          return this.errors[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.errors).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching error\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n      }\n\n      return this.errors[matching[0]];\n    } // Normalize the signature and lookup the function\n\n\n    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n    }\n\n    return result;\n  } // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n\n  getSighash(fragment) {\n    if (typeof fragment === \"string\") {\n      try {\n        fragment = this.getFunction(fragment);\n      } catch (error) {\n        try {\n          fragment = this.getError(fragment);\n        } catch (_) {\n          throw error;\n        }\n      }\n    }\n\n    return getStatic(this.constructor, \"getSighash\")(fragment);\n  } // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n\n  decodeErrorResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n\n    const bytes = arrayify(data);\n\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n      logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n    }\n\n    return this._decodeParams(fragment.inputs, bytes.slice(4));\n  }\n\n  encodeErrorResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n\n    return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n  } // Decode the data for a function call (e.g. tx.data)\n\n\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    const bytes = arrayify(data);\n\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  } // Encode the data for a function call (e.g. tx.data)\n\n\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  } // Decode the result from a function call (e.g. from eth_call)\n\n\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    let bytes = arrayify(data);\n    let reason = null;\n    let message = \"\";\n    let errorArgs = null;\n    let errorName = null;\n    let errorSignature = null;\n\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n\n        break;\n\n      case 4:\n        {\n          const selector = hexlify(bytes.slice(0, 4));\n          const builtin = BuiltinErrors[selector];\n\n          if (builtin) {\n            errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n            errorName = builtin.name;\n            errorSignature = builtin.signature;\n\n            if (builtin.reason) {\n              reason = errorArgs[0];\n            }\n\n            if (errorName === \"Error\") {\n              message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n            } else if (errorName === \"Panic\") {\n              message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n            }\n          } else {\n            try {\n              const error = this.getError(selector);\n              errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n              errorName = error.name;\n              errorSignature = error.format();\n            } catch (error) {}\n          }\n\n          break;\n        }\n    }\n\n    return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      data: hexlify(data),\n      errorArgs,\n      errorName,\n      errorSignature,\n      reason\n    });\n  } // Encode the result for a function call (e.g. for eth_call)\n\n\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  } // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n\n    let topics = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      } // Check addresses are valid\n\n\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n\n      return hexZeroPad(hexlify(value), 32);\n    };\n\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n\n        return;\n      }\n\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    }); // Trim off trailing nulls\n\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n\n    return topics;\n  }\n\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TODO\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  } // Decode a filter for the event and the search criteria\n\n\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n\n      topics = topics.slice(1);\n    }\n\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n    let result = [];\n    let nonIndexedIndex = 0,\n        indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      } // Add the keyword argument if named and safe\n\n\n      if (param.name && result[param.name] == null) {\n        const value = result[index]; // Make error named values throw on access\n\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            enumerable: true,\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    }); // Make all error indexed values throw on access\n\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          enumerable: true,\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n\n    return Object.freeze(result);\n  } // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n\n\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n    if (!fragment) {\n      return null;\n    }\n\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  } // @TODO\n  //parseCallResult(data: BytesLike): ??\n  // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n\n\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n\n    if (!fragment || fragment.anonymous) {\n      return null;\n    } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe just a fragment?\n\n\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n\n  parseError(data) {\n    const hexData = hexlify(data);\n    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n\n    if (!fragment) {\n      return null;\n    }\n\n    return new ErrorDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n      errorFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n\n\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","ErrorDescription","Indexed","isIndexed","value","_isIndexed","BuiltinErrors","signature","name","inputs","reason","wrapAccessError","property","error","wrap","Error","Interface","constructor","fragments","abi","JSON","parse","map","fragment","from","filter","new","target","forEach","bucket","type","deploy","warn","functions","events","errors","format","payable","full","sighash","throwArgumentError","json","stringify","j","getAbiCoder","address","getSighash","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getError","_","_decodeParams","params","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","decodeErrorResult","bytes","slice","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","message","errorArgs","errorName","errorSignature","_getWordSize","outputs","selector","builtin","throwError","CALL_EXCEPTION","method","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","index","indexed","baseType","Array","isArray","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","enumerable","get","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","parseError","hexData","errorFragment","isInterface","_isInterface"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/abi/src.ts/interface.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let message = \"\";\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${ JSON.stringify(errorArgs[0]) }`;\n                    } else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${ errorArgs[0] }`;\n                    }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) { }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = eventFragment.inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}