import Torus, { TorusCtorArgs, TorusLoginParams, TorusParams } from "@toruslabs/solana-embed";
import { ADAPTER_CATEGORY_TYPE, ADAPTER_STATUS_TYPE, AdapterInitOptions, AdapterNamespaceType, BaseAdapterSettings, ChainNamespaceType, CustomChainConfig, SafeEventEmitterProvider, UserInfo } from "@web3auth/base";
import { BaseSolanaAdapter } from "@web3auth/base-solana-adapter";
export interface SolanaWalletOptions extends BaseAdapterSettings {
    adapterSettings?: TorusCtorArgs;
    loginSettings?: TorusLoginParams;
    initParams?: Omit<TorusParams, "network">;
}
export declare class SolanaWalletAdapter extends BaseSolanaAdapter<void> {
    readonly name: string;
    readonly adapterNamespace: AdapterNamespaceType;
    readonly currentChainNamespace: ChainNamespaceType;
    readonly type: ADAPTER_CATEGORY_TYPE;
    status: ADAPTER_STATUS_TYPE;
    torusInstance: Torus | null;
    private torusWalletOptions?;
    private initParams?;
    private loginSettings?;
    private solanaProvider;
    constructor(params?: SolanaWalletOptions);
    get provider(): SafeEventEmitterProvider | null;
    set provider(_: SafeEventEmitterProvider | null);
    init(options?: AdapterInitOptions): Promise<void>;
    connect(): Promise<SafeEventEmitterProvider | null>;
    disconnect(options?: {
        cleanup: boolean;
    }): Promise<void>;
    getUserInfo(): Promise<Partial<UserInfo>>;
    addChain(chainConfig: CustomChainConfig, init?: boolean): Promise<void>;
    switchChain(params: {
        chainId: string;
    }, init?: boolean): Promise<void>;
}
