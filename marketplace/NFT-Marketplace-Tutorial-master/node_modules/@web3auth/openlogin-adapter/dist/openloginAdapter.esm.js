import OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams, SUPPORTED_KEY_CURVES } from '@toruslabs/openlogin';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, WalletInitializationError, log, ADAPTER_EVENTS, WalletLoginError, Web3AuthError } from '@web3auth/base';
import { CommonPrivateKeyProvider } from '@web3auth/base-provider';
import merge from 'lodash.merge';

const getOpenloginDefaultOptions = () => {
  return {
    adapterSettings: {
      network: OPENLOGIN_NETWORK.MAINNET,
      clientId: "",
      uxMode: UX_MODE.POPUP
    },
    loginSettings: {}
  };
};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class OpenloginAdapter extends BaseAdapter {
  constructor() {
    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(params);
    _defineProperty(this, "name", WALLET_ADAPTERS.OPENLOGIN);
    _defineProperty(this, "adapterNamespace", ADAPTER_NAMESPACES.MULTICHAIN);
    _defineProperty(this, "type", ADAPTER_CATEGORY.IN_APP);
    _defineProperty(this, "openloginInstance", null);
    _defineProperty(this, "status", ADAPTER_STATUS.NOT_READY);
    _defineProperty(this, "currentChainNamespace", CHAIN_NAMESPACES.EIP155);
    _defineProperty(this, "openloginOptions", void 0);
    _defineProperty(this, "loginSettings", {
      loginProvider: ""
    });
    _defineProperty(this, "privKeyProvider", null);
    this.setAdapterSettings(_objectSpread(_objectSpread({}, params.adapterSettings), {}, {
      chainConfig: params.chainConfig,
      clientId: params.clientId || "",
      sessionTime: params.sessionTime,
      web3AuthNetwork: params.web3AuthNetwork,
      useCoreKitKey: params.useCoreKitKey
    }));
    this.loginSettings = params.loginSettings || {
      loginProvider: ""
    };
  }
  get chainConfigProxy() {
    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;
  }
  get provider() {
    var _this$privKeyProvider;
    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;
  }
  set provider(_) {
    throw new Error("Not implemented");
  }
  async init(options) {
    super.checkInitializationRequirements();
    if (!this.clientId) throw WalletInitializationError.invalidParams("clientId is required before openlogin's initialization");
    if (!this.openloginOptions) throw WalletInitializationError.invalidParams("openloginOptions is required before openlogin's initialization");
    let isRedirectResult = false;
    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT || this.openloginOptions.uxMode === UX_MODE.SESSIONLESS_REDIRECT) {
      const redirectResult = getHashQueryParams();
      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {
        isRedirectResult = true;
      }
    }
    this.openloginOptions = _objectSpread(_objectSpread({}, this.openloginOptions), {}, {
      replaceUrlOnRedirect: isRedirectResult
    });
    this.openloginInstance = new OpenLogin(_objectSpread(_objectSpread({}, this.openloginOptions), {}, {
      clientId: this.clientId,
      network: this.openloginOptions.network || this.web3AuthNetwork || OPENLOGIN_NETWORK.MAINNET
    }));
    log.debug("initializing openlogin adapter init");
    await this.openloginInstance.init();
    this.status = ADAPTER_STATUS.READY;
    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);
    try {
      log.debug("initializing openlogin adapter");
      const finalPrivKey = this._getFinalPrivKey();
      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true
      if (finalPrivKey && (options.autoConnect || isRedirectResult)) {
        this.rehydrated = true;
        await this.connect();
      }
    } catch (error) {
      log.error("Failed to connect with cached openlogin provider", error);
      this.emit("ERRORED", error);
    }
  }
  async connect() {
    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      loginProvider: ""
    };
    super.checkConnectionRequirements();
    this.status = ADAPTER_STATUS.CONNECTING;
    this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {
      adapter: WALLET_ADAPTERS.OPENLOGIN
    }));
    try {
      await this.connectWithProvider(params);
      return this.provider;
    } catch (error) {
      log.error("Failed to connect with openlogin provider", error);
      // ready again to be connected
      this.status = ADAPTER_STATUS.READY;
      this.emit(ADAPTER_EVENTS.ERRORED, error);
      if (error !== null && error !== void 0 && error.message.includes("user closed popup")) {
        throw WalletLoginError.popupClosed();
      } else if (error instanceof Web3AuthError) {
        throw error;
      }
      throw WalletLoginError.connectionError("Failed to login with openlogin");
    }
  }
  async disconnect() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError("Not connected with wallet");
    if (!this.openloginInstance) throw WalletInitializationError.notReady("openloginInstance is not ready");
    await this.openloginInstance.logout();
    if (options.cleanup) {
      this.status = ADAPTER_STATUS.NOT_READY;
      this.openloginInstance = null;
      this.privKeyProvider = null;
    } else {
      // ready to be connected again
      this.status = ADAPTER_STATUS.READY;
    }
    this.rehydrated = false;
    this.emit(ADAPTER_EVENTS.DISCONNECTED);
  }
  async authenticateUser() {
    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    const userInfo = await this.getUserInfo();
    return {
      idToken: userInfo.idToken
    };
  }
  async getUserInfo() {
    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError("Not connected with wallet");
    if (!this.openloginInstance) throw WalletInitializationError.notReady("openloginInstance is not ready");
    const userInfo = await this.openloginInstance.getUserInfo();
    return userInfo;
  }
  // should be called only before initialization.
  setAdapterSettings(adapterSettings) {
    super.setAdapterSettings(adapterSettings);
    const defaultOptions = getOpenloginDefaultOptions();
    log.info("setting adapter settings", adapterSettings);
    this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions), adapterSettings);
    if (adapterSettings.web3AuthNetwork) {
      this.openloginOptions.network = adapterSettings.web3AuthNetwork;
    }
    if (adapterSettings.useCoreKitKey !== undefined) {
      this.openloginOptions.useCoreKitKey = adapterSettings.useCoreKitKey;
    }
  }
  async addChain(chainConfig) {
    var _this$privKeyProvider2;
    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    super.checkAddChainRequirements(init);
    (_this$privKeyProvider2 = this.privKeyProvider) === null || _this$privKeyProvider2 === void 0 ? void 0 : _this$privKeyProvider2.addChain(chainConfig);
    this.addChainConfig(chainConfig);
  }
  async switchChain(params) {
    var _this$privKeyProvider3;
    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    super.checkSwitchChainRequirements(params, init);
    await ((_this$privKeyProvider3 = this.privKeyProvider) === null || _this$privKeyProvider3 === void 0 ? void 0 : _this$privKeyProvider3.switchChain(params));
    this.setAdapterSettings({
      chainConfig: this.getChainConfig(params.chainId)
    });
  }
  _getFinalPrivKey() {
    var _this$openloginOption;
    if (!this.openloginInstance) return "";
    let finalPrivKey = this.openloginInstance.privKey;
    // coreKitKey is available only for custom verifiers by default
    if ((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.useCoreKitKey) {
      if (!this.openloginInstance.coreKitKey) {
        throw WalletLoginError.coreKitKeyNotFound();
      }
      finalPrivKey = this.openloginInstance.coreKitKey;
    }
    return finalPrivKey;
  }
  async connectWithProvider() {
    var _params$extraLoginOpt;
    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      loginProvider: ""
    };
    if (!this.chainConfig) throw WalletInitializationError.invalidParams("chainConfig is required before initialization");
    if (!this.openloginInstance) throw WalletInitializationError.notReady("openloginInstance is not ready");
    const keyAvailable = this._getFinalPrivKey();
    // if not logged in then login
    if (!keyAvailable || (_params$extraLoginOpt = params.extraLoginOptions) !== null && _params$extraLoginOpt !== void 0 && _params$extraLoginOpt.id_token) {
      var _params$extraLoginOpt2;
      if (!this.loginSettings.curve) {
        this.loginSettings.curve = this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;
      }
      if (!params.loginProvider && !this.loginSettings.loginProvider) throw WalletInitializationError.invalidParams("loginProvider is required for login");
      await this.openloginInstance.login(merge(this.loginSettings, params, {
        extraLoginOptions: _objectSpread(_objectSpread({}, params.extraLoginOptions || {}), {}, {
          login_hint: params.login_hint || ((_params$extraLoginOpt2 = params.extraLoginOptions) === null || _params$extraLoginOpt2 === void 0 ? void 0 : _params$extraLoginOpt2.login_hint)
        })
      }));
    }
    let finalPrivKey = this._getFinalPrivKey();
    if (finalPrivKey) {
      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {
        const {
          getED25519Key
        } = await import('@toruslabs/openlogin-ed25519');
        finalPrivKey = getED25519Key(finalPrivKey).sk.toString("hex");
      }
      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {
        const {
          SolanaPrivateKeyProvider
        } = await import('@web3auth/solana-provider');
        this.privKeyProvider = new SolanaPrivateKeyProvider({
          config: {
            chainConfig: this.chainConfig
          }
        });
      } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {
        const {
          EthereumPrivateKeyProvider
        } = await import('@web3auth/ethereum-provider');
        this.privKeyProvider = new EthereumPrivateKeyProvider({
          config: {
            chainConfig: this.chainConfig
          }
        });
      } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {
        this.privKeyProvider = new CommonPrivateKeyProvider();
      } else {
        throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);
      }
      await this.privKeyProvider.setupProvider(finalPrivKey);
      this.status = ADAPTER_STATUS.CONNECTED;
      this.emit(ADAPTER_EVENTS.CONNECTED, {
        adapter: WALLET_ADAPTERS.OPENLOGIN,
        reconnected: this.rehydrated
      });
    }
  }
}

export { OpenloginAdapter, getOpenloginDefaultOptions };
//# sourceMappingURL=openloginAdapter.esm.js.map
