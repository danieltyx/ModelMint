{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { id } from \"./id\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nfunction hexPadRight(value) {\n  const bytes = arrayify(value);\n  const padOffset = bytes.length % 32;\n\n  if (padOffset) {\n    return hexConcat([bytes, padding.slice(padOffset)]);\n  }\n\n  return hexlify(bytes);\n}\n\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nconst domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\n\nfunction checkString(key) {\n  return function (value) {\n    if (typeof value !== \"string\") {\n      logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n    }\n\n    return value;\n  };\n}\n\nconst domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function (value) {\n    try {\n      return BigNumber.from(value).toString();\n    } catch (error) {}\n\n    return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n  },\n  verifyingContract: function (value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n\n    return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n  },\n  salt: function (value) {\n    try {\n      const bytes = arrayify(value);\n\n      if (bytes.length !== 32) {\n        throw new Error(\"bad length\");\n      }\n\n      return hexlify(bytes);\n    } catch (error) {}\n\n    return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n  }\n};\n\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    const match = type.match(/^(u?)int(\\d*)$/);\n\n    if (match) {\n      const signed = match[1] === \"\";\n      const width = parseInt(match[2] || \"256\");\n\n      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {\n        logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n      }\n\n      const boundsUpper = MaxUint256.mask(signed ? width - 1 : width);\n      const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n      return function (value) {\n        const v = BigNumber.from(value);\n\n        if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n          logger.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n        }\n\n        return hexZeroPad(v.toTwos(256).toHexString(), 32);\n      };\n    }\n  } // bytesXX\n\n  {\n    const match = type.match(/^bytes(\\d+)$/);\n\n    if (match) {\n      const width = parseInt(match[1]);\n\n      if (width === 0 || width > 32 || match[1] !== String(width)) {\n        logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n      }\n\n      return function (value) {\n        const bytes = arrayify(value);\n\n        if (bytes.length !== width) {\n          logger.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n        }\n\n        return hexPadRight(value);\n      };\n    }\n  }\n\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return hexZeroPad(getAddress(value), 32);\n      };\n\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n\n  return null;\n}\n\nfunction encodeType(name, fields) {\n  return `${name}(${fields.map(_ref => {\n    let {\n      name,\n      type\n    } = _ref;\n    return type + \" \" + name;\n  }).join(\",\")})`;\n}\n\nexport class TypedDataEncoder {\n  constructor(types) {\n    defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n    defineReadOnly(this, \"_encoderCache\", {});\n    defineReadOnly(this, \"_types\", {}); // Link struct types to their direct child structs\n\n    const links = {}; // Link structs to structs which contain them as a child\n\n    const parents = {}; // Link all subtypes within a given struct\n\n    const subtypes = {};\n    Object.keys(types).forEach(type => {\n      links[type] = {};\n      parents[type] = [];\n      subtypes[type] = {};\n    });\n\n    for (const name in types) {\n      const uniqueNames = {};\n      types[name].forEach(field => {\n        // Check each field has a unique name\n        if (uniqueNames[field.name]) {\n          logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n        }\n\n        uniqueNames[field.name] = true; // Get the base type (drop any array specifiers)\n\n        const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n\n        if (baseType === name) {\n          logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n        } // Is this a base encoding type?\n\n\n        const encoder = getBaseEncoder(baseType);\n\n        if (encoder) {\n          return;\n        }\n\n        if (!parents[baseType]) {\n          logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n        } // Add linkage\n\n\n        parents[baseType].push(name);\n        links[name][baseType] = true;\n      });\n    } // Deduce the primary type\n\n\n    const primaryTypes = Object.keys(parents).filter(n => parents[n].length === 0);\n\n    if (primaryTypes.length === 0) {\n      logger.throwArgumentError(\"missing primary type\", \"types\", types);\n    } else if (primaryTypes.length > 1) {\n      logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map(t => JSON.stringify(t)).join(\", \")}`, \"types\", types);\n    }\n\n    defineReadOnly(this, \"primaryType\", primaryTypes[0]); // Check for circular type references\n\n    function checkCircular(type, found) {\n      if (found[type]) {\n        logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n      }\n\n      found[type] = true;\n      Object.keys(links[type]).forEach(child => {\n        if (!parents[child]) {\n          return;\n        } // Recursively check children\n\n\n        checkCircular(child, found); // Mark all ancestors as having this decendant\n\n        Object.keys(found).forEach(subtype => {\n          subtypes[subtype][child] = true;\n        });\n      });\n      delete found[type];\n    }\n\n    checkCircular(this.primaryType, {}); // Compute each fully describe type\n\n    for (const name in subtypes) {\n      const st = Object.keys(subtypes[name]);\n      st.sort();\n      this._types[name] = encodeType(name, types[name]) + st.map(t => encodeType(t, types[t])).join(\"\");\n    }\n  }\n\n  getEncoder(type) {\n    let encoder = this._encoderCache[type];\n\n    if (!encoder) {\n      encoder = this._encoderCache[type] = this._getEncoder(type);\n    }\n\n    return encoder;\n  }\n\n  _getEncoder(type) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n\n      if (encoder) {\n        return encoder;\n      }\n    } // Array\n\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n\n    if (match) {\n      const subtype = match[1];\n      const subEncoder = this.getEncoder(subtype);\n      const length = parseInt(match[3]);\n      return value => {\n        if (length >= 0 && value.length !== length) {\n          logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n        }\n\n        let result = value.map(subEncoder);\n\n        if (this._types[subtype]) {\n          result = result.map(keccak256);\n        }\n\n        return keccak256(hexConcat(result));\n      };\n    } // Struct\n\n\n    const fields = this.types[type];\n\n    if (fields) {\n      const encodedType = id(this._types[type]);\n      return value => {\n        const values = fields.map(_ref2 => {\n          let {\n            name,\n            type\n          } = _ref2;\n          const result = this.getEncoder(type)(value[name]);\n\n          if (this._types[type]) {\n            return keccak256(result);\n          }\n\n          return result;\n        });\n        values.unshift(encodedType);\n        return hexConcat(values);\n      };\n    }\n\n    return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n  }\n\n  encodeType(name) {\n    const result = this._types[name];\n\n    if (!result) {\n      logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n    }\n\n    return result;\n  }\n\n  encodeData(type, value) {\n    return this.getEncoder(type)(value);\n  }\n\n  hashStruct(name, value) {\n    return keccak256(this.encodeData(name, value));\n  }\n\n  encode(value) {\n    return this.encodeData(this.primaryType, value);\n  }\n\n  hash(value) {\n    return this.hashStruct(this.primaryType, value);\n  }\n\n  _visit(type, value, callback) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n\n      if (encoder) {\n        return callback(type, value);\n      }\n    } // Array\n\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n\n    if (match) {\n      const subtype = match[1];\n      const length = parseInt(match[3]);\n\n      if (length >= 0 && value.length !== length) {\n        logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n      }\n\n      return value.map(v => this._visit(subtype, v, callback));\n    } // Struct\n\n\n    const fields = this.types[type];\n\n    if (fields) {\n      return fields.reduce((accum, _ref3) => {\n        let {\n          name,\n          type\n        } = _ref3;\n        accum[name] = this._visit(type, value[name], callback);\n        return accum;\n      }, {});\n    }\n\n    return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n  }\n\n  visit(value, callback) {\n    return this._visit(this.primaryType, value, callback);\n  }\n\n  static from(types) {\n    return new TypedDataEncoder(types);\n  }\n\n  static getPrimaryType(types) {\n    return TypedDataEncoder.from(types).primaryType;\n  }\n\n  static hashStruct(name, types, value) {\n    return TypedDataEncoder.from(types).hashStruct(name, value);\n  }\n\n  static hashDomain(domain) {\n    const domainFields = [];\n\n    for (const name in domain) {\n      const type = domainFieldTypes[name];\n\n      if (!type) {\n        logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n      }\n\n      domainFields.push({\n        name,\n        type\n      });\n    }\n\n    domainFields.sort((a, b) => {\n      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n    });\n    return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n      EIP712Domain: domainFields\n    }, domain);\n  }\n\n  static encode(domain, types, value) {\n    return hexConcat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n  }\n\n  static hash(domain, types, value) {\n    return keccak256(TypedDataEncoder.encode(domain, types, value));\n  } // Replaces all address types with ENS names with their looked up address\n\n\n  static resolveNames(domain, types, value, resolveName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Make a copy to isolate it from the object passed in\n      domain = shallowCopy(domain); // Look up all ENS names\n\n      const ensCache = {}; // Do we need to look up the domain's verifyingContract?\n\n      if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n        ensCache[domain.verifyingContract] = \"0x\";\n      } // We are going to use the encoder to visit all the base values\n\n\n      const encoder = TypedDataEncoder.from(types); // Get a list of all the addresses\n\n      encoder.visit(value, (type, value) => {\n        if (type === \"address\" && !isHexString(value, 20)) {\n          ensCache[value] = \"0x\";\n        }\n\n        return value;\n      }); // Lookup each name\n\n      for (const name in ensCache) {\n        ensCache[name] = yield resolveName(name);\n      } // Replace the domain verifyingContract if needed\n\n\n      if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n        domain.verifyingContract = ensCache[domain.verifyingContract];\n      } // Replace all ENS names with their address\n\n\n      value = encoder.visit(value, (type, value) => {\n        if (type === \"address\" && ensCache[value]) {\n          return ensCache[value];\n        }\n\n        return value;\n      });\n      return {\n        domain,\n        value\n      };\n    });\n  }\n\n  static getPayload(domain, types, value) {\n    // Validate the domain fields\n    TypedDataEncoder.hashDomain(domain); // Derive the EIP712Domain Struct reference type\n\n    const domainValues = {};\n    const domainTypes = [];\n    domainFieldNames.forEach(name => {\n      const value = domain[name];\n\n      if (value == null) {\n        return;\n      }\n\n      domainValues[name] = domainChecks[name](value);\n      domainTypes.push({\n        name,\n        type: domainFieldTypes[name]\n      });\n    });\n    const encoder = TypedDataEncoder.from(types);\n    const typesWithDomain = shallowCopy(types);\n\n    if (typesWithDomain.EIP712Domain) {\n      logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n    } else {\n      typesWithDomain.EIP712Domain = domainTypes;\n    } // Validate the data structures and types\n\n\n    encoder.encode(value);\n    return {\n      types: typesWithDomain,\n      domain: domainValues,\n      primaryType: encoder.primaryType,\n      message: encoder.visit(value, (type, value) => {\n        // bytes\n        if (type.match(/^bytes(\\d*)/)) {\n          return hexlify(arrayify(value));\n        } // uint or int\n\n\n        if (type.match(/^u?int/)) {\n          return BigNumber.from(value).toString();\n        }\n\n        switch (type) {\n          case \"address\":\n            return value.toLowerCase();\n\n          case \"bool\":\n            return !!value;\n\n          case \"string\":\n            if (typeof value !== \"string\") {\n              logger.throwArgumentError(`invalid string`, \"value\", value);\n            }\n\n            return value;\n        }\n\n        return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n      })\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getAddress","BigNumber","arrayify","hexConcat","hexlify","hexZeroPad","isHexString","keccak256","deepCopy","defineReadOnly","shallowCopy","Logger","version","logger","id","padding","Uint8Array","fill","NegativeOne","from","Zero","One","MaxUint256","hexPadRight","value","bytes","padOffset","length","slice","hexTrue","toHexString","hexFalse","domainFieldTypes","name","chainId","verifyingContract","salt","domainFieldNames","checkString","key","throwArgumentError","JSON","stringify","domainChecks","toString","error","toLowerCase","Error","getBaseEncoder","type","match","signed","width","parseInt","String","boundsUpper","mask","boundsLower","add","mul","v","lt","gt","toTwos","encodeType","fields","map","join","TypedDataEncoder","constructor","types","Object","freeze","links","parents","subtypes","keys","forEach","uniqueNames","field","baseType","encoder","push","primaryTypes","filter","n","t","checkCircular","found","child","subtype","primaryType","st","sort","_types","getEncoder","_encoderCache","_getEncoder","subEncoder","result","encodedType","values","unshift","encodeData","hashStruct","encode","hash","_visit","callback","reduce","accum","visit","getPrimaryType","hashDomain","domain","domainFields","a","b","indexOf","EIP712Domain","resolveNames","resolveName","ensCache","getPayload","domainValues","domainTypes","typesWithDomain","message"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/hash/src.ts/typed-data.ts"],"sourcesContent":["import { TypedDataDomain, TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { id } from \"./id\";\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\n\nconst NegativeOne: BigNumber = BigNumber.from(-1);\nconst Zero: BigNumber = BigNumber.from(0);\nconst One: BigNumber = BigNumber.from(1);\nconst MaxUint256: BigNumber = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nfunction hexPadRight(value: BytesLike) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32\n    if (padOffset) {\n        return hexConcat([ bytes, padding.slice(padOffset) ]);\n    }\n    return hexlify(bytes);\n}\n\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\n\nconst domainFieldTypes: Record<string, string> = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\n\nconst domainFieldNames: Array<string> = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\n\nfunction checkString(key: string): (value: any) => string {\n    return function (value: any){\n        if (typeof(value) !== \"string\") {\n            logger.throwArgumentError(`invalid domain value for ${ JSON.stringify(key) }`, `domain.${ key }`, value);\n        }\n        return value;\n    }\n}\n\nconst domainChecks: Record<string, (value: any) => any> = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(value: any) {\n        try {\n            return BigNumber.from(value).toString()\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function(value: any) {\n        try {\n            return getAddress(value).toLowerCase();\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function(value: any) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) { throw new Error(\"bad length\"); }\n            return hexlify(bytes);\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n}\n\nfunction getBaseEncoder(type: string): (value: any) => string {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1): width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne): Zero;\n\n            return function(value: BigNumberish) {\n                const v = BigNumber.from(value);\n\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(`value out-of-bounds for ${ type }`, \"value\", value);\n                }\n\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n\n            return function(value: BytesLike) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(`invalid length for ${ type }`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n\n    switch (type) {\n        case \"address\": return function(value: string) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function(value: boolean) {\n            return ((!value) ? hexFalse: hexTrue);\n        };\n        case \"bytes\": return function(value: BytesLike) {\n            return keccak256(value);\n        };\n        case \"string\": return function(value: string) {\n            return id(value);\n        };\n    }\n\n    return null;\n}\n\nfunction encodeType(name: string, fields: Array<TypedDataField>): string {\n    return `${ name }(${ fields.map(({ name, type }) => (type + \" \" + name)).join(\",\") })`;\n}\n\nexport class TypedDataEncoder {\n    readonly primaryType: string;\n    readonly types: Record<string, Array<TypedDataField>>;\n\n    readonly _encoderCache: Record<string, (value: any) => string>;\n    readonly _types: Record<string, string>;\n\n    constructor(types: Record<string, Array<TypedDataField>>) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n\n        defineReadOnly(this, \"_encoderCache\", { });\n        defineReadOnly(this, \"_types\", { });\n\n        // Link struct types to their direct child structs\n        const links: Record<string, Record<string, boolean>> = { };\n\n        // Link structs to structs which contain them as a child\n        const parents: Record<string, Array<string>> = { };\n\n        // Link all subtypes within a given struct\n        const subtypes: Record<string, Record<string, boolean>> = { };\n\n        Object.keys(types).forEach((type) => {\n            links[type] = { };\n            parents[type] = [ ];\n            subtypes[type] = { }\n        });\n\n        for (const name in types) {\n\n            const uniqueNames: Record<string, boolean> = { };\n\n            types[name].forEach((field) => {\n\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(`duplicate variable name ${ JSON.stringify(field.name) } in ${ JSON.stringify(name) }`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(`circular type reference to ${ JSON.stringify(baseType) }`, \"types\", types);\n                }\n\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) { return ;}\n\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(`unknown type ${ JSON.stringify(baseType) }`, \"types\", types);\n                }\n\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        } else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(`ambiguous primary types or unused types: ${ primaryTypes.map((t) => (JSON.stringify(t))).join(\", \") }`, \"types\", types);\n        }\n\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n\n        // Check for circular type references\n        function checkCircular(type: string, found: Record<string, boolean>) {\n            if (found[type]) {\n                logger.throwArgumentError(`circular type reference to ${ JSON.stringify(type) }`, \"types\", types);\n            }\n\n            found[type] = true;\n\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) { return; }\n\n                // Recursively check children\n                checkCircular(child, found);\n\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n\n            delete found[type];\n        }\n        checkCircular(this.primaryType, { });\n\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n\n    getEncoder(type: string): (value: any) => string {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n\n    _getEncoder(type: string): (value: any) => string {\n\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return encoder; }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value: Array<any>) => {\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n\n                return keccak256(hexConcat(result));\n            };\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value: Record<string, any>) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) { return keccak256(result); }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            }\n        }\n\n        return logger.throwArgumentError(`unknown type: ${ type }`, \"type\", type);\n    }\n\n    encodeType(name: string): string {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(`unknown type: ${ JSON.stringify(name) }`, \"name\", name);\n        }\n        return result;\n    }\n\n    encodeData(type: string, value: any): string {\n        return this.getEncoder(type)(value);\n    }\n\n    hashStruct(name: string, value: Record<string, any>): string {\n        return keccak256(this.encodeData(name, value));\n    }\n\n    encode(value: Record<string, any>): string {\n        return this.encodeData(this.primaryType, value);\n    }\n\n    hash(value: Record<string, any>): string {\n        return this.hashStruct(this.primaryType, value);\n    }\n\n    _visit(type: string, value: any, callback: (type: string, data: any) => any): any {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return callback(type, value); }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v: any) => this._visit(subtype, v, callback));\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, <Record<string, any>>{});\n        }\n\n        return logger.throwArgumentError(`unknown type: ${ type }`, \"type\", type);\n    }\n\n    visit(value: Record<string, any>, callback: (type: string, data: any) => any): any {\n        return this._visit(this.primaryType, value, callback);\n    }\n\n    static from(types: Record<string, Array<TypedDataField>>): TypedDataEncoder {\n        return new TypedDataEncoder(types);\n    }\n\n    static getPrimaryType(types: Record<string, Array<TypedDataField>>): string {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n\n    static hashStruct(name: string, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n\n    static hashDomain(domain: TypedDataDomain): string {\n        const domainFields: Array<TypedDataField> = [ ];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(`invalid typed-data domain key: ${ JSON.stringify(name) }`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n\n    static encode(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n\n    static hash(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n\n    // Replaces all address types with ENS names with their looked up address\n    static async resolveNames(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, resolveName: (name: string) => Promise<string>): Promise<{ domain: TypedDataDomain, value: any }> {\n        // Make a copy to isolate it from the object passed in\n        domain = shallowCopy(domain);\n\n        // Look up all ENS names\n        const ensCache: Record<string, string> = { };\n\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get a list of all the addresses\n        encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && ensCache[value]) { return ensCache[value]; }\n            return value;\n        });\n\n        return { domain, value };\n    }\n\n    static getPayload(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): any {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n\n        // Derive the EIP712Domain Struct reference type\n        const domainValues: Record<string, any> = { };\n        const domainTypes: Array<{ name: string, type:string }> = [ ];\n\n        domainFieldNames.forEach((name) => {\n            const value = (<any>domain)[name];\n            if (value == null) { return; }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n\n        const encoder = TypedDataEncoder.from(types);\n\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        } else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n\n        // Validate the data structures and types\n        encoder.encode(value);\n\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type: string, value: any) => {\n\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof(value) !== \"string\") {\n                            logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}