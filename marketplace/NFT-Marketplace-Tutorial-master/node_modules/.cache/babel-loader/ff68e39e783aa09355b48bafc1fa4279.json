{"ast":null,"code":"\"use strict\";\n\nimport hash from \"hash.js\"; //const _ripemd160 = _hash.ripemd160;\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n  return \"0x\" + hash.ripemd160().update(arrayify(data)).digest(\"hex\");\n}\nexport function sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\nexport function sha512(data) {\n  return \"0x\" + hash.sha512().update(arrayify(data)).digest(\"hex\");\n}\nexport function computeHmac(algorithm, key, data) {\n  if (!SupportedAlgorithm[algorithm]) {\n    logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"hmac\",\n      algorithm: algorithm\n    });\n  }\n\n  return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}","map":{"version":3,"mappings":"AAAA;;AAEA,OAAOA,IAAP,MAAiB,SAAjB,C,CACA;;AAEA,SAASC,QAAT,QAAoC,sBAApC;AAEA,SAASC,kBAAT,QAAmC,SAAnC;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,OAAM,SAAUE,SAAV,CAAoBC,IAApB,EAAmC;EACrC,OAAO,OAAQP,IAAI,CAACM,SAAL,GAAiBE,MAAjB,CAAwBP,QAAQ,CAACM,IAAD,CAAhC,EAAwCE,MAAxC,CAA+C,KAA/C,CAAf;AACH;AAED,OAAM,SAAUC,MAAV,CAAiBH,IAAjB,EAAgC;EAClC,OAAO,OAAQP,IAAI,CAACU,MAAL,GAAcF,MAAd,CAAqBP,QAAQ,CAACM,IAAD,CAA7B,EAAqCE,MAArC,CAA4C,KAA5C,CAAf;AACH;AAED,OAAM,SAAUE,MAAV,CAAiBJ,IAAjB,EAAgC;EAClC,OAAO,OAAQP,IAAI,CAACW,MAAL,GAAcH,MAAd,CAAqBP,QAAQ,CAACM,IAAD,CAA7B,EAAqCE,MAArC,CAA4C,KAA5C,CAAf;AACH;AAED,OAAM,SAAUG,WAAV,CAAsBC,SAAtB,EAAqDC,GAArD,EAAqEP,IAArE,EAAoF;EACtF,IAAI,CAACL,kBAAkB,CAACW,SAAD,CAAvB,EAAoC;IAChCR,MAAM,CAACU,UAAP,CAAkB,2BAA2BF,SAA7C,EAAwDV,MAAM,CAACa,MAAP,CAAcC,qBAAtE,EAA6F;MACzFC,SAAS,EAAE,MAD8E;MAEzFL,SAAS,EAAEA;IAF8E,CAA7F;EAIH;;EAED,OAAO,OAAOb,IAAI,CAACmB,IAAL,CAAgBnB,IAAK,CAACa,SAAD,CAArB,EAAkCZ,QAAQ,CAACa,GAAD,CAA1C,EAAiDN,MAAjD,CAAwDP,QAAQ,CAACM,IAAD,CAAhE,EAAwEE,MAAxE,CAA+E,KAA/E,CAAd;AACH","names":["hash","arrayify","SupportedAlgorithm","Logger","version","logger","ripemd160","data","update","digest","sha256","sha512","computeHmac","algorithm","key","throwError","errors","UNSUPPORTED_OPERATION","operation","hmac"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/sha2/src.ts/browser-sha2.ts"],"sourcesContent":["\"use strict\";\n\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nimport { SupportedAlgorithm } from \"./types\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport function ripemd160(data: BytesLike): string {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha256(data: BytesLike): string {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha512(data: BytesLike): string {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function computeHmac(algorithm: SupportedAlgorithm, key: BytesLike, data: BytesLike): string {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n\n    return \"0x\" + hash.hmac((<any>hash)[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n\n"]},"metadata":{},"sourceType":"module"}