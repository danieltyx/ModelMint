{"ast":null,"code":"\"use strict\"; // This gets overridden by rollup\n\nconst exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\nexport class Wordlist {\n  constructor(locale) {\n    logger.checkAbstract(new.target, Wordlist);\n    defineReadOnly(this, \"locale\", locale);\n  } // Subclasses may override this\n\n\n  split(mnemonic) {\n    return mnemonic.toLowerCase().split(/ +/g);\n  } // Subclasses may override this\n\n\n  join(words) {\n    return words.join(\" \");\n  }\n\n  static check(wordlist) {\n    const words = [];\n\n    for (let i = 0; i < 2048; i++) {\n      const word = wordlist.getWord(i);\n      /* istanbul ignore if */\n\n      if (i !== wordlist.getWordIndex(word)) {\n        return \"0x\";\n      }\n\n      words.push(word);\n    }\n\n    return id(words.join(\"\\n\") + \"\\n\");\n  }\n\n  static register(lang, name) {\n    if (!name) {\n      name = lang.locale;\n    }\n    /* istanbul ignore if */\n\n\n    if (exportWordlist) {\n      try {\n        const anyGlobal = window;\n\n        if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n          if (!anyGlobal._ethers.wordlists[name]) {\n            defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n          }\n        }\n      } catch (error) {}\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,a,CAEA;;AACA,MAAMA,cAAc,GAAG,KAAvB;AAEA,SAASC,EAAT,QAAmB,qBAAnB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAO,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEP,OAAM,MAAgBE,QAAhB,CAAwB;EAG1BC,YAAYC,MAAZ,EAA0B;IACtBH,MAAM,CAACI,aAAP,CAAqBC,GAAG,CAACC,MAAzB,EAAiCL,QAAjC;IACAJ,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiBM,MAAjB,CAAd;EACH,CANyB,CAW1B;;;EACAI,KAAK,CAACC,QAAD,EAAiB;IAClB,OAAOA,QAAQ,CAACC,WAAT,GAAuBF,KAAvB,CAA6B,KAA7B,CAAP;EACH,CAdyB,CAgB1B;;;EACAG,IAAI,CAACC,KAAD,EAAqB;IACrB,OAAOA,KAAK,CAACD,IAAN,CAAW,GAAX,CAAP;EACH;;EAEW,OAALE,KAAK,CAACC,QAAD,EAAmB;IAC3B,MAAMF,KAAK,GAAG,EAAd;;IACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA+B;MAC3B,MAAMC,IAAI,GAAGF,QAAQ,CAACG,OAAT,CAAiBF,CAAjB,CAAb;MACA;;MACA,IAAIA,CAAC,KAAKD,QAAQ,CAACI,YAAT,CAAsBF,IAAtB,CAAV,EAAuC;QAAE,OAAO,IAAP;MAAc;;MACvDJ,KAAK,CAACO,IAAN,CAAWH,IAAX;IACH;;IACD,OAAOnB,EAAE,CAACe,KAAK,CAACD,IAAN,CAAW,IAAX,IAAmB,IAApB,CAAT;EACH;;EAEc,OAARS,QAAQ,CAACC,IAAD,EAAiBC,IAAjB,EAA8B;IACzC,IAAI,CAACA,IAAL,EAAW;MAAEA,IAAI,GAAGD,IAAI,CAACjB,MAAZ;IAAqB;IAElC;;;IACA,IAAIR,cAAJ,EAAoB;MAChB,IAAI;QACA,MAAM2B,SAAS,GAAIC,MAAnB;;QACA,IAAID,SAAS,CAACE,OAAV,IAAqBF,SAAS,CAACE,OAAV,CAAkBC,SAA3C,EAAsD;UAClD,IAAI,CAACH,SAAS,CAACE,OAAV,CAAkBC,SAAlB,CAA4BJ,IAA5B,CAAL,EAAwC;YACnCxB,cAAc,CAACyB,SAAS,CAACE,OAAV,CAAkBC,SAAnB,EAA8BJ,IAA9B,EAAoCD,IAApC,CAAd;UACJ;QACJ;MACJ,CAPD,CAOE,OAAOM,KAAP,EAAc,CAAG;IACtB;EACJ;;AA9CyB","names":["exportWordlist","id","defineReadOnly","Logger","version","logger","Wordlist","constructor","locale","checkAbstract","new","target","split","mnemonic","toLowerCase","join","words","check","wordlist","i","word","getWord","getWordIndex","push","register","lang","name","anyGlobal","window","_ethers","wordlists","error"],"sources":["/Users/tingyandeng/Documents/GitHub/ModelGPT/marketplace/NFT-Marketplace-Tutorial-master/node_modules/@ethersproject/wordlists/src.ts/wordlist.ts"],"sourcesContent":["\"use strict\";\n\n// This gets overridden by rollup\nconst exportWordlist = false;\n\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\n\nexport abstract class Wordlist {\n    readonly locale: string;\n\n    constructor(locale: string) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n\n    abstract getWord(index: number): string;\n    abstract getWordIndex(word: string): number;\n\n    // Subclasses may override this\n    split(mnemonic: string): Array<string> {\n        return mnemonic.toLowerCase().split(/ +/g)\n    }\n\n    // Subclasses may override this\n    join(words: Array<string>): string {\n        return words.join(\" \");\n    }\n\n    static check(wordlist: Wordlist): string {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) { return \"0x\"; }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n\n    static register(lang: Wordlist, name?: string): void {\n        if (!name) { name = lang.locale; }\n\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = (window as any)\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                         defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            } catch (error) { }\n        }\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}